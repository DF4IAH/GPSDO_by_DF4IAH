
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b55c  0800b55c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b564  0800b564  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b56c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000070  0800b5dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  0800b5dc  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243d1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000437f  00000000  00000000  00044471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  000487f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  0004a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026071  00000000  00000000  0004bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212de  00000000  00000000  00071d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6516  00000000  00000000  00092fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b8  00000000  00000000  00179568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adb4 	.word	0x0800adb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800adb4 	.word	0x0800adb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800057e:	4b47      	ldr	r3, [pc, #284]	; (800069c <MX_ADC1_Init+0x134>)
 8000580:	4a47      	ldr	r2, [pc, #284]	; (80006a0 <MX_ADC1_Init+0x138>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000584:	4b45      	ldr	r3, [pc, #276]	; (800069c <MX_ADC1_Init+0x134>)
 8000586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800058a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <MX_ADC1_Init+0x134>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000592:	4b42      	ldr	r3, [pc, #264]	; (800069c <MX_ADC1_Init+0x134>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000598:	4b40      	ldr	r3, [pc, #256]	; (800069c <MX_ADC1_Init+0x134>)
 800059a:	2201      	movs	r2, #1
 800059c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059e:	4b3f      	ldr	r3, [pc, #252]	; (800069c <MX_ADC1_Init+0x134>)
 80005a0:	2204      	movs	r2, #4
 80005a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a4:	4b3d      	ldr	r3, [pc, #244]	; (800069c <MX_ADC1_Init+0x134>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005aa:	4b3c      	ldr	r3, [pc, #240]	; (800069c <MX_ADC1_Init+0x134>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80005b0:	4b3a      	ldr	r3, [pc, #232]	; (800069c <MX_ADC1_Init+0x134>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b39      	ldr	r3, [pc, #228]	; (800069c <MX_ADC1_Init+0x134>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <MX_ADC1_Init+0x134>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c4:	4b35      	ldr	r3, [pc, #212]	; (800069c <MX_ADC1_Init+0x134>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <MX_ADC1_Init+0x134>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_ADC1_Init+0x134>)
 80005d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80005da:	4b30      	ldr	r3, [pc, #192]	; (800069c <MX_ADC1_Init+0x134>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_ADC1_Init+0x134>)
 80005e4:	220c      	movs	r2, #12
 80005e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80005e8:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_ADC1_Init+0x134>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <MX_ADC1_Init+0x134>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80005f4:	4b29      	ldr	r3, [pc, #164]	; (800069c <MX_ADC1_Init+0x134>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4828      	ldr	r0, [pc, #160]	; (800069c <MX_ADC1_Init+0x134>)
 80005fc:	f003 fa5a 	bl	8003ab4 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000606:	f001 f93d 	bl	8001884 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_ADC1_Init+0x13c>)
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060e:	2306      	movs	r3, #6
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000612:	2303      	movs	r3, #3
 8000614:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000616:	237f      	movs	r3, #127	; 0x7f
 8000618:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061a:	2304      	movs	r3, #4
 800061c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <MX_ADC1_Init+0x134>)
 8000628:	f003 fd58 	bl	80040dc <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000632:	f001 f927 	bl	8001884 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_ADC1_Init+0x140>)
 8000638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800063a:	230c      	movs	r3, #12
 800063c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4619      	mov	r1, r3
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <MX_ADC1_Init+0x134>)
 8000644:	f003 fd4a 	bl	80040dc <HAL_ADC_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800064e:	f001 f919 	bl	8001884 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_ADC1_Init+0x144>)
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000656:	2312      	movs	r3, #18
 8000658:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <MX_ADC1_Init+0x134>)
 8000660:	f003 fd3c 	bl	80040dc <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800066a:	f001 f90b 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <MX_ADC1_Init+0x148>)
 8000672:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <MX_ADC1_Init+0x148>)
 8000678:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <MX_ADC1_Init+0x148>)
 800067e:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <MX_ADC1_Init+0x148>)
 8000684:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <MX_ADC1_Init+0x148>)
 800068a:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <MX_ADC1_Init+0x148>)
 8000690:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000036c 	.word	0x2000036c
 80006a0:	50040000 	.word	0x50040000
 80006a4:	25b00200 	.word	0x25b00200
 80006a8:	2a000400 	.word	0x2a000400
 80006ac:	43210000 	.word	0x43210000
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0a0      	sub	sp, #128	; 0x80
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	2254      	movs	r2, #84	; 0x54
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f009 ff31 	bl	800a53c <memset>
  if(adcHandle->Instance==ADC1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a43      	ldr	r2, [pc, #268]	; (80007ec <HAL_ADC_MspInit+0x138>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d17f      	bne.n	80007e4 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80006ee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	4618      	mov	r0, r3
 80006f6:	f007 fa95 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000700:	f001 f8c0 	bl	8001884 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000704:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	4a39      	ldr	r2, [pc, #228]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 800070a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000728:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 8000736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000738:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <HAL_ADC_MspInit+0x13c>)
 8000742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 800074c:	2330      	movs	r3, #48	; 0x30
 800074e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000750:	230b      	movs	r3, #11
 8000752:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f004 fbe1 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 8000766:	2302      	movs	r3, #2
 8000768:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800076a:	230b      	movs	r3, #11
 800076c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000776:	4619      	mov	r1, r3
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <HAL_ADC_MspInit+0x140>)
 800077a:	f004 fbd5 	bl	8004f28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <HAL_ADC_MspInit+0x148>)
 8000782:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 800079e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 80007a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 80007ba:	f004 f9c1 	bl	8004b40 <HAL_DMA_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80007c4:	f001 f85e 	bl	8001884 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 80007cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_ADC_MspInit+0x144>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2012      	movs	r0, #18
 80007da:	f004 f979 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80007de:	2012      	movs	r0, #18
 80007e0:	f004 f992 	bl	8004b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3780      	adds	r7, #128	; 0x80
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	50040000 	.word	0x50040000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000400 	.word	0x48000400
 80007f8:	200003d0 	.word	0x200003d0
 80007fc:	40020008 	.word	0x40020008

08000800 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	static uint8_t chSel = 0U;

	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f004 f847 	bl	800489c <HAL_ADC_GetState>
 800080e:	4603      	mov	r3, r0
 8000810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000814:	2b00      	cmp	r3, #0
 8000816:	d03e      	beq.n	8000896 <HAL_ADC_ConvCpltCallback+0x96>
		/* One Convertion has finished */
		switch (chSel)
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d00c      	beq.n	800083a <HAL_ADC_ConvCpltCallback+0x3a>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d015      	beq.n	8000850 <HAL_ADC_ConvCpltCallback+0x50>
		{
		default:
		case 0:
	    	if (!adcCh9_lck) {
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d11c      	bne.n	8000866 <HAL_ADC_ConvCpltCallback+0x66>
				/* Get the converted value of regular channel */
				adcCh9_val = HAL_ADC_GetValue(hadc);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f003 fa89 	bl	8003d44 <HAL_ADC_GetValue>
 8000832:	4603      	mov	r3, r0
 8000834:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000836:	6013      	str	r3, [r2, #0]
	    	}
			break;
 8000838:	e015      	b.n	8000866 <HAL_ADC_ConvCpltCallback+0x66>

		case 1:
	    	if (!adcCh10_lck) {
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <HAL_ADC_ConvCpltCallback+0xdc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d113      	bne.n	800086a <HAL_ADC_ConvCpltCallback+0x6a>
				/* Get the converted value of regular channel */
	    		adcCh10_val = HAL_ADC_GetValue(hadc);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f003 fa7e 	bl	8003d44 <HAL_ADC_GetValue>
 8000848:	4603      	mov	r3, r0
 800084a:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <HAL_ADC_ConvCpltCallback+0xe0>)
 800084c:	6013      	str	r3, [r2, #0]
	    	}
			break;
 800084e:	e00c      	b.n	800086a <HAL_ADC_ConvCpltCallback+0x6a>

		case 2:
	    	if (!adcCh16_lck) {
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d10a      	bne.n	800086e <HAL_ADC_ConvCpltCallback+0x6e>
				/* Get the converted value of regular channel */
	    		adcCh16_val = HAL_ADC_GetValue(hadc);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f003 fa73 	bl	8003d44 <HAL_ADC_GetValue>
 800085e:	4603      	mov	r3, r0
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000862:	6013      	str	r3, [r2, #0]
	    	}
			break;
 8000864:	e003      	b.n	800086e <HAL_ADC_ConvCpltCallback+0x6e>
			break;
 8000866:	bf00      	nop
 8000868:	e002      	b.n	8000870 <HAL_ADC_ConvCpltCallback+0x70>
			break;
 800086a:	bf00      	nop
 800086c:	e000      	b.n	8000870 <HAL_ADC_ConvCpltCallback+0x70>
			break;
 800086e:	bf00      	nop
		}

    	/* Next time use next channel */
    	++chSel;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800087a:	701a      	strb	r2, [r3, #0]
    	chSel %= 3;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_ADC_ConvCpltCallback+0xd0>)
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_ADC_ConvCpltCallback+0xec>)
 8000882:	fba3 1302 	umull	r1, r3, r3, r2
 8000886:	0859      	lsrs	r1, r3, #1
 8000888:	460b      	mov	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	440b      	add	r3, r1
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8000894:	701a      	strb	r2, [r3, #0]
	}

	uint32_t status = READ_REG(hadc->Instance->ISR);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
	if (status & ADC_FLAG_EOS) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d006      	beq.n	80008b6 <HAL_ADC_ConvCpltCallback+0xb6>
	//if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) {
		/* Sequence Convertion has finished */
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2208      	movs	r2, #8
 80008ae:	601a      	str	r2, [r3, #0]
		chSel = 0;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_ADC_ConvCpltCallback+0xd0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	}

	if (status & ADC_FLAG_OVR) {
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d003      	beq.n	80008c8 <HAL_ADC_ConvCpltCallback+0xc8>
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2210      	movs	r2, #16
 80008c6:	601a      	str	r2, [r3, #0]
	}
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000bc 	.word	0x200000bc
 80008d4:	200000a4 	.word	0x200000a4
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	200000ac 	.word	0x200000ac
 80008e0:	200000b0 	.word	0x200000b0
 80008e4:	200000b4 	.word	0x200000b4
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	aaaaaaab 	.word	0xaaaaaaab

080008f0 <HAL_ADC_ErrorCallback>:
	++ctr;
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_ADC_ErrorCallback+0x20>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_ADC_ErrorCallback+0x20>)
 8000900:	6013      	str	r3, [r2, #0]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200000c0 	.word	0x200000c0

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_DMA_Init+0x38>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <MX_DMA_Init+0x38>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6493      	str	r3, [r2, #72]	; 0x48
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_DMA_Init+0x38>)
 8000928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	200b      	movs	r0, #11
 8000938:	f004 f8ca 	bl	8004ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800093c:	200b      	movs	r0, #11
 800093e:	f004 f8e3 	bl	8004b08 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <MX_GPIO_Init+0x160>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a4b      	ldr	r2, [pc, #300]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <MX_GPIO_Init+0x160>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x160>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x160>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_GPIO_Init+0x160>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x160>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x160>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f004 fcf6 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x164>)
 80009da:	f004 fcf1 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	4834      	ldr	r0, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x164>)
 80009e4:	f004 fcec 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A0_OCXO_RCC_CK_IN_NC_Pin;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_OCXO_RCC_CK_IN_NC_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f004 fa93 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0x168>)
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x164>)
 8000a16:	f004 fa87 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8000a1a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f004 fa79 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f004 fa69 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8000a56:	2310      	movs	r3, #16
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x164>)
 8000a6e:	f004 fa5b 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 8000a72:	2320      	movs	r3, #32
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a76:	2311      	movs	r3, #17
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0x164>)
 8000a8a:	f004 fa4d 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_GPIO_Init+0x16c>)
 8000aa2:	f004 fa41 	bl	8004f28 <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	10110000 	.word	0x10110000
 8000abc:	48001c00 	.word	0x48001c00

08000ac0 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <onewireMasterWr_bit+0x64>)
 8000ad0:	f004 fc76 	bl	80053c0 <HAL_GPIO_WritePin>
	uDelay(2);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f000 fc53 	bl	8001380 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <onewireMasterWr_bit+0x64>)
 8000ae0:	f004 fc6e 	bl	80053c0 <HAL_GPIO_WritePin>

	if (bit) {
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <onewireMasterWr_bit+0x42>
		/* Writing a One */
		uDelay(2);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 fc48 	bl	8001380 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2120      	movs	r1, #32
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <onewireMasterWr_bit+0x64>)
 8000af6:	f004 fc63 	bl	80053c0 <HAL_GPIO_WritePin>
		uDelay(88);
 8000afa:	2058      	movs	r0, #88	; 0x58
 8000afc:	f000 fc40 	bl	8001380 <uDelay>
 8000b00:	e007      	b.n	8000b12 <onewireMasterWr_bit+0x52>
	}
	else {
		/* Writing a Zero */
		uDelay(90);
 8000b02:	205a      	movs	r0, #90	; 0x5a
 8000b04:	f000 fc3c 	bl	8001380 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <onewireMasterWr_bit+0x64>)
 8000b0e:	f004 fc57 	bl	80053c0 <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2120      	movs	r1, #32
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <onewireMasterWr_bit+0x64>)
 8000b18:	f004 fc52 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	48000400 	.word	0x48000400

08000b28 <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e00d      	b.n	8000b54 <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	fa42 f303 	asr.w	r3, r2, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ffb9 	bl	8000ac0 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	d9ee      	bls.n	8000b38 <onewireMasterWr_byte+0x10>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d124      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3301      	adds	r3, #1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d11f      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3302      	adds	r3, #2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11a      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d115      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3304      	adds	r3, #4
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d110      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3305      	adds	r3, #5
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10b      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d106      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3307      	adds	r3, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d010      	beq.n	8000be6 <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e009      	b.n	8000bde <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffa8 	bl	8000b28 <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f2      	bne.n	8000bca <onewireMasterWr_romCode+0x66>
 8000be4:	e000      	b.n	8000be8 <onewireMasterWr_romCode+0x84>
		return;
 8000be6:	bf00      	nop
	}
}
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	4817      	ldr	r0, [pc, #92]	; (8000c58 <onewireMasterRd_bit+0x68>)
 8000bfc:	f004 fbe0 	bl	80053c0 <HAL_GPIO_WritePin>
	uDelay(2);
 8000c00:	2002      	movs	r0, #2
 8000c02:	f000 fbbd 	bl	8001380 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2120      	movs	r1, #32
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <onewireMasterRd_bit+0x68>)
 8000c0c:	f004 fbd8 	bl	80053c0 <HAL_GPIO_WritePin>
	uDelay(2);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 fbb5 	bl	8001380 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <onewireMasterRd_bit+0x68>)
 8000c1c:	f004 fbd0 	bl	80053c0 <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8000c20:	200d      	movs	r0, #13
 8000c22:	f000 fbad 	bl	8001380 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8000c26:	2120      	movs	r1, #32
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <onewireMasterRd_bit+0x68>)
 8000c2a:	f004 fbb1 	bl	8005390 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 8000c32:	204b      	movs	r0, #75	; 0x4b
 8000c34:	f000 fba4 	bl	8001380 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <onewireMasterRd_bit+0x68>)
 8000c3e:	f004 fbbf 	bl	80053c0 <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	bf0c      	ite	eq
 8000c48:	2301      	moveq	r3, #1
 8000c4a:	2300      	movne	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	48000400 	.word	0x48000400

08000c5c <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b20      	cmp	r3, #32
 8000c6e:	d902      	bls.n	8000c76 <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	e016      	b.n	8000ca4 <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	72fb      	strb	r3, [r7, #11]
 8000c7a:	e00e      	b.n	8000c9a <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8000c7c:	f7ff ffb8 	bl	8000bf0 <onewireMasterRd_bit>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8000c94:	7afb      	ldrb	r3, [r7, #11]
 8000c96:	3301      	adds	r3, #1
 8000c98:	72fb      	strb	r3, [r7, #11]
 8000c9a:	7afa      	ldrb	r2, [r7, #11]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d3ec      	bcc.n	8000c7c <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4813      	ldr	r0, [pc, #76]	; (8000d04 <onewireMasterCheck_presence+0x58>)
 8000cb8:	f004 fb82 	bl	80053c0 <HAL_GPIO_WritePin>
	uDelay(2000);
 8000cbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cc0:	f000 fb5e 	bl	8001380 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <onewireMasterCheck_presence+0x58>)
 8000cca:	f004 fb79 	bl	80053c0 <HAL_GPIO_WritePin>
	uDelay(550);
 8000cce:	f240 2026 	movw	r0, #550	; 0x226
 8000cd2:	f000 fb55 	bl	8001380 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2120      	movs	r1, #32
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <onewireMasterCheck_presence+0x58>)
 8000cdc:	f004 fb70 	bl	80053c0 <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(90);
 8000ce0:	205a      	movs	r0, #90	; 0x5a
 8000ce2:	f000 fb4d 	bl	8001380 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <onewireMasterCheck_presence+0x58>)
 8000cea:	f004 fb51 	bl	8005390 <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	uDelay(550);
 8000cf2:	f240 2026 	movw	r0, #550	; 0x226
 8000cf6:	f000 fb43 	bl	8001380 <uDelay>

	return presence;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	48000400 	.word	0x48000400

08000d08 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	603a      	str	r2, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	460b      	mov	r3, r1
 8000d16:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt		= 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow		= 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	77bb      	strb	r3, [r7, #30]
	uint8_t bitIdxLastZero	= 0xffU;
 8000d20:	23ff      	movs	r3, #255	; 0xff
 8000d22:	777b      	strb	r3, [r7, #29]
	uint8_t discrepancyLast	= 0xffU;
 8000d24:	23ff      	movs	r3, #255	; 0xff
 8000d26:	75fb      	strb	r3, [r7, #23]
	uint8_t lastDeviceFlag	= 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	773b      	strb	r3, [r7, #28]
	uint8_t masterMind[8] 	= { 0 };
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]

	while (1) {
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8000d34:	f7ff ffba 	bl	8000cac <onewireMasterCheck_presence>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d101      	bne.n	8000d42 <onewireMasterTree_search+0x3a>
			/* No devices */
			return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e0c0      	b.n	8000ec4 <onewireMasterTree_search+0x1bc>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8000d42:	7f3b      	ldrb	r3, [r7, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 80b9 	bne.w	8000ebc <onewireMasterTree_search+0x1b4>
			break;
		}

		if (searchAlarms) {
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <onewireMasterTree_search+0x50>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 8000d50:	20ec      	movs	r0, #236	; 0xec
 8000d52:	f7ff fee9 	bl	8000b28 <onewireMasterWr_byte>
 8000d56:	e08b      	b.n	8000e70 <onewireMasterTree_search+0x168>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8000d58:	20f0      	movs	r0, #240	; 0xf0
 8000d5a:	f7ff fee5 	bl	8000b28 <onewireMasterWr_byte>
		}

		while (bitIdxNow < 64) {
 8000d5e:	e087      	b.n	8000e70 <onewireMasterTree_search+0x168>
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 8000d60:	7fbb      	ldrb	r3, [r7, #30]
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f107 0220 	add.w	r2, r7, #32
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d70:	461a      	mov	r2, r3
 8000d72:	7fbb      	ldrb	r3, [r7, #30]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	fa42 f303 	asr.w	r3, r2, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	75bb      	strb	r3, [r7, #22]

			uint8_t b_pos = onewireMasterRd_bit();
 8000d84:	f7ff ff34 	bl	8000bf0 <onewireMasterRd_bit>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	757b      	strb	r3, [r7, #21]
			uint8_t b_neg = onewireMasterRd_bit();
 8000d8c:	f7ff ff30 	bl	8000bf0 <onewireMasterRd_bit>
 8000d90:	4603      	mov	r3, r0
 8000d92:	753b      	strb	r3, [r7, #20]

			if (!b_pos && b_neg) {
 8000d94:	7d7b      	ldrb	r3, [r7, #21]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d106      	bne.n	8000da8 <onewireMasterTree_search+0xa0>
 8000d9a:	7d3b      	ldrb	r3, [r7, #20]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <onewireMasterTree_search+0xa0>
				/* Only '0' */
				onewireMasterWr_bit(0);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fe8d 	bl	8000ac0 <onewireMasterWr_bit>
 8000da6:	e060      	b.n	8000e6a <onewireMasterTree_search+0x162>
			}
			else if (b_pos && !b_neg) {
 8000da8:	7d7b      	ldrb	r3, [r7, #21]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d01f      	beq.n	8000dee <onewireMasterTree_search+0xe6>
 8000dae:	7d3b      	ldrb	r3, [r7, #20]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d11c      	bne.n	8000dee <onewireMasterTree_search+0xe6>
				/* Only '1' */
				onewireMasterWr_bit(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fe83 	bl	8000ac0 <onewireMasterWr_bit>
				masterMind[bitIdxNow >> 3] |= 1U << (bitIdxNow & 0x07U);
 8000dba:	7fbb      	ldrb	r3, [r7, #30]
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f107 0220 	add.w	r2, r7, #32
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000dca:	7fbb      	ldrb	r3, [r7, #30]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	7fb9      	ldrb	r1, [r7, #30]
 8000dda:	08c9      	lsrs	r1, r1, #3
 8000ddc:	b2c9      	uxtb	r1, r1
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	440b      	add	r3, r1
 8000de8:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000dec:	e03d      	b.n	8000e6a <onewireMasterTree_search+0x162>
			}
			else if (!b_pos && !b_neg) {
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d132      	bne.n	8000e5a <onewireMasterTree_search+0x152>
 8000df4:	7d3b      	ldrb	r3, [r7, #20]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d12f      	bne.n	8000e5a <onewireMasterTree_search+0x152>
				/* Discrepancy */
				if (bitIdxNow == bitIdxLastZero) {
 8000dfa:	7fba      	ldrb	r2, [r7, #30]
 8000dfc:	7f7b      	ldrb	r3, [r7, #29]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d11c      	bne.n	8000e3c <onewireMasterTree_search+0x134>
					/* Select the 1 branch */
					onewireMasterWr_bit(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fe5c 	bl	8000ac0 <onewireMasterWr_bit>
					masterMind[bitIdxNow >> 3] |= 1U << (bitIdxNow & 0x07U);
 8000e08:	7fbb      	ldrb	r3, [r7, #30]
 8000e0a:	08db      	lsrs	r3, r3, #3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f107 0220 	add.w	r2, r7, #32
 8000e12:	4413      	add	r3, r2
 8000e14:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000e18:	7fbb      	ldrb	r3, [r7, #30]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	7fb9      	ldrb	r1, [r7, #30]
 8000e28:	08c9      	lsrs	r1, r1, #3
 8000e2a:	b2c9      	uxtb	r1, r1
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	440b      	add	r3, r1
 8000e36:	f803 2c14 	strb.w	r2, [r3, #-20]
				if (bitIdxNow == bitIdxLastZero) {
 8000e3a:	e016      	b.n	8000e6a <onewireMasterTree_search+0x162>
				}
				else if (bitIdxNow < bitIdxLastZero) {
 8000e3c:	7fba      	ldrb	r2, [r7, #30]
 8000e3e:	7f7b      	ldrb	r3, [r7, #29]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d204      	bcs.n	8000e4e <onewireMasterTree_search+0x146>
					/* Follow last trace */
					onewireMasterWr_bit(bitNow);
 8000e44:	7dbb      	ldrb	r3, [r7, #22]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe3a 	bl	8000ac0 <onewireMasterWr_bit>
				if (bitIdxNow == bitIdxLastZero) {
 8000e4c:	e00d      	b.n	8000e6a <onewireMasterTree_search+0x162>
				}
				else {
					/* Select the 0 branch */
					onewireMasterWr_bit(0);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fe36 	bl	8000ac0 <onewireMasterWr_bit>
					bitIdxLastZero = bitIdxNow;
 8000e54:	7fbb      	ldrb	r3, [r7, #30]
 8000e56:	777b      	strb	r3, [r7, #29]
				if (bitIdxNow == bitIdxLastZero) {
 8000e58:	e007      	b.n	8000e6a <onewireMasterTree_search+0x162>
				}
			}
			else if (b_pos && b_neg) {
 8000e5a:	7d7b      	ldrb	r3, [r7, #21]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <onewireMasterTree_search+0x162>
 8000e60:	7d3b      	ldrb	r3, [r7, #20]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <onewireMasterTree_search+0x162>
				/* No devices anymore */
				return 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e02c      	b.n	8000ec4 <onewireMasterTree_search+0x1bc>
			}
			++bitIdxNow;
 8000e6a:	7fbb      	ldrb	r3, [r7, #30]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8000e70:	7fbb      	ldrb	r3, [r7, #30]
 8000e72:	2b3f      	cmp	r3, #63	; 0x3f
 8000e74:	f67f af74 	bls.w	8000d60 <onewireMasterTree_search+0x58>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8000e78:	7f7b      	ldrb	r3, [r7, #29]
 8000e7a:	75fb      	strb	r3, [r7, #23]

		/* Copy over one valid device */
		for (int idx = 0; idx < 8; ++idx) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	e00f      	b.n	8000ea2 <onewireMasterTree_search+0x19a>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	441a      	add	r2, r3
 8000e8a:	f107 010c 	add.w	r1, r7, #12
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	440b      	add	r3, r1
 8000e92:	7819      	ldrb	r1, [r3, #0]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4413      	add	r3, r2
 8000e98:	460a      	mov	r2, r1
 8000e9a:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < 8; ++idx) {
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	ddec      	ble.n	8000e82 <onewireMasterTree_search+0x17a>
		}
		++devicesCnt;
 8000ea8:	7ffb      	ldrb	r3, [r7, #31]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	77fb      	strb	r3, [r7, #31]

		if (discrepancyLast == 0xffU) {
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	f47f af3f 	bne.w	8000d34 <onewireMasterTree_search+0x2c>
			lastDeviceFlag = 1U;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	773b      	strb	r3, [r7, #28]
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8000eba:	e73b      	b.n	8000d34 <onewireMasterTree_search+0x2c>
			break;
 8000ebc:	bf00      	nop
		}
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8000ebe:	f7ff fef5 	bl	8000cac <onewireMasterCheck_presence>

	return devicesCnt;
 8000ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	71bb      	strb	r3, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d124      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11f      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d11a      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3303      	adds	r3, #3
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d115      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d110      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3305      	adds	r3, #5
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10b      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3306      	adds	r3, #6
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d106      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	3307      	adds	r3, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 8000f32:	231f      	movs	r3, #31
 8000f34:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b0b      	cmp	r3, #11
 8000f3a:	d00a      	beq.n	8000f52 <onewireDS18B20_setAdcWidth+0x86>
 8000f3c:	2b0b      	cmp	r3, #11
 8000f3e:	dc0d      	bgt.n	8000f5c <onewireDS18B20_setAdcWidth+0x90>
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	d010      	beq.n	8000f66 <onewireDS18B20_setAdcWidth+0x9a>
 8000f44:	2b0a      	cmp	r3, #10
 8000f46:	d109      	bne.n	8000f5c <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	73fb      	strb	r3, [r7, #15]
		break;
 8000f50:	e00a      	b.n	8000f68 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f58:	73fb      	strb	r3, [r7, #15]
		break;
 8000f5a:	e005      	b.n	8000f68 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f62:	73fb      	strb	r3, [r7, #15]
		break;
 8000f64:	e000      	b.n	8000f68 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 8000f66:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8000f68:	f7ff fea0 	bl	8000cac <onewireMasterCheck_presence>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11b      	bne.n	8000faa <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8000f78:	20cc      	movs	r0, #204	; 0xcc
 8000f7a:	f7ff fdd5 	bl	8000b28 <onewireMasterWr_byte>
 8000f7e:	e005      	b.n	8000f8c <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8000f80:	2055      	movs	r0, #85	; 0x55
 8000f82:	f7ff fdd1 	bl	8000b28 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f7ff fdec 	bl	8000b64 <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8000f8c:	204e      	movs	r0, #78	; 0x4e
 8000f8e:	f7ff fdcb 	bl	8000b28 <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fdc7 	bl	8000b28 <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fdc3 	bl	8000b28 <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fdbf 	bl	8000b28 <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8000faa:	f7ff fe7f 	bl	8000cac <onewireMasterCheck_presence>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d124      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d11f      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d11a      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3303      	adds	r3, #3
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d115      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d110      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3305      	adds	r3, #5
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10b      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3306      	adds	r3, #6
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3307      	adds	r3, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001010:	f7ff fe4c 	bl	8000cac <onewireMasterCheck_presence>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11b      	bne.n	8001052 <onewireDS18B20_tempReq+0x9c>
		if (!romCode) {
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d103      	bne.n	8001028 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001020:	20cc      	movs	r0, #204	; 0xcc
 8001022:	f7ff fd81 	bl	8000b28 <onewireMasterWr_byte>
 8001026:	e005      	b.n	8001034 <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001028:	2055      	movs	r0, #85	; 0x55
 800102a:	f7ff fd7d 	bl	8000b28 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fd98 	bl	8000b64 <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);
 8001034:	2044      	movs	r0, #68	; 0x44
 8001036:	f7ff fd77 	bl	8000b28 <onewireMasterWr_byte>
		uint32_t bfPushPull  = bfOpenDrain & (~D11_ONEWIRE_GPIO_IO_Pin);
		D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfPushPull;
#endif

		/* End time */
		uint32_t waitTime_ms = 760UL;
 800103a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 800103e:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 8001040:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 8001044:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		return HAL_GetTick() + waitTime_ms;
 8001046:	f002 fb53 	bl	80036f0 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	e000      	b.n	8001054 <onewireDS18B20_tempReq+0x9e>
	}

	/* No device present */
	return 0UL;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d124      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d11f      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3302      	adds	r3, #2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11a      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3303      	adds	r3, #3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d115      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3304      	adds	r3, #4
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d110      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3305      	adds	r3, #5
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10b      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	3306      	adds	r3, #6
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3307      	adds	r3, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC is ready */
	uint32_t t_now = HAL_GetTick();
 80010b8:	f002 fb1a 	bl	80036f0 <HAL_GetTick>
 80010bc:	6178      	str	r0, [r7, #20]
	if (t_now < waitUntil) {
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d205      	bcs.n	80010d2 <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fb1b 	bl	8003708 <HAL_Delay>
	}

	/* Revert to Open-Drain mode */
	uint32_t bfPushPull		= D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <onewireDS18B20_tempRead+0xc0>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	60fb      	str	r3, [r7, #12]
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <onewireDS18B20_tempRead+0xc0>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6053      	str	r3, [r2, #4]

	/* 1w: Reset */
	onewireMasterCheck_presence();
 80010e6:	f7ff fde1 	bl	8000cac <onewireMasterCheck_presence>

	if (!romCode) {
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <onewireDS18B20_tempRead+0x9c>
		/* Skip ROM cmd */
		onewireMasterWr_byte(0xccU);
 80010f0:	20cc      	movs	r0, #204	; 0xcc
 80010f2:	f7ff fd19 	bl	8000b28 <onewireMasterWr_byte>
 80010f6:	e005      	b.n	8001104 <onewireDS18B20_tempRead+0xa8>
	}
	else {
		/* Match ROM cmd */
		onewireMasterWr_byte(0x55U);
 80010f8:	2055      	movs	r0, #85	; 0x55
 80010fa:	f7ff fd15 	bl	8000b28 <onewireMasterWr_byte>
		onewireMasterWr_romCode(romCode);
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f7ff fd30 	bl	8000b64 <onewireMasterWr_romCode>
	}

	/* Read scratchpad */
	onewireMasterWr_byte(0xbeU);
 8001104:	20be      	movs	r0, #190	; 0xbe
 8001106:	f7ff fd0f 	bl	8000b28 <onewireMasterWr_byte>
	return (int16_t) onewireMasterRd_field(16);
 800110a:	2010      	movs	r0, #16
 800110c:	f7ff fda6 	bl	8000c5c <onewireMasterRd_field>
 8001110:	4603      	mov	r3, r0
 8001112:	b21b      	sxth	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	48000400 	.word	0x48000400

08001120 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_I2C1_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <MX_I2C1_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_I2C1_Init+0x74>)
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <MX_I2C1_Init+0x7c>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_I2C1_Init+0x74>)
 8001138:	2201      	movs	r2, #1
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_I2C1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <MX_I2C1_Init+0x74>)
 800115c:	f004 f948 	bl	80053f0 <HAL_I2C_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001166:	f000 fb8d 	bl	8001884 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <MX_I2C1_Init+0x74>)
 800116e:	f005 fdf5 	bl	8006d5c <HAL_I2CEx_ConfigAnalogFilter>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001178:	f000 fb84 	bl	8001884 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800117c:	2100      	movs	r1, #0
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_I2C1_Init+0x74>)
 8001180:	f005 fe37 	bl	8006df2 <HAL_I2CEx_ConfigDigitalFilter>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 fb7b 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000418 	.word	0x20000418
 8001198:	40005400 	.word	0x40005400
 800119c:	00303d5b 	.word	0x00303d5b

080011a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09e      	sub	sp, #120	; 0x78
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2254      	movs	r2, #84	; 0x54
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f009 f9bb 	bl	800a53c <memset>
  if(i2cHandle->Instance==I2C1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_I2C_MspInit+0xc8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d146      	bne.n	800125e <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011d0:	2340      	movs	r3, #64	; 0x40
 80011d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 fd20 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011ea:	f000 fb4b 	bl	8001884 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_I2C_MspInit+0xcc>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a1e      	ldr	r2, [pc, #120]	; (800126c <HAL_I2C_MspInit+0xcc>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_I2C_MspInit+0xcc>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 8001206:	23c0      	movs	r3, #192	; 0xc0
 8001208:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120a:	2312      	movs	r3, #18
 800120c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001212:	2302      	movs	r3, #2
 8001214:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001216:	2304      	movs	r3, #4
 8001218:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800121e:	4619      	mov	r1, r3
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <HAL_I2C_MspInit+0xd0>)
 8001222:	f003 fe81 	bl	8004f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_I2C_MspInit+0xcc>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_I2C_MspInit+0xcc>)
 800122c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_I2C_MspInit+0xcc>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201f      	movs	r0, #31
 8001244:	f003 fc44 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001248:	201f      	movs	r0, #31
 800124a:	f003 fc5d 	bl	8004b08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2020      	movs	r0, #32
 8001254:	f003 fc3c 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001258:	2020      	movs	r0, #32
 800125a:	f003 fc55 	bl	8004b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800125e:	bf00      	nop
 8001260:	3778      	adds	r7, #120	; 0x78
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005400 	.word	0x40005400
 800126c:	40021000 	.word	0x40021000
 8001270:	48000400 	.word	0x48000400

08001274 <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001286:	2301      	movs	r3, #1
 8001288:	73bb      	strb	r3, [r7, #14]
 800128a:	e01c      	b.n	80012c6 <i2cBusGetDeviceList+0x52>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	b29b      	uxth	r3, r3
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	b299      	uxth	r1, r3
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	2201      	movs	r2, #1
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <i2cBusGetDeviceList+0x64>)
 800129a:	f004 f9a9 	bl	80055f0 <HAL_I2C_IsDeviceReady>
 800129e:	4603      	mov	r3, r0
 80012a0:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10b      	bne.n	80012c0 <i2cBusGetDeviceList+0x4c>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	3301      	adds	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	2b60      	cmp	r3, #96	; 0x60
 80012b2:	d105      	bne.n	80012c0 <i2cBusGetDeviceList+0x4c>
			case 0x60:
				/* DAC */
				*i2cDevicesBF |= 0x01;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f043 0201 	orr.w	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	3301      	adds	r3, #1
 80012c4:	73bb      	strb	r3, [r7, #14]
 80012c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dade      	bge.n	800128c <i2cBusGetDeviceList+0x18>
			}
		}
	}

	return i2cBusDeviceCnt;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000418 	.word	0x20000418

080012dc <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	460b      	mov	r3, r1
 80012e8:	71bb      	strb	r3, [r7, #6]
 80012ea:	4613      	mov	r3, r2
 80012ec:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 80012ee:	2300      	movs	r3, #0
 80012f0:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001300:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	b29b      	uxth	r3, r3
 800130c:	031b      	lsls	r3, r3, #12
 800130e:	b29b      	uxth	r3, r3
 8001310:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001314:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131c:	b29a      	uxth	r2, r3
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	4313      	orrs	r3, r2
 8001322:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 800132e:	89fb      	ldrh	r3, [r7, #14]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	b299      	uxth	r1, r3
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	2302      	movs	r3, #2
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <i2cDeviceDacMcp4725_set+0xa0>)
 8001340:	f004 f8e6 	bl	8005510 <HAL_I2C_Master_Transmit_IT>
 8001344:	4603      	mov	r3, r0
 8001346:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 8001348:	7b7b      	ldrb	r3, [r7, #13]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <i2cDeviceDacMcp4725_set+0x96>
	}

#if 1
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8001352:	bf00      	nop
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <i2cDeviceDacMcp4725_set+0xa0>)
 8001356:	f004 fb35 	bl	80059c4 <HAL_I2C_GetState>
 800135a:	4603      	mov	r3, r0
 800135c:	2b20      	cmp	r3, #32
 800135e:	d1f9      	bne.n	8001354 <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <i2cDeviceDacMcp4725_set+0xa0>)
 8001362:	f004 fb3d 	bl	80059e0 <HAL_I2C_GetError>
 8001366:	4603      	mov	r3, r0
 8001368:	2b04      	cmp	r3, #4
 800136a:	d101      	bne.n	8001370 <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 800136c:	2302      	movs	r3, #2
 800136e:	e000      	b.n	8001372 <i2cDeviceDacMcp4725_set+0x96>
	}
#endif
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000418 	.word	0x20000418

08001380 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	4613      	mov	r3, r2
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	461a      	mov	r2, r3
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <uDelay+0x3c>)
 8001398:	fba3 2302 	umull	r2, r3, r3, r2
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 80013a0:	e002      	b.n	80013a8 <uDelay+0x28>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <uDelay+0x22>
	}
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	cccccccd 	.word	0xcccccccd

080013c0 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
	while (len--) {
 80013cc:	e004      	b.n	80013d8 <memclear+0x18>
		*(ary++) = 0U;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	while (len--) {
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	807a      	strh	r2, [r7, #2]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f5      	bne.n	80013ce <memclear+0xe>
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b0a4      	sub	sp, #144	; 0x90
 80013f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f002 f94e 	bl	8003696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f9d1 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f7ff faa7 	bl	8000950 <MX_GPIO_Init>
  MX_RTC_Init();
 8001402:	f000 fa45 	bl	8001890 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001406:	f000 fd85 	bl	8001f14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800140a:	f000 fdb3 	bl	8001f74 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800140e:	f7ff f8ab 	bl	8000568 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001412:	f7ff fe85 	bl	8001120 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001416:	f000 fa93 	bl	8001940 <MX_SPI1_Init>
  MX_DMA_Init();
 800141a:	f7ff fa7b 	bl	8000914 <MX_DMA_Init>
  MX_TIM2_Init();
 800141e:	f000 fc59 	bl	8001cd4 <MX_TIM2_Init>
  }
#endif

#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO by DF4IAH ***\r\n************************\r\n\r\n";
 8001422:	4ac9      	ldr	r2, [pc, #804]	; (8001748 <main+0x358>)
 8001424:	463b      	mov	r3, r7
 8001426:	4611      	mov	r1, r2
 8001428:	2255      	movs	r2, #85	; 0x55
 800142a:	4618      	mov	r0, r3
 800142c:	f009 f878 	bl	800a520 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001430:	4639      	mov	r1, r7
 8001432:	2319      	movs	r3, #25
 8001434:	2254      	movs	r2, #84	; 0x54
 8001436:	48c5      	ldr	r0, [pc, #788]	; (800174c <main+0x35c>)
 8001438:	f007 fdf1 	bl	800901e <HAL_UART_Transmit>
  }
#endif

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2110      	movs	r1, #16
 8001440:	48c3      	ldr	r0, [pc, #780]	; (8001750 <main+0x360>)
 8001442:	f003 ffbd 	bl	80053c0 <HAL_GPIO_WritePin>
  //ADC_init();
  //ADC_start();


  /* Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 8001446:	2300      	movs	r3, #0
 8001448:	65bb      	str	r3, [r7, #88]	; 0x58
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);
 800144a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff10 	bl	8001274 <i2cBusGetDeviceList>
 8001454:	4603      	mov	r3, r0
 8001456:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 800145a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <main+0x80>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDeviceDacMcp4725_set(0, 0b11, I2C_DAC_MCP4725_0_VAL);
 8001464:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8001468:	2103      	movs	r1, #3
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff ff36 	bl	80012dc <i2cDeviceDacMcp4725_set>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 8001470:	2300      	movs	r3, #0
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 8001486:	463b      	mov	r3, r7
 8001488:	4ab2      	ldr	r2, [pc, #712]	; (8001754 <main+0x364>)
 800148a:	211f      	movs	r1, #31
 800148c:	4618      	mov	r0, r3
 800148e:	f009 f85d 	bl	800a54c <sniprintf>
 8001492:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8001494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001496:	b29a      	uxth	r2, r3
 8001498:	4639      	mov	r1, r7
 800149a:	2319      	movs	r3, #25
 800149c:	48ab      	ldr	r0, [pc, #684]	; (800174c <main+0x35c>)
 800149e:	f007 fdbe 	bl	800901e <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 80014a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014a6:	4638      	mov	r0, r7
 80014a8:	4aab      	ldr	r2, [pc, #684]	; (8001758 <main+0x368>)
 80014aa:	211f      	movs	r1, #31
 80014ac:	f009 f84e 	bl	800a54c <sniprintf>
 80014b0:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80014b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4639      	mov	r1, r7
 80014b8:	2319      	movs	r3, #25
 80014ba:	48a4      	ldr	r0, [pc, #656]	; (800174c <main+0x35c>)
 80014bc:	f007 fdaf 	bl	800901e <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 80014c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014c2:	4638      	mov	r0, r7
 80014c4:	4aa5      	ldr	r2, [pc, #660]	; (800175c <main+0x36c>)
 80014c6:	211f      	movs	r1, #31
 80014c8:	f009 f840 	bl	800a54c <sniprintf>
 80014cc:	67f8      	str	r0, [r7, #124]	; 0x7c
	HAL_UART_Transmit(&huart2, msg, len, 25);
 80014ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4639      	mov	r1, r7
 80014d4:	2319      	movs	r3, #25
 80014d6:	489d      	ldr	r0, [pc, #628]	; (800174c <main+0x35c>)
 80014d8:	f007 fda1 	bl	800901e <HAL_UART_Transmit>
  }
#endif

  /* Init the temperature sensor DS18B20 */
  {
 80014dc:	466b      	mov	r3, sp
 80014de:	461c      	mov	r4, r3
#if 1
	  const uint8_t OnewireDeviceCountMax 				= 8U;
 80014e0:	2308      	movs	r3, #8
 80014e2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	  uint8_t onewireDevices[OnewireDeviceCountMax][8];
 80014e6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80014ea:	3b01      	subs	r3, #1
 80014ec:	677b      	str	r3, [r7, #116]	; 0x74
 80014ee:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 80014f2:	f04f 0100 	mov.w	r1, #0
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	018b      	lsls	r3, r1, #6
 8001500:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001504:	0182      	lsls	r2, r0, #6
 8001506:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	018b      	lsls	r3, r1, #6
 8001518:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800151c:	0182      	lsls	r2, r0, #6
 800151e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	3307      	adds	r3, #7
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	ebad 0d03 	sub.w	sp, sp, r3
 800152e:	ab02      	add	r3, sp, #8
 8001530:	3300      	adds	r3, #0
 8001532:	673b      	str	r3, [r7, #112]	; 0x70
	  memclear((uint8_t*) onewireDevices, sizeof(onewireDevices));
 8001534:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001536:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800153a:	b29b      	uxth	r3, r3
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	b29b      	uxth	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff ff3c 	bl	80013c0 <memclear>

	  uint8_t onewireDeviceCount = onewireMasterTree_search(0U, OnewireDeviceCountMax, onewireDevices);
 8001548:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800154a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800154e:	4619      	mov	r1, r3
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff fbd9 	bl	8000d08 <onewireMasterTree_search>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", onewireDeviceCount);
 800155c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001560:	4638      	mov	r0, r7
 8001562:	4a7f      	ldr	r2, [pc, #508]	; (8001760 <main+0x370>)
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	f008 fff1 	bl	800a54c <sniprintf>
 800156a:	66b8      	str	r0, [r7, #104]	; 0x68
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 800156c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800156e:	b29a      	uxth	r2, r3
 8001570:	4639      	mov	r1, r7
 8001572:	2319      	movs	r3, #25
 8001574:	4875      	ldr	r0, [pc, #468]	; (800174c <main+0x35c>)
 8001576:	f007 fd52 	bl	800901e <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
#if   defined(ONEWIRE_DS18B20_ADC_12B)
	  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, onewireDevices[0]);
 800157a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800157c:	2228      	movs	r2, #40	; 0x28
 800157e:	213c      	movs	r1, #60	; 0x3c
 8001580:	200c      	movs	r0, #12
 8001582:	f7ff fca3 	bl	8000ecc <onewireDS18B20_setAdcWidth>
 8001586:	46a5      	mov	sp, r4
#endif
  }


  /* Turn off many of the NMEA messages */
  ubloxMsgsTurnOff();
 8001588:	f001 f99e 	bl	80028c8 <ubloxMsgsTurnOff>

  /* Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 800158c:	f000 fe7a 	bl	8002284 <ubloxUartSpeedFast>
  enableMe = 0;
  while (!enableMe) {
  }
#endif

  if (ubloxSetFrequency(F_COMP_HZ)) {
 8001590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001594:	f000 fffc 	bl	8002590 <ubloxSetFrequency>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <main+0x1dc>
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode.\r\n";
 800159e:	4b71      	ldr	r3, [pc, #452]	; (8001764 <main+0x374>)
 80015a0:	463c      	mov	r4, r7
 80015a2:	461d      	mov	r5, r3
 80015a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015b4:	c407      	stmia	r4!, {r0, r1, r2}
 80015b6:	8023      	strh	r3, [r4, #0]
 80015b8:	3402      	adds	r4, #2
 80015ba:	0c1b      	lsrs	r3, r3, #16
 80015bc:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80015be:	4639      	mov	r1, r7
 80015c0:	2319      	movs	r3, #25
 80015c2:	223e      	movs	r2, #62	; 0x3e
 80015c4:	4861      	ldr	r0, [pc, #388]	; (800174c <main+0x35c>)
 80015c6:	f007 fd2a 	bl	800901e <HAL_UART_Transmit>
 80015ca:	e011      	b.n	80015f0 <main+0x200>
#endif
  }
  else {
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 80015cc:	4a66      	ldr	r2, [pc, #408]	; (8001768 <main+0x378>)
 80015ce:	463b      	mov	r3, r7
 80015d0:	4611      	mov	r1, r2
 80015d2:	2252      	movs	r2, #82	; 0x52
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 ffa3 	bl	800a520 <memcpy>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80015da:	4639      	mov	r1, r7
 80015dc:	2319      	movs	r3, #25
 80015de:	2251      	movs	r2, #81	; 0x51
 80015e0:	485a      	ldr	r0, [pc, #360]	; (800174c <main+0x35c>)
 80015e2:	f007 fd1c 	bl	800901e <HAL_UART_Transmit>
	  }
#endif
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	4859      	ldr	r0, [pc, #356]	; (8001750 <main+0x360>)
 80015ec:	f003 fee8 	bl	80053c0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t tempWaitUntil = 0UL;
	  uint32_t now = HAL_GetTick() / 1000UL;  (void) now;
 80015f0:	f002 f87e 	bl	80036f0 <HAL_GetTick>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a5d      	ldr	r2, [pc, #372]	; (800176c <main+0x37c>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	667b      	str	r3, [r7, #100]	; 0x64
#endif
	  }
#endif

#if 1
	  if (tempWaitUntil) {
 8001600:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <main+0x380>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d078      	beq.n	80016fa <main+0x30a>
		uint8_t msg[64];

		/* Onewire handling */
		int16_t owDs18b20_Temp = onewireDS18B20_tempRead(tempWaitUntil, onewireDevices[0]);
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <main+0x380>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4959      	ldr	r1, [pc, #356]	; (8001774 <main+0x384>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fd24 	bl	800105c <onewireDS18B20_tempRead>
 8001614:	4603      	mov	r3, r0
 8001616:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

		int16_t t_int		= (owDs18b20_Temp >> 4);
 800161a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800161e:	111b      	asrs	r3, r3, #4
 8001620:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		uint16_t t_frac		= (owDs18b20_Temp & 0xfU);
 8001624:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		if (t_int < 0) {
 8001630:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001634:	2b00      	cmp	r3, #0
 8001636:	da16      	bge.n	8001666 <main+0x276>
			t_frac = ~t_frac;
 8001638:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800163c:	43db      	mvns	r3, r3
 800163e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			++t_frac;
 8001642:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001646:	3301      	adds	r3, #1
 8001648:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			t_frac %= 1000U;
 800164c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001650:	4a46      	ldr	r2, [pc, #280]	; (800176c <main+0x37c>)
 8001652:	fba2 1203 	umull	r1, r2, r2, r3
 8001656:	0992      	lsrs	r2, r2, #6
 8001658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165c:	fb01 f202 	mul.w	r2, r1, r2
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		}

		uint16_t t_fv1000	= 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		if (t_frac & 0b1000) {
 800166c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <main+0x294>
			t_fv1000 += 500U;
 8001678:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800167c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001680:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}
		if (t_frac & 0b0100) {
 8001684:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <main+0x2aa>
			t_fv1000 += 250U;
 8001690:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001694:	33fa      	adds	r3, #250	; 0xfa
 8001696:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}
		if (t_frac & 0b0010) {
 800169a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <main+0x2c0>
			t_fv1000 += 125U;
 80016a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80016aa:	337d      	adds	r3, #125	; 0x7d
 80016ac:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}
		if (t_frac & 0b0001) {
 80016b0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <main+0x2d6>
			t_fv1000 +=  62U;
 80016bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80016c0:	333e      	adds	r3, #62	; 0x3e
 80016c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}

#if defined(LOGGING)
		int len = snprintf(((char*) msg), sizeof(msg), "*** Temperature: %+02d,%1u degC\r\n", t_int, (t_fv1000 + 50) / 100);
 80016c6:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	; 0x60
 80016ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80016ce:	3332      	adds	r3, #50	; 0x32
 80016d0:	4a29      	ldr	r2, [pc, #164]	; (8001778 <main+0x388>)
 80016d2:	fb82 0203 	smull	r0, r2, r2, r3
 80016d6:	1152      	asrs	r2, r2, #5
 80016d8:	17db      	asrs	r3, r3, #31
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4638      	mov	r0, r7
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	460b      	mov	r3, r1
 80016e2:	4a26      	ldr	r2, [pc, #152]	; (800177c <main+0x38c>)
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	f008 ff31 	bl	800a54c <sniprintf>
 80016ea:	65f8      	str	r0, [r7, #92]	; 0x5c
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80016ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4639      	mov	r1, r7
 80016f2:	2319      	movs	r3, #25
 80016f4:	4815      	ldr	r0, [pc, #84]	; (800174c <main+0x35c>)
 80016f6:	f007 fc92 	bl	800901e <HAL_UART_Transmit>
#endif
	  }
#endif

	  /* Request next temperature value */
	  tempWaitUntil = onewireDS18B20_tempReq(onewireDevices[0]);
 80016fa:	481e      	ldr	r0, [pc, #120]	; (8001774 <main+0x384>)
 80016fc:	f7ff fc5b 	bl	8000fb6 <onewireDS18B20_tempReq>
 8001700:	4603      	mov	r3, r0
 8001702:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <main+0x380>)
 8001704:	6013      	str	r3, [r2, #0]

	  /* Blocks until new frame comes in */
	  static uint8_t  sel3 = 0U;

	  ++sel3;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <main+0x390>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <main+0x390>)
 8001710:	701a      	strb	r2, [r3, #0]
	  sel3 %= 3;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <main+0x390>)
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <main+0x394>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	0859      	lsrs	r1, r3, #1
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <main+0x390>)
 800172a:	701a      	strb	r2, [r3, #0]
	  switch (sel3) {
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <main+0x390>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d005      	beq.n	8001740 <main+0x350>
 8001734:	2b02      	cmp	r3, #2
 8001736:	d02b      	beq.n	8001790 <main+0x3a0>
	  case 0:
	  default:
		  ublox_NavClock_get(&ubloxNavClock);
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <main+0x398>)
 800173a:	f001 fb4f 	bl	8002ddc <ublox_NavClock_get>
		  break;
 800173e:	e02b      	b.n	8001798 <main+0x3a8>

	  case 1:
		  ublox_NavDop_get(&ubloxNavDop);
 8001740:	4812      	ldr	r0, [pc, #72]	; (800178c <main+0x39c>)
 8001742:	f001 f8e7 	bl	8002914 <ublox_NavDop_get>
		  break;
 8001746:	e027      	b.n	8001798 <main+0x3a8>
 8001748:	0800ae6c 	.word	0x0800ae6c
 800174c:	20000608 	.word	0x20000608
 8001750:	48000400 	.word	0x48000400
 8001754:	0800adcc 	.word	0x0800adcc
 8001758:	0800ade0 	.word	0x0800ade0
 800175c:	0800adfc 	.word	0x0800adfc
 8001760:	0800ae18 	.word	0x0800ae18
 8001764:	0800aec4 	.word	0x0800aec4
 8001768:	0800af04 	.word	0x0800af04
 800176c:	10624dd3 	.word	0x10624dd3
 8001770:	20000254 	.word	0x20000254
 8001774:	20000214 	.word	0x20000214
 8001778:	51eb851f 	.word	0x51eb851f
 800177c:	0800ae48 	.word	0x0800ae48
 8001780:	20000258 	.word	0x20000258
 8001784:	aaaaaaab 	.word	0xaaaaaaab
 8001788:	200000d8 	.word	0x200000d8
 800178c:	200000c4 	.word	0x200000c4

	  case 2:
		  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <main+0x3ac>)
 8001792:	f001 fc99 	bl	80030c8 <ublox_NavSvinfo_get>
		  break;
 8001796:	bf00      	nop
  {
 8001798:	e72a      	b.n	80015f0 <main+0x200>
 800179a:	bf00      	nop
 800179c:	200000ec 	.word	0x200000ec

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	2244      	movs	r2, #68	; 0x44
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f008 fec4 	bl	800a53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017c6:	f005 fb7f 	bl	8006ec8 <HAL_PWREx_ControlVoltageScaling>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017d0:	f000 f858 	bl	8001884 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017d4:	f005 fb5a 	bl	8006e8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <SystemClock_Config+0xbc>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a1f      	ldr	r2, [pc, #124]	; (800185c <SystemClock_Config+0xbc>)
 80017e0:	f023 0318 	bic.w	r3, r3, #24
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80017e8:	2306      	movs	r3, #6
 80017ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f6:	2310      	movs	r3, #16
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fa:	2302      	movs	r3, #2
 80017fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fe:	2302      	movs	r3, #2
 8001800:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001802:	2301      	movs	r3, #1
 8001804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001806:	230f      	movs	r3, #15
 8001808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800180a:	2307      	movs	r3, #7
 800180c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800180e:	2302      	movs	r3, #2
 8001810:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001812:	2304      	movs	r3, #4
 8001814:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4618      	mov	r0, r3
 800181c:	f005 fbaa 	bl	8006f74 <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001826:	f000 f82d 	bl	8001884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	230f      	movs	r3, #15
 800182c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2303      	movs	r3, #3
 8001830:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800183e:	463b      	mov	r3, r7
 8001840:	2103      	movs	r1, #3
 8001842:	4618      	mov	r0, r3
 8001844:	f005 ffb6 	bl	80077b4 <HAL_RCC_ClockConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800184e:	f000 f819 	bl	8001884 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3758      	adds	r7, #88	; 0x58
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001872:	f001 ff29 	bl	80036c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40012c00 	.word	0x40012c00

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_RTC_Init+0x48>)
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <MX_RTC_Init+0x4c>)
 8001898:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_RTC_Init+0x48>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <MX_RTC_Init+0x48>)
 80018a2:	227f      	movs	r2, #127	; 0x7f
 80018a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_RTC_Init+0x48>)
 80018a8:	22ff      	movs	r2, #255	; 0xff
 80018aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_RTC_Init+0x48>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_RTC_Init+0x48>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_RTC_Init+0x48>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_RTC_Init+0x48>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_RTC_Init+0x48>)
 80018c6:	f006 fc93 	bl	80081f0 <HAL_RTC_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80018d0:	f7ff ffd8 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000464 	.word	0x20000464
 80018dc:	40002800 	.word	0x40002800

080018e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b098      	sub	sp, #96	; 0x60
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2254      	movs	r2, #84	; 0x54
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f008 fe23 	bl	800a53c <memset>
  if(rtcHandle->Instance==RTC)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_RTC_MspInit+0x58>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d117      	bne.n	8001930 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001904:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4618      	mov	r0, r3
 8001912:	f006 f987 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800191c:	f7ff ffb2 	bl	8001884 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RTC_MspInit+0x5c>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <HAL_RTC_MspInit+0x5c>)
 8001928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001930:	bf00      	nop
 8001932:	3760      	adds	r7, #96	; 0x60
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40002800 	.word	0x40002800
 800193c:	40021000 	.word	0x40021000

08001940 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <MX_SPI1_Init+0x78>)
 8001948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_SPI1_Init+0x74>)
 800194c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_SPI1_Init+0x74>)
 800195a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800195e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_SPI1_Init+0x74>)
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_SPI1_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_SPI1_Init+0x74>)
 800198e:	2207      	movs	r2, #7
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_SPI1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_SPI1_Init+0x74>)
 800199a:	2208      	movs	r2, #8
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_SPI1_Init+0x74>)
 80019a0:	f006 fd38 	bl	8008414 <HAL_SPI_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f7ff ff6b 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000488 	.word	0x20000488
 80019b8:	40013000 	.word	0x40013000

080019bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_SPI_MspInit+0x7c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d128      	bne.n	8001a30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_SPI_MspInit+0x80>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <HAL_SPI_MspInit+0x80>)
 80019e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_SPI_MspInit+0x80>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_SPI_MspInit+0x80>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_SPI_MspInit+0x80>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_SPI_MspInit+0x80>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8001a0e:	23c2      	movs	r3, #194	; 0xc2
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a1e:	2305      	movs	r3, #5
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2c:	f003 fa7c 	bl	8004f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013000 	.word	0x40013000
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_MspInit+0x44>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_MspInit+0x44>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6613      	str	r3, [r2, #96]	; 0x60
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_MspInit+0x44>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_MspInit+0x44>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_MspInit+0x44>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_MspInit+0x44>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	2019      	movs	r0, #25
 8001a9e:	f003 f817 	bl	8004ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001aa2:	2019      	movs	r0, #25
 8001aa4:	f003 f830 	bl	8004b08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_InitTick+0x9c>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aac:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_InitTick+0x9c>)
 8001aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_InitTick+0x9c>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 f818 	bl	8007b00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ad0:	f006 f800 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 8001ad4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_InitTick+0xa0>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0c9b      	lsrs	r3, r3, #18
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_InitTick+0xa4>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_InitTick+0xa8>)
 8001ae8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_InitTick+0xa4>)
 8001aec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_InitTick+0xa4>)
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_InitTick+0xa4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_InitTick+0xa4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b04:	4809      	ldr	r0, [pc, #36]	; (8001b2c <HAL_InitTick+0xa4>)
 8001b06:	f006 fd28 	bl	800855a <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d104      	bne.n	8001b1a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b10:	4806      	ldr	r0, [pc, #24]	; (8001b2c <HAL_InitTick+0xa4>)
 8001b12:	f006 fd83 	bl	800861c <HAL_TIM_Base_Start_IT>
 8001b16:	4603      	mov	r3, r0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3730      	adds	r7, #48	; 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	431bde83 	.word	0x431bde83
 8001b2c:	200004ec 	.word	0x200004ec
 8001b30:	40012c00 	.word	0x40012c00

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA1_Channel1_IRQHandler+0x10>)
 8001b92:	f003 f90c 	bl	8004dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200003d0 	.word	0x200003d0

08001ba0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <ADC1_IRQHandler+0x10>)
 8001ba6:	f002 f8da 	bl	8003d5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000036c 	.word	0x2000036c

08001bb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bba:	f006 fdda 	bl	8008772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200004ec 	.word	0x200004ec

08001bc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <I2C1_EV_IRQHandler+0x10>)
 8001bce:	f003 fe16 	bl	80057fe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000418 	.word	0x20000418

08001bdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <I2C1_ER_IRQHandler+0x10>)
 8001be2:	f003 fe26 	bl	8005832 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000418 	.word	0x20000418

08001bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <USART1_IRQHandler+0x10>)
 8001bf6:	f007 fc1f 	bl	8009438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000584 	.word	0x20000584

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f008 fc4a 	bl	800a4cc <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000c000 	.word	0x2000c000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	2000025c 	.word	0x2000025c
 8001c6c:	200006a0 	.word	0x200006a0

08001c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <SystemInit+0x5c>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <SystemInit+0x5c>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <SystemInit+0x60>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <SystemInit+0x60>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <SystemInit+0x60>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <SystemInit+0x60>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <SystemInit+0x60>)
 8001c9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ca0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <SystemInit+0x60>)
 8001ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <SystemInit+0x60>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <SystemInit+0x60>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <SystemInit+0x60>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d1a:	481c      	ldr	r0, [pc, #112]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d1c:	f006 fcd2 	bl	80086c4 <HAL_TIM_IC_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d26:	f7ff fdad 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4814      	ldr	r0, [pc, #80]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d3a:	f007 f865 	bl	8008e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d44:	f7ff fd9e 	bl	8001884 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d60:	f006 fe26 	bl	80089b0 <HAL_TIM_IC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d6a:	f7ff fd8b 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	220c      	movs	r2, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_TIM2_Init+0xb8>)
 8001d76:	f006 fe1b 	bl	80089b0 <HAL_TIM_IC_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001d80:	f7ff fd80 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000538 	.word	0x20000538

08001d90 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db0:	d144      	bne.n	8001e3c <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_TIM_IC_MspInit+0xb4>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f003 f886 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4804      	ldr	r0, [pc, #16]	; (8001e48 <HAL_TIM_IC_MspInit+0xb8>)
 8001e38:	f003 f876 	bl	8004f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000400 	.word	0x48000400

08001e4c <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_UART_TxCpltCallback+0x1c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000360 	.word	0x20000360

08001e6c <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_UART_RxCpltCallback+0x1c>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000361 	.word	0x20000361

08001e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9a:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_UART_ErrorCallback+0x7c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d127      	bne.n	8001ef4 <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_UART_ErrorCallback+0x80>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 8001eb4:	e024      	b.n	8001f00 <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
		else if (
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_UART_ErrorCallback+0x80>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
}
 8001eda:	e011      	b.n	8001f00 <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_UART_ErrorCallback+0x80>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	e008      	b.n	8001f00 <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 8001eee:	f7ff fcc9 	bl	8001884 <Error_Handler>
}
 8001ef2:	e005      	b.n	8001f00 <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_UART_ErrorCallback+0x84>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 8001efc:	f7ff fcc2 	bl	8001884 <Error_Handler>
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000584 	.word	0x20000584
 8001f0c:	20000361 	.word	0x20000361
 8001f10:	20000608 	.word	0x20000608

08001f14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <MX_USART1_UART_Init+0x5c>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART1_UART_Init+0x58>)
 8001f58:	f006 ffda 	bl	8008f10 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f62:	f7ff fc8f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000584 	.word	0x20000584
 8001f70:	40013800 	.word	0x40013800

08001f74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_USART2_UART_Init+0x58>)
 8001fb8:	f006 ffaa 	bl	8008f10 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fc2:	f7ff fc5f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000608 	.word	0x20000608
 8001fd0:	40004400 	.word	0x40004400

08001fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0a0      	sub	sp, #128	; 0x80
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	2254      	movs	r2, #84	; 0x54
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f008 faa1 	bl	800a53c <memset>
  if(uartHandle->Instance==USART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a54      	ldr	r2, [pc, #336]	; (8002150 <HAL_UART_MspInit+0x17c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d152      	bne.n	80020aa <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002004:	2301      	movs	r3, #1
 8002006:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002008:	2302      	movs	r3, #2
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200c:	f107 0318 	add.w	r3, r7, #24
 8002010:	4618      	mov	r0, r3
 8002012:	f005 fe07 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800201c:	f7ff fc32 	bl	8001884 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_UART_MspInit+0x180>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_UART_MspInit+0x180>)
 8002026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202a:	6613      	str	r3, [r2, #96]	; 0x60
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_UART_MspInit+0x180>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_UART_MspInit+0x180>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	4a45      	ldr	r2, [pc, #276]	; (8002154 <HAL_UART_MspInit+0x180>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_UART_MspInit+0x180>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002062:	2307      	movs	r3, #7
 8002064:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f002 ff5a 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800207e:	2301      	movs	r3, #1
 8002080:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002086:	2307      	movs	r3, #7
 8002088:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f002 ff48 	bl	8004f28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	2025      	movs	r0, #37	; 0x25
 800209e:	f002 fd17 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020a2:	2025      	movs	r0, #37	; 0x25
 80020a4:	f002 fd30 	bl	8004b08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020a8:	e04d      	b.n	8002146 <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <HAL_UART_MspInit+0x184>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d148      	bne.n	8002146 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 80020b8:	2308      	movs	r3, #8
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f005 fdaf 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 80020cc:	f7ff fbda 	bl	8001884 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_UART_MspInit+0x180>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_UART_MspInit+0x180>)
 80020d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020da:	6593      	str	r3, [r2, #88]	; 0x58
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_UART_MspInit+0x180>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_UART_MspInit+0x180>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_UART_MspInit+0x180>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_UART_MspInit+0x180>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8002100:	2304      	movs	r3, #4
 8002102:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800210c:	2301      	movs	r3, #1
 800210e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002110:	2307      	movs	r3, #7
 8002112:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211e:	f002 ff03 	bl	8004f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 8002122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002126:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002130:	2301      	movs	r3, #1
 8002132:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002134:	2303      	movs	r3, #3
 8002136:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800213c:	4619      	mov	r1, r3
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f002 fef1 	bl	8004f28 <HAL_GPIO_Init>
}
 8002146:	bf00      	nop
 8002148:	3780      	adds	r7, #128	; 0x80
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40013800 	.word	0x40013800
 8002154:	40021000 	.word	0x40021000
 8002158:	40004400 	.word	0x40004400

0800215c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_UART_MspDeInit+0x5c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10f      	bne.n	800218e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_UART_MspDeInit+0x60>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_UART_MspDeInit+0x60>)
 8002174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002178:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 800217a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f003 f83b 	bl	80051fc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002186:	2025      	movs	r0, #37	; 0x25
 8002188:	f002 fccc 	bl	8004b24 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800218c:	e010      	b.n	80021b0 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_UART_MspDeInit+0x64>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10b      	bne.n	80021b0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_UART_MspDeInit+0x60>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_UART_MspDeInit+0x60>)
 800219e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80021a2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 80021a4:	f248 0104 	movw	r1, #32772	; 0x8004
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f003 f826 	bl	80051fc <HAL_GPIO_DeInit>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40004400 	.word	0x40004400

080021c4 <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <MX_USART1_UART_Init_38400baud+0x5c>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80021d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_USART1_UART_Init_38400baud+0x58>)
 8002208:	f006 fe82 	bl	8008f10 <HAL_UART_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 8002212:	f7ff fb37 	bl	8001884 <Error_Handler>
  }

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000584 	.word	0x20000584
 8002220:	40013800 	.word	0x40013800

08002224 <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	2300      	movs	r3, #0
 8002236:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3302      	adds	r3, #2
 800223c:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	3b04      	subs	r3, #4
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	e00d      	b.n	8002262 <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	4413      	add	r3, r2
 8002252:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 8002254:	7bba      	ldrb	r2, [r7, #14]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	4413      	add	r3, r2
 800225a:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3b01      	subs	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7bba      	ldrb	r2, [r7, #14]
 8002276:	701a      	strb	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b0ae      	sub	sp, #184	; 0xb8
 8002288:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 800228a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800228e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 8002292:	4ab5      	ldr	r2, [pc, #724]	; (8002568 <ubloxUartSpeedFast+0x2e4>)
 8002294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002298:	ca07      	ldmia	r2, {r0, r1, r2}
 800229a:	c303      	stmia	r3!, {r0, r1}
 800229c:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 800229e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022a2:	2109      	movs	r1, #9
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ffbd 	bl	8002224 <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
 80022c0:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 80022c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 80022cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 80022d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 80022e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e8:	0e1b      	lsrs	r3, r3, #24
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 80022f0:	2303      	movs	r3, #3
 80022f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80022f6:	e113      	b.n	8002520 <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 80022f8:	4b9c      	ldr	r3, [pc, #624]	; (800256c <ubloxUartSpeedFast+0x2e8>)
 80022fa:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80022fe:	461d      	mov	r5, r3
 8002300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002308:	c407      	stmia	r4!, {r0, r1, r2}
 800230a:	8023      	strh	r3, [r4, #0]
 800230c:	3402      	adds	r4, #2
 800230e:	0c1b      	lsrs	r3, r3, #16
 8002310:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002312:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002316:	2319      	movs	r3, #25
 8002318:	221e      	movs	r2, #30
 800231a:	4895      	ldr	r0, [pc, #596]	; (8002570 <ubloxUartSpeedFast+0x2ec>)
 800231c:	f006 fe7f 	bl	800901e <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 8002320:	4b94      	ldr	r3, [pc, #592]	; (8002574 <ubloxUartSpeedFast+0x2f0>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8002326:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800232a:	2209      	movs	r2, #9
 800232c:	4619      	mov	r1, r3
 800232e:	4892      	ldr	r0, [pc, #584]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 8002330:	f006 ff0a 	bl	8009148 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8002334:	bf00      	nop
 8002336:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <ubloxUartSpeedFast+0x2f0>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d1fa      	bne.n	8002336 <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 8002340:	4b8e      	ldr	r3, [pc, #568]	; (800257c <ubloxUartSpeedFast+0x2f8>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8002346:	488c      	ldr	r0, [pc, #560]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 8002348:	f006 fff4 	bl	8009334 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 800234c:	488a      	ldr	r0, [pc, #552]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 800234e:	f007 fa95 	bl	800987c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	498a      	ldr	r1, [pc, #552]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 8002358:	4887      	ldr	r0, [pc, #540]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 800235a:	f006 ff51 	bl	8009200 <HAL_UART_Receive_IT>
		int i = 11;
 800235e:	230b      	movs	r3, #11
 8002360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8002364:	e007      	b.n	8002376 <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 8002366:	2064      	movs	r0, #100	; 0x64
 8002368:	f001 f9ce 	bl	8003708 <HAL_Delay>
			--i;
 800236c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002370:	3b01      	subs	r3, #1
 8002372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 8002376:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <ubloxUartSpeedFast+0x104>
 800237e:	4b7f      	ldr	r3, [pc, #508]	; (800257c <ubloxUartSpeedFast+0x2f8>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d1ee      	bne.n	8002366 <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002388:	4b7d      	ldr	r3, [pc, #500]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2bb5      	cmp	r3, #181	; 0xb5
 800238e:	f040 80bf 	bne.w	8002510 <ubloxUartSpeedFast+0x28c>
 8002392:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	2b62      	cmp	r3, #98	; 0x62
 8002398:	f040 80ba 	bne.w	8002510 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800239c:	4b78      	ldr	r3, [pc, #480]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 800239e:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80023a0:	2b06      	cmp	r3, #6
 80023a2:	f040 80b5 	bne.w	8002510 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80023a8:	78db      	ldrb	r3, [r3, #3]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80b0 	bne.w	8002510 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80023b0:	4b73      	ldr	r3, [pc, #460]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80023b2:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 80023b4:	2b14      	cmp	r3, #20
 80023b6:	f040 80ab 	bne.w	8002510 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 80023ba:	4b71      	ldr	r3, [pc, #452]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80023bc:	795b      	ldrb	r3, [r3, #5]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80a6 	bne.w	8002510 <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023ca:	e010      	b.n	80023ee <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 80023cc:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80023ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d2:	4413      	add	r3, r2
 80023d4:	7819      	ldrb	r1, [r3, #0]
 80023d6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023de:	4413      	add	r3, r2
 80023e0:	460a      	mov	r2, r1
 80023e2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 80023e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023e8:	3301      	adds	r3, #1
 80023ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023f2:	2b1b      	cmp	r3, #27
 80023f4:	d9ea      	bls.n	80023cc <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 80023f6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80023fa:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 80023fe:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002402:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 8002406:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800240a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 800240e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002412:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8002416:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800241a:	211c      	movs	r1, #28
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff01 	bl	8002224 <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <ubloxUartSpeedFast+0x2f0>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 8002428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800242c:	221c      	movs	r2, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4851      	ldr	r0, [pc, #324]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 8002432:	f006 fe89 	bl	8009148 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8002436:	bf00      	nop
 8002438:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <ubloxUartSpeedFast+0x2f0>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1fa      	bne.n	8002438 <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8002442:	484d      	ldr	r0, [pc, #308]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 8002444:	f006 ff20 	bl	8009288 <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 8002448:	484b      	ldr	r0, [pc, #300]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 800244a:	f006 fdaf 	bl	8008fac <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 800244e:	f7ff feb9 	bl	80021c4 <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <ubloxUartSpeedFast+0x2f8>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 8002458:	4847      	ldr	r0, [pc, #284]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 800245a:	f006 ff6b 	bl	8009334 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 800245e:	4846      	ldr	r0, [pc, #280]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 8002460:	f007 fa0c 	bl	800987c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002468:	4945      	ldr	r1, [pc, #276]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 800246a:	4843      	ldr	r0, [pc, #268]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 800246c:	f006 fec8 	bl	8009200 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8002470:	bf00      	nop
 8002472:	4b42      	ldr	r3, [pc, #264]	; (800257c <ubloxUartSpeedFast+0x2f8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d1fa      	bne.n	8002472 <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2bb5      	cmp	r3, #181	; 0xb5
 8002482:	d130      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
 8002484:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b62      	cmp	r3, #98	; 0x62
 800248a:	d12c      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800248c:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 800248e:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002490:	2b05      	cmp	r3, #5
 8002492:	d128      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 8002496:	78db      	ldrb	r3, [r3, #3]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d124      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 800249e:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d120      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80024a6:	795b      	ldrb	r3, [r3, #5]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11c      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80024ae:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d118      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <ubloxUartSpeedFast+0x2fc>)
 80024b6:	79db      	ldrb	r3, [r3, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d114      	bne.n	80024e6 <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <ubloxUartSpeedFast+0x300>)
 80024be:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80024c2:	461d      	mov	r5, r3
 80024c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024cc:	c407      	stmia	r4!, {r0, r1, r2}
 80024ce:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80024d0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80024d4:	2319      	movs	r3, #25
 80024d6:	221c      	movs	r2, #28
 80024d8:	4825      	ldr	r0, [pc, #148]	; (8002570 <ubloxUartSpeedFast+0x2ec>)
 80024da:	f006 fda0 	bl	800901e <HAL_UART_Transmit>
					HAL_Delay(100);
 80024de:	2064      	movs	r0, #100	; 0x64
 80024e0:	f001 f912 	bl	8003708 <HAL_Delay>
				{
 80024e4:	e03d      	b.n	8002562 <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <ubloxUartSpeedFast+0x304>)
 80024e8:	1d3c      	adds	r4, r7, #4
 80024ea:	461d      	mov	r5, r3
 80024ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80024fc:	1d39      	adds	r1, r7, #4
 80024fe:	2319      	movs	r3, #25
 8002500:	2233      	movs	r2, #51	; 0x33
 8002502:	481b      	ldr	r0, [pc, #108]	; (8002570 <ubloxUartSpeedFast+0x2ec>)
 8002504:	f006 fd8b 	bl	800901e <HAL_UART_Transmit>
					HAL_Delay(100);
 8002508:	2064      	movs	r0, #100	; 0x64
 800250a:	f001 f8fd 	bl	8003708 <HAL_Delay>
				}
#endif
			}
			return;
 800250e:	e028      	b.n	8002562 <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8002510:	20c8      	movs	r0, #200	; 0xc8
 8002512:	f001 f8f9 	bl	8003708 <HAL_Delay>
			--cnt;
 8002516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251a:	3b01      	subs	r3, #1
 800251c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 8002520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f aee7 	bne.w	80022f8 <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 800252a:	4813      	ldr	r0, [pc, #76]	; (8002578 <ubloxUartSpeedFast+0x2f4>)
 800252c:	f006 fd3e 	bl	8008fac <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8002530:	f7ff fe48 	bl	80021c4 <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <ubloxUartSpeedFast+0x308>)
 8002536:	1d3c      	adds	r4, r7, #4
 8002538:	461d      	mov	r5, r3
 800253a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800253c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800254a:	6020      	str	r0, [r4, #0]
 800254c:	3404      	adds	r4, #4
 800254e:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002550:	1d39      	adds	r1, r7, #4
 8002552:	2319      	movs	r3, #25
 8002554:	2234      	movs	r2, #52	; 0x34
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <ubloxUartSpeedFast+0x2ec>)
 8002558:	f006 fd61 	bl	800901e <HAL_UART_Transmit>
		HAL_Delay(100);
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	f001 f8d3 	bl	8003708 <HAL_Delay>
	}
#endif
}
 8002562:	37b8      	adds	r7, #184	; 0xb8
 8002564:	46bd      	mov	sp, r7
 8002566:	bdb0      	pop	{r4, r5, r7, pc}
 8002568:	0800af58 	.word	0x0800af58
 800256c:	0800af64 	.word	0x0800af64
 8002570:	20000608 	.word	0x20000608
 8002574:	20000360 	.word	0x20000360
 8002578:	20000584 	.word	0x20000584
 800257c:	20000361 	.word	0x20000361
 8002580:	20000260 	.word	0x20000260
 8002584:	0800af84 	.word	0x0800af84
 8002588:	0800afa4 	.word	0x0800afa4
 800258c:	0800afd8 	.word	0x0800afd8

08002590 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	b0ac      	sub	sp, #176	; 0xb0
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 800259a:	2300      	movs	r3, #0
 800259c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800259e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f007 ffc8 	bl	800a53c <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 80025cc:	4ab4      	ldr	r2, [pc, #720]	; (80028a0 <ubloxSetFrequency+0x310>)
 80025ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025d6:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 80025da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025de:	2108      	movs	r1, #8
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fe1f 	bl	8002224 <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 80025e6:	2303      	movs	r3, #3
 80025e8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 80025ec:	e14e      	b.n	800288c <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 80025ee:	4aad      	ldr	r2, [pc, #692]	; (80028a4 <ubloxSetFrequency+0x314>)
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4611      	mov	r1, r2
 80025f6:	2243      	movs	r2, #67	; 0x43
 80025f8:	4618      	mov	r0, r3
 80025fa:	f007 ff91 	bl	800a520 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80025fe:	f107 010c 	add.w	r1, r7, #12
 8002602:	2319      	movs	r3, #25
 8002604:	2242      	movs	r2, #66	; 0x42
 8002606:	48a8      	ldr	r0, [pc, #672]	; (80028a8 <ubloxSetFrequency+0x318>)
 8002608:	f006 fd09 	bl	800901e <HAL_UART_Transmit>
			HAL_Delay(100);
 800260c:	2064      	movs	r0, #100	; 0x64
 800260e:	f001 f87b 	bl	8003708 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 8002612:	4ba6      	ldr	r3, [pc, #664]	; (80028ac <ubloxSetFrequency+0x31c>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 8002618:	48a5      	ldr	r0, [pc, #660]	; (80028b0 <ubloxSetFrequency+0x320>)
 800261a:	f006 fe8b 	bl	8009334 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 800261e:	48a4      	ldr	r0, [pc, #656]	; (80028b0 <ubloxSetFrequency+0x320>)
 8002620:	f007 f92c 	bl	800987c <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002628:	49a2      	ldr	r1, [pc, #648]	; (80028b4 <ubloxSetFrequency+0x324>)
 800262a:	48a1      	ldr	r0, [pc, #644]	; (80028b0 <ubloxSetFrequency+0x320>)
 800262c:	f006 fde8 	bl	8009200 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 8002630:	4ba1      	ldr	r3, [pc, #644]	; (80028b8 <ubloxSetFrequency+0x328>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8002636:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800263a:	2208      	movs	r2, #8
 800263c:	4619      	mov	r1, r3
 800263e:	489c      	ldr	r0, [pc, #624]	; (80028b0 <ubloxSetFrequency+0x320>)
 8002640:	f006 fd82 	bl	8009148 <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 8002644:	bf00      	nop
 8002646:	4b9c      	ldr	r3, [pc, #624]	; (80028b8 <ubloxSetFrequency+0x328>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d1fa      	bne.n	8002646 <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 8002650:	230b      	movs	r3, #11
 8002652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8002656:	e007      	b.n	8002668 <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 8002658:	2064      	movs	r0, #100	; 0x64
 800265a:	f001 f855 	bl	8003708 <HAL_Delay>
			--i;
 800265e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002662:	3b01      	subs	r3, #1
 8002664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 8002668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <ubloxSetFrequency+0xea>
 8002670:	4b8e      	ldr	r3, [pc, #568]	; (80028ac <ubloxSetFrequency+0x31c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d1ee      	bne.n	8002658 <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 800267a:	4b90      	ldr	r3, [pc, #576]	; (80028bc <ubloxSetFrequency+0x32c>)
 800267c:	f107 040c 	add.w	r4, r7, #12
 8002680:	461d      	mov	r5, r3
 8002682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	8022      	strh	r2, [r4, #0]
 8002690:	3402      	adds	r4, #2
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002696:	f107 010c 	add.w	r1, r7, #12
 800269a:	2319      	movs	r3, #25
 800269c:	2222      	movs	r2, #34	; 0x22
 800269e:	4882      	ldr	r0, [pc, #520]	; (80028a8 <ubloxSetFrequency+0x318>)
 80026a0:	f006 fcbd 	bl	800901e <HAL_UART_Transmit>
			HAL_Delay(100);
 80026a4:	2064      	movs	r0, #100	; 0x64
 80026a6:	f001 f82f 	bl	8003708 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80026aa:	4b82      	ldr	r3, [pc, #520]	; (80028b4 <ubloxSetFrequency+0x324>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2bb5      	cmp	r3, #181	; 0xb5
 80026b0:	f040 80ca 	bne.w	8002848 <ubloxSetFrequency+0x2b8>
 80026b4:	4b7f      	ldr	r3, [pc, #508]	; (80028b4 <ubloxSetFrequency+0x324>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b62      	cmp	r3, #98	; 0x62
 80026ba:	f040 80c5 	bne.w	8002848 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 80026be:	4b7d      	ldr	r3, [pc, #500]	; (80028b4 <ubloxSetFrequency+0x324>)
 80026c0:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	f040 80c0 	bne.w	8002848 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 80026c8:	4b7a      	ldr	r3, [pc, #488]	; (80028b4 <ubloxSetFrequency+0x324>)
 80026ca:	78db      	ldrb	r3, [r3, #3]
 80026cc:	2b31      	cmp	r3, #49	; 0x31
 80026ce:	f040 80bb 	bne.w	8002848 <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80026d8:	e010      	b.n	80026fc <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 80026da:	4a76      	ldr	r2, [pc, #472]	; (80028b4 <ubloxSetFrequency+0x324>)
 80026dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026e0:	4413      	add	r3, r2
 80026e2:	7819      	ldrb	r1, [r3, #0]
 80026e4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80026e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ec:	4413      	add	r3, r2
 80026ee:	460a      	mov	r2, r1
 80026f0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 80026f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f6:	3301      	adds	r3, #1
 80026f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80026fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002700:	2b27      	cmp	r3, #39	; 0x27
 8002702:	d9ea      	bls.n	80026da <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 8002704:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002708:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 800270c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002710:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 8002714:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002718:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 800271c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002720:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 8002724:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002728:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 800272c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002730:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 8002734:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002738:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 800273c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002740:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 8002750:	2300      	movs	r3, #0
 8002752:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 8002774:	23cf      	movs	r3, #207	; 0xcf
 8002776:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 800277a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800277e:	2128      	movs	r1, #40	; 0x28
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fd4f 	bl	8002224 <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <ubloxSetFrequency+0x328>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 800278c:	4848      	ldr	r0, [pc, #288]	; (80028b0 <ubloxSetFrequency+0x320>)
 800278e:	f006 fd7b 	bl	8009288 <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8002792:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002796:	2228      	movs	r2, #40	; 0x28
 8002798:	4619      	mov	r1, r3
 800279a:	4845      	ldr	r0, [pc, #276]	; (80028b0 <ubloxSetFrequency+0x320>)
 800279c:	f006 fcd4 	bl	8009148 <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80027a0:	bf00      	nop
 80027a2:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <ubloxSetFrequency+0x328>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d1fa      	bne.n	80027a2 <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80027ac:	4840      	ldr	r0, [pc, #256]	; (80028b0 <ubloxSetFrequency+0x320>)
 80027ae:	f006 fd6b 	bl	8009288 <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <ubloxSetFrequency+0x31c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 80027b8:	483d      	ldr	r0, [pc, #244]	; (80028b0 <ubloxSetFrequency+0x320>)
 80027ba:	f007 f85f 	bl	800987c <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80027be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c2:	493c      	ldr	r1, [pc, #240]	; (80028b4 <ubloxSetFrequency+0x324>)
 80027c4:	483a      	ldr	r0, [pc, #232]	; (80028b0 <ubloxSetFrequency+0x320>)
 80027c6:	f006 fd1b 	bl	8009200 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80027ca:	bf00      	nop
 80027cc:	4b37      	ldr	r3, [pc, #220]	; (80028ac <ubloxSetFrequency+0x31c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d1fa      	bne.n	80027cc <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 80027d6:	4836      	ldr	r0, [pc, #216]	; (80028b0 <ubloxSetFrequency+0x320>)
 80027d8:	f006 fdac 	bl	8009334 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <ubloxSetFrequency+0x324>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2bb5      	cmp	r3, #181	; 0xb5
 80027e2:	d131      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
 80027e4:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <ubloxSetFrequency+0x324>)
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b62      	cmp	r3, #98	; 0x62
 80027ea:	d12d      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80027ec:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <ubloxSetFrequency+0x324>)
 80027ee:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d129      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 80027f4:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <ubloxSetFrequency+0x324>)
 80027f6:	78db      	ldrb	r3, [r3, #3]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d125      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <ubloxSetFrequency+0x324>)
 80027fe:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002800:	2b02      	cmp	r3, #2
 8002802:	d121      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <ubloxSetFrequency+0x324>)
 8002806:	795b      	ldrb	r3, [r3, #5]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11d      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <ubloxSetFrequency+0x324>)
 800280e:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002810:	2b06      	cmp	r3, #6
 8002812:	d119      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <ubloxSetFrequency+0x324>)
 8002816:	79db      	ldrb	r3, [r3, #7]
 8002818:	2b31      	cmp	r3, #49	; 0x31
 800281a:	d115      	bne.n	8002848 <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <ubloxSetFrequency+0x330>)
 800281e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002822:	461d      	mov	r5, r3
 8002824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002828:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800282c:	c407      	stmia	r4!, {r0, r1, r2}
 800282e:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002830:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002834:	2319      	movs	r3, #25
 8002836:	221c      	movs	r2, #28
 8002838:	481b      	ldr	r0, [pc, #108]	; (80028a8 <ubloxSetFrequency+0x318>)
 800283a:	f006 fbf0 	bl	800901e <HAL_UART_Transmit>
					HAL_Delay(100);
 800283e:	2064      	movs	r0, #100	; 0x64
 8002840:	f000 ff62 	bl	8003708 <HAL_Delay>
				}
#endif
				return 0;
 8002844:	2300      	movs	r3, #0
 8002846:	e027      	b.n	8002898 <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <ubloxSetFrequency+0x334>)
 800284a:	f107 040c 	add.w	r4, r7, #12
 800284e:	461d      	mov	r5, r3
 8002850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002858:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800285c:	c407      	stmia	r4!, {r0, r1, r2}
 800285e:	8023      	strh	r3, [r4, #0]
 8002860:	3402      	adds	r4, #2
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002866:	f107 010c 	add.w	r1, r7, #12
 800286a:	2319      	movs	r3, #25
 800286c:	222e      	movs	r2, #46	; 0x2e
 800286e:	480e      	ldr	r0, [pc, #56]	; (80028a8 <ubloxSetFrequency+0x318>)
 8002870:	f006 fbd5 	bl	800901e <HAL_UART_Transmit>
			HAL_Delay(100);
 8002874:	2064      	movs	r0, #100	; 0x64
 8002876:	f000 ff47 	bl	8003708 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 800287a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800287e:	3b01      	subs	r3, #1
 8002880:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8002884:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002888:	f000 ff3e 	bl	8003708 <HAL_Delay>
	while (tryCtr) {
 800288c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f aeac 	bne.w	80025ee <ubloxSetFrequency+0x5e>
	}

	return 1;
 8002896:	2301      	movs	r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	37b0      	adds	r7, #176	; 0xb0
 800289c:	46bd      	mov	sp, r7
 800289e:	bdb0      	pop	{r4, r5, r7, pc}
 80028a0:	0800b010 	.word	0x0800b010
 80028a4:	0800b018 	.word	0x0800b018
 80028a8:	20000608 	.word	0x20000608
 80028ac:	20000361 	.word	0x20000361
 80028b0:	20000584 	.word	0x20000584
 80028b4:	20000260 	.word	0x20000260
 80028b8:	20000360 	.word	0x20000360
 80028bc:	0800b05c 	.word	0x0800b05c
 80028c0:	0800af84 	.word	0x0800af84
 80028c4:	0800b080 	.word	0x0800b080

080028c8 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0ac      	sub	sp, #176	; 0xb0
 80028cc:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 80028ce:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <ubloxMsgsTurnOff+0x40>)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4611      	mov	r1, r2
 80028d4:	22af      	movs	r2, #175	; 0xaf
 80028d6:	4618      	mov	r0, r3
 80028d8:	f007 fe22 	bl	800a520 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <ubloxMsgsTurnOff+0x44>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 80028e2:	463b      	mov	r3, r7
 80028e4:	22af      	movs	r2, #175	; 0xaf
 80028e6:	4619      	mov	r1, r3
 80028e8:	4809      	ldr	r0, [pc, #36]	; (8002910 <ubloxMsgsTurnOff+0x48>)
 80028ea:	f006 fc2d 	bl	8009148 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80028ee:	bf00      	nop
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <ubloxMsgsTurnOff+0x44>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d1fa      	bne.n	80028f0 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <ubloxMsgsTurnOff+0x48>)
 80028fc:	f006 fcc4 	bl	8009288 <HAL_UART_AbortTransmit_IT>
}
 8002900:	bf00      	nop
 8002902:	37b0      	adds	r7, #176	; 0xb0
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0800b0b0 	.word	0x0800b0b0
 800290c:	20000360 	.word	0x20000360
 8002910:	20000584 	.word	0x20000584

08002914 <ublox_NavDop_get>:

void ublox_NavDop_get(UbloxNavDop_t* dop)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b0a8      	sub	sp, #160	; 0xa0
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 800291c:	4aaf      	ldr	r2, [pc, #700]	; (8002bdc <ublox_NavDop_get+0x2c8>)
 800291e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002926:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req));
 800292a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800292e:	2108      	movs	r1, #8
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fc77 	bl	8002224 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-DOP: TX --> RX --> ";
 8002936:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <ublox_NavDop_get+0x2cc>)
 8002938:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800293c:	461d      	mov	r5, r3
 800293e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002942:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002946:	c407      	stmia	r4!, {r0, r1, r2}
 8002948:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800294a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800294e:	2319      	movs	r3, #25
 8002950:	221d      	movs	r2, #29
 8002952:	48a4      	ldr	r0, [pc, #656]	; (8002be4 <ublox_NavDop_get+0x2d0>)
 8002954:	f006 fb63 	bl	800901e <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8002958:	48a3      	ldr	r0, [pc, #652]	; (8002be8 <ublox_NavDop_get+0x2d4>)
 800295a:	f006 fb27 	bl	8008fac <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800295e:	f7ff fc31 	bl	80021c4 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8002962:	4ba2      	ldr	r3, [pc, #648]	; (8002bec <ublox_NavDop_get+0x2d8>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8002968:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800296c:	2208      	movs	r2, #8
 800296e:	4619      	mov	r1, r3
 8002970:	489d      	ldr	r0, [pc, #628]	; (8002be8 <ublox_NavDop_get+0x2d4>)
 8002972:	f006 fbe9 	bl	8009148 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8002976:	bf00      	nop
 8002978:	4b9c      	ldr	r3, [pc, #624]	; (8002bec <ublox_NavDop_get+0x2d8>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d1fa      	bne.n	8002978 <ublox_NavDop_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 8002982:	4b9b      	ldr	r3, [pc, #620]	; (8002bf0 <ublox_NavDop_get+0x2dc>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8002988:	4897      	ldr	r0, [pc, #604]	; (8002be8 <ublox_NavDop_get+0x2d4>)
 800298a:	f006 ff77 	bl	800987c <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800298e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002992:	4998      	ldr	r1, [pc, #608]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002994:	4894      	ldr	r0, [pc, #592]	; (8002be8 <ublox_NavDop_get+0x2d4>)
 8002996:	f006 fc33 	bl	8009200 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 800299a:	bf00      	nop
 800299c:	4b94      	ldr	r3, [pc, #592]	; (8002bf0 <ublox_NavDop_get+0x2dc>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d1fa      	bne.n	800299c <ublox_NavDop_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80029a6:	4b93      	ldr	r3, [pc, #588]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2bb5      	cmp	r3, #181	; 0xb5
 80029ac:	f040 81d9 	bne.w	8002d62 <ublox_NavDop_get+0x44e>
 80029b0:	4b90      	ldr	r3, [pc, #576]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b62      	cmp	r3, #98	; 0x62
 80029b6:	f040 81d4 	bne.w	8002d62 <ublox_NavDop_get+0x44e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 80029ba:	4b8e      	ldr	r3, [pc, #568]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029bc:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 81cf 	bne.w	8002d62 <ublox_NavDop_get+0x44e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 80029c4:	4b8b      	ldr	r3, [pc, #556]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029c6:	78db      	ldrb	r3, [r3, #3]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	f040 81ca 	bne.w	8002d62 <ublox_NavDop_get+0x44e>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029d0:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 80029d2:	2b12      	cmp	r3, #18
 80029d4:	f040 81c5 	bne.w	8002d62 <ublox_NavDop_get+0x44e>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 80029d8:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029da:	795b      	ldrb	r3, [r3, #5]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 81c0 	bne.w	8002d62 <ublox_NavDop_get+0x44e>
		dop->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 80029e2:	4b84      	ldr	r3, [pc, #528]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029e4:	799b      	ldrb	r3, [r3, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b82      	ldr	r3, [pc, #520]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029ea:	79db      	ldrb	r3, [r3, #7]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	431a      	orrs	r2, r3
 80029f0:	4b80      	ldr	r3, [pc, #512]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029f2:	7a1b      	ldrb	r3, [r3, #8]
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	4b7e      	ldr	r3, [pc, #504]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 80029fa:	7a5b      	ldrb	r3, [r3, #9]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4313      	orrs	r3, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
		dop->gDOP		= ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8);
 8002a06:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a08:	7a9b      	ldrb	r3, [r3, #10]
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b79      	ldr	r3, [pc, #484]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a0e:	7adb      	ldrb	r3, [r3, #11]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8002a1e:	4b75      	ldr	r3, [pc, #468]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a20:	7b1b      	ldrb	r3, [r3, #12]
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a26:	7b5b      	ldrb	r3, [r3, #13]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8);
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a38:	7b9b      	ldrb	r3, [r3, #14]
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a3e:	7bdb      	ldrb	r3, [r3, #15]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= ublox_Response[6 + 10] | (ublox_Response[6 + 11] << 8);
 8002a4e:	4b69      	ldr	r3, [pc, #420]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a50:	7c1b      	ldrb	r3, [r3, #16]
 8002a52:	b21a      	sxth	r2, r3
 8002a54:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a56:	7c5b      	ldrb	r3, [r3, #17]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8);
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a68:	7c9b      	ldrb	r3, [r3, #18]
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a6e:	7cdb      	ldrb	r3, [r3, #19]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	4313      	orrs	r3, r2
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= ublox_Response[6 + 14] | (ublox_Response[6 + 15] << 8);
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a80:	7d1b      	ldrb	r3, [r3, #20]
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	4b5b      	ldr	r3, [pc, #364]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a86:	7d5b      	ldrb	r3, [r3, #21]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8);
 8002a96:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a98:	7d9b      	ldrb	r3, [r3, #22]
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <ublox_NavDop_get+0x2e0>)
 8002a9e:	7ddb      	ldrb	r3, [r3, #23]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b21b      	sxth	r3, r3
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8002aae:	4a52      	ldr	r2, [pc, #328]	; (8002bf8 <ublox_NavDop_get+0x2e4>)
 8002ab0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab6:	c303      	stmia	r3!, {r0, r1}
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	3302      	adds	r3, #2
 8002abc:	0c12      	lsrs	r2, r2, #16
 8002abe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002ac0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	220a      	movs	r2, #10
 8002ac8:	4846      	ldr	r0, [pc, #280]	; (8002be4 <ublox_NavDop_get+0x2d0>)
 8002aca:	f006 faa8 	bl	800901e <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", dop->iTOW);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f107 0008 	add.w	r0, r7, #8
 8002ad6:	4a49      	ldr	r2, [pc, #292]	; (8002bfc <ublox_NavDop_get+0x2e8>)
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	f007 fd37 	bl	800a54c <sniprintf>
 8002ade:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ae2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	f107 0108 	add.w	r1, r7, #8
 8002aec:	2319      	movs	r3, #25
 8002aee:	483d      	ldr	r0, [pc, #244]	; (8002be4 <ublox_NavDop_get+0x2d0>)
 8002af0:	f006 fa95 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (dop->gDOP / 100), (dop->gDOP % 100));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	889b      	ldrh	r3, [r3, #4]
 8002af8:	4a41      	ldr	r2, [pc, #260]	; (8002c00 <ublox_NavDop_get+0x2ec>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	461c      	mov	r4, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	889b      	ldrh	r3, [r3, #4]
 8002b08:	4a3d      	ldr	r2, [pc, #244]	; (8002c00 <ublox_NavDop_get+0x2ec>)
 8002b0a:	fba2 1203 	umull	r1, r2, r2, r3
 8002b0e:	0952      	lsrs	r2, r2, #5
 8002b10:	2164      	movs	r1, #100	; 0x64
 8002b12:	fb01 f202 	mul.w	r2, r1, r2
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f107 0008 	add.w	r0, r7, #8
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	4623      	mov	r3, r4
 8002b22:	4a38      	ldr	r2, [pc, #224]	; (8002c04 <ublox_NavDop_get+0x2f0>)
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	f007 fd11 	bl	800a54c <sniprintf>
 8002b2a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	f107 0108 	add.w	r1, r7, #8
 8002b38:	2319      	movs	r3, #25
 8002b3a:	482a      	ldr	r0, [pc, #168]	; (8002be4 <ublox_NavDop_get+0x2d0>)
 8002b3c:	f006 fa6f 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (dop->pDOP / 100), (dop->pDOP % 100));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	88db      	ldrh	r3, [r3, #6]
 8002b44:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <ublox_NavDop_get+0x2ec>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461c      	mov	r4, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	88db      	ldrh	r3, [r3, #6]
 8002b54:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <ublox_NavDop_get+0x2ec>)
 8002b56:	fba2 1203 	umull	r1, r2, r2, r3
 8002b5a:	0952      	lsrs	r2, r2, #5
 8002b5c:	2164      	movs	r1, #100	; 0x64
 8002b5e:	fb01 f202 	mul.w	r2, r1, r2
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f107 0008 	add.w	r0, r7, #8
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4623      	mov	r3, r4
 8002b6e:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <ublox_NavDop_get+0x2f4>)
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	f007 fceb 	bl	800a54c <sniprintf>
 8002b76:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	f107 0108 	add.w	r1, r7, #8
 8002b84:	2319      	movs	r3, #25
 8002b86:	4817      	ldr	r0, [pc, #92]	; (8002be4 <ublox_NavDop_get+0x2d0>)
 8002b88:	f006 fa49 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (dop->tDOP / 100), (dop->tDOP % 100));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	891b      	ldrh	r3, [r3, #8]
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <ublox_NavDop_get+0x2ec>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461c      	mov	r4, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	891b      	ldrh	r3, [r3, #8]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <ublox_NavDop_get+0x2ec>)
 8002ba2:	fba2 1203 	umull	r1, r2, r2, r3
 8002ba6:	0952      	lsrs	r2, r2, #5
 8002ba8:	2164      	movs	r1, #100	; 0x64
 8002baa:	fb01 f202 	mul.w	r2, r1, r2
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f107 0008 	add.w	r0, r7, #8
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	4623      	mov	r3, r4
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <ublox_NavDop_get+0x2f8>)
 8002bbc:	2140      	movs	r1, #64	; 0x40
 8002bbe:	f007 fcc5 	bl	800a54c <sniprintf>
 8002bc2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	f107 0108 	add.w	r1, r7, #8
 8002bd0:	2319      	movs	r3, #25
 8002bd2:	4804      	ldr	r0, [pc, #16]	; (8002be4 <ublox_NavDop_get+0x2d0>)
 8002bd4:	f006 fa23 	bl	800901e <HAL_UART_Transmit>
 8002bd8:	e01a      	b.n	8002c10 <ublox_NavDop_get+0x2fc>
 8002bda:	bf00      	nop
 8002bdc:	0800b268 	.word	0x0800b268
 8002be0:	0800b270 	.word	0x0800b270
 8002be4:	20000608 	.word	0x20000608
 8002be8:	20000584 	.word	0x20000584
 8002bec:	20000360 	.word	0x20000360
 8002bf0:	20000361 	.word	0x20000361
 8002bf4:	20000260 	.word	0x20000260
 8002bf8:	0800b290 	.word	0x0800b290
 8002bfc:	0800b160 	.word	0x0800b160
 8002c00:	51eb851f 	.word	0x51eb851f
 8002c04:	0800b188 	.word	0x0800b188
 8002c08:	0800b1a8 	.word	0x0800b1a8
 8002c0c:	0800b1c8 	.word	0x0800b1c8

			len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (dop->vDOP / 100), (dop->vDOP % 100));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	895b      	ldrh	r3, [r3, #10]
 8002c14:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461c      	mov	r4, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	895b      	ldrh	r3, [r3, #10]
 8002c24:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002c26:	fba2 1203 	umull	r1, r2, r2, r3
 8002c2a:	0952      	lsrs	r2, r2, #5
 8002c2c:	2164      	movs	r1, #100	; 0x64
 8002c2e:	fb01 f202 	mul.w	r2, r1, r2
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f107 0008 	add.w	r0, r7, #8
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	4a60      	ldr	r2, [pc, #384]	; (8002dc0 <ublox_NavDop_get+0x4ac>)
 8002c40:	2140      	movs	r1, #64	; 0x40
 8002c42:	f007 fc83 	bl	800a54c <sniprintf>
 8002c46:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	f107 0108 	add.w	r1, r7, #8
 8002c54:	2319      	movs	r3, #25
 8002c56:	485b      	ldr	r0, [pc, #364]	; (8002dc4 <ublox_NavDop_get+0x4b0>)
 8002c58:	f006 f9e1 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (dop->hDOP / 100), (dop->hDOP % 100));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	899b      	ldrh	r3, [r3, #12]
 8002c60:	4a56      	ldr	r2, [pc, #344]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	461c      	mov	r4, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	899b      	ldrh	r3, [r3, #12]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002c72:	fba2 1203 	umull	r1, r2, r2, r3
 8002c76:	0952      	lsrs	r2, r2, #5
 8002c78:	2164      	movs	r1, #100	; 0x64
 8002c7a:	fb01 f202 	mul.w	r2, r1, r2
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f107 0008 	add.w	r0, r7, #8
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4623      	mov	r3, r4
 8002c8a:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <ublox_NavDop_get+0x4b4>)
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	f007 fc5d 	bl	800a54c <sniprintf>
 8002c92:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	f107 0108 	add.w	r1, r7, #8
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	4848      	ldr	r0, [pc, #288]	; (8002dc4 <ublox_NavDop_get+0x4b0>)
 8002ca4:	f006 f9bb 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (dop->nDOP / 100), (dop->nDOP % 100));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	89db      	ldrh	r3, [r3, #14]
 8002cac:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	89db      	ldrh	r3, [r3, #14]
 8002cbc:	4a3f      	ldr	r2, [pc, #252]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002cbe:	fba2 1203 	umull	r1, r2, r2, r3
 8002cc2:	0952      	lsrs	r2, r2, #5
 8002cc4:	2164      	movs	r1, #100	; 0x64
 8002cc6:	fb01 f202 	mul.w	r2, r1, r2
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f107 0008 	add.w	r0, r7, #8
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <ublox_NavDop_get+0x4b8>)
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	f007 fc37 	bl	800a54c <sniprintf>
 8002cde:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ce2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	f107 0108 	add.w	r1, r7, #8
 8002cec:	2319      	movs	r3, #25
 8002cee:	4835      	ldr	r0, [pc, #212]	; (8002dc4 <ublox_NavDop_get+0x4b0>)
 8002cf0:	f006 f995 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (dop->eDOP / 100), (dop->eDOP % 100));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8a1b      	ldrh	r3, [r3, #16]
 8002cf8:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461c      	mov	r4, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8a1b      	ldrh	r3, [r3, #16]
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <ublox_NavDop_get+0x4a8>)
 8002d0a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0e:	0952      	lsrs	r2, r2, #5
 8002d10:	2164      	movs	r1, #100	; 0x64
 8002d12:	fb01 f202 	mul.w	r2, r1, r2
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f107 0008 	add.w	r0, r7, #8
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4623      	mov	r3, r4
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <ublox_NavDop_get+0x4bc>)
 8002d24:	2140      	movs	r1, #64	; 0x40
 8002d26:	f007 fc11 	bl	800a54c <sniprintf>
 8002d2a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f107 0108 	add.w	r1, r7, #8
 8002d38:	2319      	movs	r3, #25
 8002d3a:	4822      	ldr	r0, [pc, #136]	; (8002dc4 <ublox_NavDop_get+0x4b0>)
 8002d3c:	f006 f96f 	bl	800901e <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8002d40:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <ublox_NavDop_get+0x4c0>)
 8002d42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	8019      	strh	r1, [r3, #0]
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	0c12      	lsrs	r2, r2, #16
 8002d50:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002d52:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d56:	2319      	movs	r3, #25
 8002d58:	2202      	movs	r2, #2
 8002d5a:	481a      	ldr	r0, [pc, #104]	; (8002dc4 <ublox_NavDop_get+0x4b0>)
 8002d5c:	f006 f95f 	bl	800901e <HAL_UART_Transmit>
		{
 8002d60:	e027      	b.n	8002db2 <ublox_NavDop_get+0x49e>
		}
#endif
	}
	else {
		dop->iTOW		= 0UL;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
		dop->gDOP		= 0U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= 0U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= 0U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= 0U;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= 0U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= 0U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <ublox_NavDop_get+0x4c4>)
 8002d94:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002d98:	461d      	mov	r5, r3
 8002d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002da2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002da6:	2319      	movs	r3, #25
 8002da8:	2210      	movs	r2, #16
 8002daa:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <ublox_NavDop_get+0x4b0>)
 8002dac:	f006 f937 	bl	800901e <HAL_UART_Transmit>
		}
#endif
	}
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3798      	adds	r7, #152	; 0x98
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	51eb851f 	.word	0x51eb851f
 8002dc0:	0800b1e8 	.word	0x0800b1e8
 8002dc4:	20000608 	.word	0x20000608
 8002dc8:	0800b208 	.word	0x0800b208
 8002dcc:	0800b228 	.word	0x0800b228
 8002dd0:	0800b248 	.word	0x0800b248
 8002dd4:	0800b29c 	.word	0x0800b29c
 8002dd8:	0800b2a0 	.word	0x0800b2a0

08002ddc <ublox_NavClock_get>:

void ublox_NavClock_get(UbloxNavClock_t* ubloxNavClock)
{
 8002ddc:	b5b0      	push	{r4, r5, r7, lr}
 8002dde:	b09e      	sub	sp, #120	; 0x78
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 8002de4:	4aa9      	ldr	r2, [pc, #676]	; (800308c <ublox_NavClock_get+0x2b0>)
 8002de6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dee:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req));
 8002df2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002df6:	2108      	movs	r1, #8
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fa13 	bl	8002224 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-CLOCK: TX --> RX --> ";
 8002dfe:	4ba4      	ldr	r3, [pc, #656]	; (8003090 <ublox_NavClock_get+0x2b4>)
 8002e00:	f107 0408 	add.w	r4, r7, #8
 8002e04:	461d      	mov	r5, r3
 8002e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002e12:	f107 0108 	add.w	r1, r7, #8
 8002e16:	2319      	movs	r3, #25
 8002e18:	221f      	movs	r2, #31
 8002e1a:	489e      	ldr	r0, [pc, #632]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8002e1c:	f006 f8ff 	bl	800901e <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8002e20:	489d      	ldr	r0, [pc, #628]	; (8003098 <ublox_NavClock_get+0x2bc>)
 8002e22:	f006 f8c3 	bl	8008fac <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8002e26:	f7ff f9cd 	bl	80021c4 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 8002e2a:	4b9c      	ldr	r3, [pc, #624]	; (800309c <ublox_NavClock_get+0x2c0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 8002e30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e34:	2208      	movs	r2, #8
 8002e36:	4619      	mov	r1, r3
 8002e38:	4897      	ldr	r0, [pc, #604]	; (8003098 <ublox_NavClock_get+0x2bc>)
 8002e3a:	f006 f985 	bl	8009148 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8002e3e:	bf00      	nop
 8002e40:	4b96      	ldr	r3, [pc, #600]	; (800309c <ublox_NavClock_get+0x2c0>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d1fa      	bne.n	8002e40 <ublox_NavClock_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 8002e4a:	4b95      	ldr	r3, [pc, #596]	; (80030a0 <ublox_NavClock_get+0x2c4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8002e50:	4891      	ldr	r0, [pc, #580]	; (8003098 <ublox_NavClock_get+0x2bc>)
 8002e52:	f006 fd13 	bl	800987c <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5a:	4992      	ldr	r1, [pc, #584]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002e5c:	488e      	ldr	r0, [pc, #568]	; (8003098 <ublox_NavClock_get+0x2bc>)
 8002e5e:	f006 f9cf 	bl	8009200 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8002e62:	bf00      	nop
 8002e64:	4b8e      	ldr	r3, [pc, #568]	; (80030a0 <ublox_NavClock_get+0x2c4>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d1fa      	bne.n	8002e64 <ublox_NavClock_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002e6e:	4b8d      	ldr	r3, [pc, #564]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2bb5      	cmp	r3, #181	; 0xb5
 8002e74:	f040 80e7 	bne.w	8003046 <ublox_NavClock_get+0x26a>
 8002e78:	4b8a      	ldr	r3, [pc, #552]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b62      	cmp	r3, #98	; 0x62
 8002e7e:	f040 80e2 	bne.w	8003046 <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002e84:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	f040 80dd 	bne.w	8003046 <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8002e8c:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	2b22      	cmp	r3, #34	; 0x22
 8002e92:	f040 80d8 	bne.w	8003046 <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002e98:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8002e9a:	2b14      	cmp	r3, #20
 8002e9c:	f040 80d3 	bne.w	8003046 <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8002ea0:	4b80      	ldr	r3, [pc, #512]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ea2:	795b      	ldrb	r3, [r3, #5]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 80ce 	bne.w	8003046 <ublox_NavClock_get+0x26a>
		ubloxNavClock->iTOW	=            ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8002eaa:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002eac:	799b      	ldrb	r3, [r3, #6]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b7c      	ldr	r3, [pc, #496]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002eb2:	79db      	ldrb	r3, [r3, #7]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	4b7a      	ldr	r3, [pc, #488]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002eba:	7a1b      	ldrb	r3, [r3, #8]
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	4b78      	ldr	r3, [pc, #480]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ec2:	7a5b      	ldrb	r3, [r3, #9]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= (int32_t) (ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8) | (ublox_Response[6 +  6] << 16) | (ublox_Response[6 +  7] << 24));
 8002ece:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ed0:	7a9b      	ldrb	r3, [r3, #10]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b73      	ldr	r3, [pc, #460]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ed6:	7adb      	ldrb	r3, [r3, #11]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	431a      	orrs	r2, r3
 8002edc:	4b71      	ldr	r3, [pc, #452]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ede:	7b1b      	ldrb	r3, [r3, #12]
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ee6:	7b5b      	ldrb	r3, [r3, #13]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= (int32_t) (ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8) | (ublox_Response[6 + 10] << 16) | (ublox_Response[6 + 11] << 24));
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ef2:	7b9b      	ldrb	r3, [r3, #14]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b6b      	ldr	r3, [pc, #428]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002ef8:	7bdb      	ldrb	r3, [r3, #15]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	431a      	orrs	r2, r3
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f00:	7c1b      	ldrb	r3, [r3, #16]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	431a      	orrs	r2, r3
 8002f06:	4b67      	ldr	r3, [pc, #412]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f08:	7c5b      	ldrb	r3, [r3, #17]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	=            ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8) | (ublox_Response[6 + 14] << 16) | (ublox_Response[6 + 15] << 24);
 8002f12:	4b64      	ldr	r3, [pc, #400]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f14:	7c9b      	ldrb	r3, [r3, #18]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b62      	ldr	r3, [pc, #392]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f1a:	7cdb      	ldrb	r3, [r3, #19]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	4b60      	ldr	r3, [pc, #384]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f22:	7d1b      	ldrb	r3, [r3, #20]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f2a:	7d5b      	ldrb	r3, [r3, #21]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	=            ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8) | (ublox_Response[6 + 18] << 16) | (ublox_Response[6 + 19] << 24);
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f38:	7d9b      	ldrb	r3, [r3, #22]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f3e:	7ddb      	ldrb	r3, [r3, #23]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	431a      	orrs	r2, r3
 8002f44:	4b57      	ldr	r3, [pc, #348]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f46:	7e1b      	ldrb	r3, [r3, #24]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <ublox_NavClock_get+0x2c8>)
 8002f4e:	7e5b      	ldrb	r3, [r3, #25]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4313      	orrs	r3, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8002f5a:	4a53      	ldr	r2, [pc, #332]	; (80030a8 <ublox_NavClock_get+0x2cc>)
 8002f5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f62:	c303      	stmia	r3!, {r0, r1}
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	3302      	adds	r3, #2
 8002f68:	0c12      	lsrs	r2, r2, #16
 8002f6a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002f6c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002f70:	2319      	movs	r3, #25
 8002f72:	220a      	movs	r2, #10
 8002f74:	4847      	ldr	r0, [pc, #284]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8002f76:	f006 f852 	bl	800901e <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f107 0008 	add.w	r0, r7, #8
 8002f82:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <ublox_NavClock_get+0x2d0>)
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	f007 fae1 	bl	800a54c <sniprintf>
 8002f8a:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	f107 0108 	add.w	r1, r7, #8
 8002f94:	2319      	movs	r3, #25
 8002f96:	483f      	ldr	r0, [pc, #252]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8002f98:	f006 f841 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f107 0008 	add.w	r0, r7, #8
 8002fa4:	4a42      	ldr	r2, [pc, #264]	; (80030b0 <ublox_NavClock_get+0x2d4>)
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	f007 fad0 	bl	800a54c <sniprintf>
 8002fac:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	f107 0108 	add.w	r1, r7, #8
 8002fb6:	2319      	movs	r3, #25
 8002fb8:	4836      	ldr	r0, [pc, #216]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8002fba:	f006 f830 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f107 0008 	add.w	r0, r7, #8
 8002fc6:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <ublox_NavClock_get+0x2d8>)
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	f007 fabf 	bl	800a54c <sniprintf>
 8002fce:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f107 0108 	add.w	r1, r7, #8
 8002fd8:	2319      	movs	r3, #25
 8002fda:	482e      	ldr	r0, [pc, #184]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8002fdc:	f006 f81f 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f107 0008 	add.w	r0, r7, #8
 8002fe8:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <ublox_NavClock_get+0x2dc>)
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	f007 faae 	bl	800a54c <sniprintf>
 8002ff0:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	f107 0108 	add.w	r1, r7, #8
 8002ffa:	2319      	movs	r3, #25
 8002ffc:	4825      	ldr	r0, [pc, #148]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8002ffe:	f006 f80e 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f107 0008 	add.w	r0, r7, #8
 800300a:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <ublox_NavClock_get+0x2e0>)
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	f007 fa9d 	bl	800a54c <sniprintf>
 8003012:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003016:	b29a      	uxth	r2, r3
 8003018:	f107 0108 	add.w	r1, r7, #8
 800301c:	2319      	movs	r3, #25
 800301e:	481d      	ldr	r0, [pc, #116]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8003020:	f005 fffd 	bl	800901e <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8003024:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <ublox_NavClock_get+0x2e4>)
 8003026:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4611      	mov	r1, r2
 800302e:	8019      	strh	r1, [r3, #0]
 8003030:	3302      	adds	r3, #2
 8003032:	0c12      	lsrs	r2, r2, #16
 8003034:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003036:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800303a:	2319      	movs	r3, #25
 800303c:	2202      	movs	r2, #2
 800303e:	4815      	ldr	r0, [pc, #84]	; (8003094 <ublox_NavClock_get+0x2b8>)
 8003040:	f005 ffed 	bl	800901e <HAL_UART_Transmit>
		{
 8003044:	e01e      	b.n	8003084 <ublox_NavClock_get+0x2a8>
		}
#endif
	}
	else {
		ubloxNavClock->iTOW	= 0UL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= 0UL;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= 0UL;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	= 0UL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	= 0UL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <ublox_NavClock_get+0x2e8>)
 8003066:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800306a:	461d      	mov	r5, r3
 800306c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800306e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003074:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003078:	2319      	movs	r3, #25
 800307a:	2210      	movs	r2, #16
 800307c:	4805      	ldr	r0, [pc, #20]	; (8003094 <ublox_NavClock_get+0x2b8>)
 800307e:	f005 ffce 	bl	800901e <HAL_UART_Transmit>
		}
#endif
	}
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	3778      	adds	r7, #120	; 0x78
 8003088:	46bd      	mov	sp, r7
 800308a:	bdb0      	pop	{r4, r5, r7, pc}
 800308c:	0800b334 	.word	0x0800b334
 8003090:	0800b33c 	.word	0x0800b33c
 8003094:	20000608 	.word	0x20000608
 8003098:	20000584 	.word	0x20000584
 800309c:	20000360 	.word	0x20000360
 80030a0:	20000361 	.word	0x20000361
 80030a4:	20000260 	.word	0x20000260
 80030a8:	0800b290 	.word	0x0800b290
 80030ac:	0800b160 	.word	0x0800b160
 80030b0:	0800b2b4 	.word	0x0800b2b4
 80030b4:	0800b2d4 	.word	0x0800b2d4
 80030b8:	0800b2f4 	.word	0x0800b2f4
 80030bc:	0800b314 	.word	0x0800b314
 80030c0:	0800b29c 	.word	0x0800b29c
 80030c4:	0800b2a0 	.word	0x0800b2a0

080030c8 <ublox_NavSvinfo_get>:

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b0a4      	sub	sp, #144	; 0x90
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 80030d0:	4a53      	ldr	r2, [pc, #332]	; (8003220 <ublox_NavSvinfo_get+0x158>)
 80030d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030da:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 80030de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030e2:	2108      	movs	r1, #8
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f89d 	bl	8002224 <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-SVINFO: TX --> RX --> ";
 80030ea:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <ublox_NavSvinfo_get+0x15c>)
 80030ec:	f107 0408 	add.w	r4, r7, #8
 80030f0:	461d      	mov	r5, r3
 80030f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fa:	682b      	ldr	r3, [r5, #0]
 80030fc:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80030fe:	f107 0108 	add.w	r1, r7, #8
 8003102:	2319      	movs	r3, #25
 8003104:	2220      	movs	r2, #32
 8003106:	4848      	ldr	r0, [pc, #288]	; (8003228 <ublox_NavSvinfo_get+0x160>)
 8003108:	f005 ff89 	bl	800901e <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 800310c:	4847      	ldr	r0, [pc, #284]	; (800322c <ublox_NavSvinfo_get+0x164>)
 800310e:	f005 ff4d 	bl	8008fac <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8003112:	f7ff f857 	bl	80021c4 <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <ublox_NavSvinfo_get+0x168>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 800311c:	4843      	ldr	r0, [pc, #268]	; (800322c <ublox_NavSvinfo_get+0x164>)
 800311e:	f006 f8b3 	bl	8009288 <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8003122:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003126:	2208      	movs	r2, #8
 8003128:	4619      	mov	r1, r3
 800312a:	4840      	ldr	r0, [pc, #256]	; (800322c <ublox_NavSvinfo_get+0x164>)
 800312c:	f006 f80c 	bl	8009148 <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8003130:	bf00      	nop
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <ublox_NavSvinfo_get+0x168>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d1fa      	bne.n	8003132 <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 800313c:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <ublox_NavSvinfo_get+0x16c>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 8003142:	483a      	ldr	r0, [pc, #232]	; (800322c <ublox_NavSvinfo_get+0x164>)
 8003144:	f006 f8f6 	bl	8009334 <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 8003148:	4838      	ldr	r0, [pc, #224]	; (800322c <ublox_NavSvinfo_get+0x164>)
 800314a:	f006 fb97 	bl	800987c <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 800314e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003152:	4939      	ldr	r1, [pc, #228]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 8003154:	4835      	ldr	r0, [pc, #212]	; (800322c <ublox_NavSvinfo_get+0x164>)
 8003156:	f006 f853 	bl	8009200 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 800315a:	bf00      	nop
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <ublox_NavSvinfo_get+0x16c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d1fa      	bne.n	800315c <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 800316c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003174:	e00b      	b.n	800318e <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 8003176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 8003184:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003188:	3b01      	subs	r3, #1
 800318a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800318e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ef      	bne.n	8003176 <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2bb5      	cmp	r3, #181	; 0xb5
 800319c:	f040 8226 	bne.w	80035ec <ublox_NavSvinfo_get+0x524>
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b62      	cmp	r3, #98	; 0x62
 80031a6:	f040 8221 	bne.w	80035ec <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031ac:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	f040 821c 	bne.w	80035ec <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	f040 8217 	bne.w	80035ec <ublox_NavSvinfo_get+0x524>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031c0:	799b      	ldrb	r3, [r3, #6]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031c6:	79db      	ldrb	r3, [r3, #7]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	431a      	orrs	r2, r3
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031ce:	7a1b      	ldrb	r3, [r3, #8]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031d6:	7a5b      	ldrb	r3, [r3, #9]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	4313      	orrs	r3, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031e4:	7a9a      	ldrb	r2, [r3, #10]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031ec:	7ada      	ldrb	r2, [r3, #11]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031f4:	7b1b      	ldrb	r3, [r3, #12]
 80031f6:	b21a      	sxth	r2, r3
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <ublox_NavSvinfo_get+0x170>)
 80031fa:	7b5b      	ldrb	r3, [r3, #13]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	b21b      	sxth	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	b21b      	sxth	r3, r3
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	791b      	ldrb	r3, [r3, #4]
 800320e:	2b18      	cmp	r3, #24
 8003210:	d902      	bls.n	8003218 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2218      	movs	r2, #24
 8003216:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8003218:	2300      	movs	r3, #0
 800321a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800321c:	e09d      	b.n	800335a <ublox_NavSvinfo_get+0x292>
 800321e:	bf00      	nop
 8003220:	0800b4b4 	.word	0x0800b4b4
 8003224:	0800b4bc 	.word	0x0800b4bc
 8003228:	20000608 	.word	0x20000608
 800322c:	20000584 	.word	0x20000584
 8003230:	20000360 	.word	0x20000360
 8003234:	20000361 	.word	0x20000361
 8003238:	20000260 	.word	0x20000260
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 800323c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	330e      	adds	r3, #14
 8003248:	4a73      	ldr	r2, [pc, #460]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 800324a:	5cd1      	ldrb	r1, [r2, r3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003250:	4413      	add	r3, r2
 8003252:	3308      	adds	r3, #8
 8003254:	460a      	mov	r2, r1
 8003256:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 8003258:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	330f      	adds	r3, #15
 8003264:	4a6c      	ldr	r2, [pc, #432]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 8003266:	5cd1      	ldrb	r1, [r2, r3]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800326c:	4413      	add	r3, r2
 800326e:	3320      	adds	r3, #32
 8003270:	460a      	mov	r2, r1
 8003272:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 8003274:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3310      	adds	r3, #16
 8003280:	4a65      	ldr	r2, [pc, #404]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 8003282:	5cd1      	ldrb	r1, [r2, r3]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003288:	4413      	add	r3, r2
 800328a:	3338      	adds	r3, #56	; 0x38
 800328c:	460a      	mov	r2, r1
 800328e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8003290:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3311      	adds	r3, #17
 800329c:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 800329e:	5cd1      	ldrb	r1, [r2, r3]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a4:	4413      	add	r3, r2
 80032a6:	3350      	adds	r3, #80	; 0x50
 80032a8:	460a      	mov	r2, r1
 80032aa:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 80032ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3312      	adds	r3, #18
 80032b8:	4a57      	ldr	r2, [pc, #348]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 80032ba:	5cd1      	ldrb	r1, [r2, r3]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032c0:	4413      	add	r3, r2
 80032c2:	3368      	adds	r3, #104	; 0x68
 80032c4:	460a      	mov	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 80032c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	3313      	adds	r3, #19
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	b259      	sxtb	r1, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032de:	4413      	add	r3, r2
 80032e0:	3380      	adds	r3, #128	; 0x80
 80032e2:	460a      	mov	r2, r1
 80032e4:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) ((uint16_t)ublox_Response[6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[6 + 15 + 12 * iChn] << 8));
 80032e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	3314      	adds	r3, #20
 80032f2:	4a49      	ldr	r2, [pc, #292]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	b219      	sxth	r1, r3
 80032f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	3315      	adds	r3, #21
 8003304:	4a44      	ldr	r2, [pc, #272]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 8003306:	5cd3      	ldrb	r3, [r2, r3]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b21b      	sxth	r3, r3
 800330c:	430b      	orrs	r3, r1
 800330e:	b219      	sxth	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003314:	324c      	adds	r2, #76	; 0x4c
 8003316:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->prRes[iChn]		= (int16_t) ((uint32_t)ublox_Response[6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[6 + 19 + 12 * iChn] << 24));
 800331a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3316      	adds	r3, #22
 8003326:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	b299      	uxth	r1, r3
 800332c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	3317      	adds	r3, #23
 8003338:	4a37      	ldr	r2, [pc, #220]	; (8003418 <ublox_NavSvinfo_get+0x350>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	b29b      	uxth	r3, r3
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b29b      	uxth	r3, r3
 8003342:	430b      	orrs	r3, r1
 8003344:	b29b      	uxth	r3, r3
 8003346:	b21b      	sxth	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800334e:	3232      	adds	r2, #50	; 0x32
 8003350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8003354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003356:	3301      	adds	r3, #1
 8003358:	67fb      	str	r3, [r7, #124]	; 0x7c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	791b      	ldrb	r3, [r3, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003362:	4293      	cmp	r3, r2
 8003364:	f6ff af6a 	blt.w	800323c <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8003368:	4a2c      	ldr	r2, [pc, #176]	; (800341c <ublox_NavSvinfo_get+0x354>)
 800336a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800336e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003370:	c303      	stmia	r3!, {r0, r1}
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	3302      	adds	r3, #2
 8003376:	0c12      	lsrs	r2, r2, #16
 8003378:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800337a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800337e:	2319      	movs	r3, #25
 8003380:	220a      	movs	r2, #10
 8003382:	4827      	ldr	r0, [pc, #156]	; (8003420 <ublox_NavSvinfo_get+0x358>)
 8003384:	f005 fe4b 	bl	800901e <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f107 0008 	add.w	r0, r7, #8
 8003390:	4a24      	ldr	r2, [pc, #144]	; (8003424 <ublox_NavSvinfo_get+0x35c>)
 8003392:	2140      	movs	r1, #64	; 0x40
 8003394:	f007 f8da 	bl	800a54c <sniprintf>
 8003398:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800339a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339c:	b29a      	uxth	r2, r3
 800339e:	f107 0108 	add.w	r1, r7, #8
 80033a2:	2319      	movs	r3, #25
 80033a4:	481e      	ldr	r0, [pc, #120]	; (8003420 <ublox_NavSvinfo_get+0x358>)
 80033a6:	f005 fe3a 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	791b      	ldrb	r3, [r3, #4]
 80033ae:	f107 0008 	add.w	r0, r7, #8
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <ublox_NavSvinfo_get+0x360>)
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	f007 f8c9 	bl	800a54c <sniprintf>
 80033ba:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80033bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033be:	b29a      	uxth	r2, r3
 80033c0:	f107 0108 	add.w	r1, r7, #8
 80033c4:	2319      	movs	r3, #25
 80033c6:	4816      	ldr	r0, [pc, #88]	; (8003420 <ublox_NavSvinfo_get+0x358>)
 80033c8:	f005 fe29 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	795b      	ldrb	r3, [r3, #5]
 80033d0:	f107 0008 	add.w	r0, r7, #8
 80033d4:	4a15      	ldr	r2, [pc, #84]	; (800342c <ublox_NavSvinfo_get+0x364>)
 80033d6:	2140      	movs	r1, #64	; 0x40
 80033d8:	f007 f8b8 	bl	800a54c <sniprintf>
 80033dc:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 80033de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	f107 0108 	add.w	r1, r7, #8
 80033e6:	2319      	movs	r3, #25
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <ublox_NavSvinfo_get+0x358>)
 80033ea:	f005 fe18 	bl	800901e <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	88db      	ldrh	r3, [r3, #6]
 80033f2:	f107 0008 	add.w	r0, r7, #8
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <ublox_NavSvinfo_get+0x368>)
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	f007 f8a7 	bl	800a54c <sniprintf>
 80033fe:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003402:	b29a      	uxth	r2, r3
 8003404:	f107 0108 	add.w	r1, r7, #8
 8003408:	2319      	movs	r3, #25
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <ublox_NavSvinfo_get+0x358>)
 800340c:	f005 fe07 	bl	800901e <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8003410:	2300      	movs	r3, #0
 8003412:	67bb      	str	r3, [r7, #120]	; 0x78
 8003414:	e0d2      	b.n	80035bc <ublox_NavSvinfo_get+0x4f4>
 8003416:	bf00      	nop
 8003418:	20000260 	.word	0x20000260
 800341c:	0800b290 	.word	0x0800b290
 8003420:	20000608 	.word	0x20000608
 8003424:	0800b160 	.word	0x0800b160
 8003428:	0800b35c 	.word	0x0800b35c
 800342c:	0800b378 	.word	0x0800b378
 8003430:	0800b398 	.word	0x0800b398
				len = snprintf(((char*) msg), sizeof(msg), "  *\r\n");
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	4a76      	ldr	r2, [pc, #472]	; (8003614 <ublox_NavSvinfo_get+0x54c>)
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	4618      	mov	r0, r3
 800343e:	f007 f885 	bl	800a54c <sniprintf>
 8003442:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8003444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003446:	b29a      	uxth	r2, r3
 8003448:	f107 0108 	add.w	r1, r7, #8
 800344c:	2319      	movs	r3, #25
 800344e:	4872      	ldr	r0, [pc, #456]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 8003450:	f005 fde5 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003458:	4413      	add	r3, r2
 800345a:	3308      	adds	r3, #8
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f107 0008 	add.w	r0, r7, #8
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003466:	4a6d      	ldr	r2, [pc, #436]	; (800361c <ublox_NavSvinfo_get+0x554>)
 8003468:	2140      	movs	r1, #64	; 0x40
 800346a:	f007 f86f 	bl	800a54c <sniprintf>
 800346e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8003470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003472:	b29a      	uxth	r2, r3
 8003474:	f107 0108 	add.w	r1, r7, #8
 8003478:	2319      	movs	r3, #25
 800347a:	4867      	ldr	r0, [pc, #412]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 800347c:	f005 fdcf 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003484:	4413      	add	r3, r2
 8003486:	3320      	adds	r3, #32
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f107 0008 	add.w	r0, r7, #8
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003492:	4a63      	ldr	r2, [pc, #396]	; (8003620 <ublox_NavSvinfo_get+0x558>)
 8003494:	2140      	movs	r1, #64	; 0x40
 8003496:	f007 f859 	bl	800a54c <sniprintf>
 800349a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f107 0108 	add.w	r1, r7, #8
 80034a4:	2319      	movs	r3, #25
 80034a6:	485c      	ldr	r0, [pc, #368]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 80034a8:	f005 fdb9 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b0:	4413      	add	r3, r2
 80034b2:	3338      	adds	r3, #56	; 0x38
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	f107 0008 	add.w	r0, r7, #8
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034be:	4a59      	ldr	r2, [pc, #356]	; (8003624 <ublox_NavSvinfo_get+0x55c>)
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	f007 f843 	bl	800a54c <sniprintf>
 80034c6:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80034c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	f107 0108 	add.w	r1, r7, #8
 80034d0:	2319      	movs	r3, #25
 80034d2:	4851      	ldr	r0, [pc, #324]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 80034d4:	f005 fda3 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034dc:	4413      	add	r3, r2
 80034de:	3350      	adds	r3, #80	; 0x50
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	f107 0008 	add.w	r0, r7, #8
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ea:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <ublox_NavSvinfo_get+0x560>)
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	f007 f82d 	bl	800a54c <sniprintf>
 80034f2:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80034f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	f107 0108 	add.w	r1, r7, #8
 80034fc:	2319      	movs	r3, #25
 80034fe:	4846      	ldr	r0, [pc, #280]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 8003500:	f005 fd8d 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	4413      	add	r3, r2
 800350a:	3368      	adds	r3, #104	; 0x68
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	f107 0008 	add.w	r0, r7, #8
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003516:	4a45      	ldr	r2, [pc, #276]	; (800362c <ublox_NavSvinfo_get+0x564>)
 8003518:	2140      	movs	r1, #64	; 0x40
 800351a:	f007 f817 	bl	800a54c <sniprintf>
 800351e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8003520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003522:	b29a      	uxth	r2, r3
 8003524:	f107 0108 	add.w	r1, r7, #8
 8003528:	2319      	movs	r3, #25
 800352a:	483b      	ldr	r0, [pc, #236]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 800352c:	f005 fd77 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003534:	4413      	add	r3, r2
 8003536:	3380      	adds	r3, #128	; 0x80
 8003538:	f993 3000 	ldrsb.w	r3, [r3]
 800353c:	f107 0008 	add.w	r0, r7, #8
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003544:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <ublox_NavSvinfo_get+0x568>)
 8003546:	2140      	movs	r1, #64	; 0x40
 8003548:	f007 f800 	bl	800a54c <sniprintf>
 800354c:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800354e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003550:	b29a      	uxth	r2, r3
 8003552:	f107 0108 	add.w	r1, r7, #8
 8003556:	2319      	movs	r3, #25
 8003558:	482f      	ldr	r0, [pc, #188]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 800355a:	f005 fd60 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->azim[iChn]);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003562:	324c      	adds	r2, #76	; 0x4c
 8003564:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003568:	f107 0008 	add.w	r0, r7, #8
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003570:	4a30      	ldr	r2, [pc, #192]	; (8003634 <ublox_NavSvinfo_get+0x56c>)
 8003572:	2140      	movs	r1, #64	; 0x40
 8003574:	f006 ffea 	bl	800a54c <sniprintf>
 8003578:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800357a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357c:	b29a      	uxth	r2, r3
 800357e:	f107 0108 	add.w	r1, r7, #8
 8003582:	2319      	movs	r3, #25
 8003584:	4824      	ldr	r0, [pc, #144]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 8003586:	f005 fd4a 	bl	800901e <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800358e:	3232      	adds	r2, #50	; 0x32
 8003590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003594:	f107 0008 	add.w	r0, r7, #8
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359c:	4a26      	ldr	r2, [pc, #152]	; (8003638 <ublox_NavSvinfo_get+0x570>)
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	f006 ffd4 	bl	800a54c <sniprintf>
 80035a4:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	f107 0108 	add.w	r1, r7, #8
 80035ae:	2319      	movs	r3, #25
 80035b0:	4819      	ldr	r0, [pc, #100]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 80035b2:	f005 fd34 	bl	800901e <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80035b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b8:	3301      	adds	r3, #1
 80035ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	791b      	ldrb	r3, [r3, #4]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c4:	4293      	cmp	r3, r2
 80035c6:	f6ff af35 	blt.w	8003434 <ublox_NavSvinfo_get+0x36c>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <ublox_NavSvinfo_get+0x574>)
 80035cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	4611      	mov	r1, r2
 80035d4:	8019      	strh	r1, [r3, #0]
 80035d6:	3302      	adds	r3, #2
 80035d8:	0c12      	lsrs	r2, r2, #16
 80035da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80035dc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80035e0:	2319      	movs	r3, #25
 80035e2:	2202      	movs	r2, #2
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 80035e6:	f005 fd1a 	bl	800901e <HAL_UART_Transmit>
		{
 80035ea:	e00f      	b.n	800360c <ublox_NavSvinfo_get+0x544>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <ublox_NavSvinfo_get+0x578>)
 80035ee:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80035f2:	461d      	mov	r5, r3
 80035f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80035fc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003600:	2319      	movs	r3, #25
 8003602:	2210      	movs	r2, #16
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <ublox_NavSvinfo_get+0x550>)
 8003606:	f005 fd0a 	bl	800901e <HAL_UART_Transmit>
		}
#endif
	}
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	3788      	adds	r7, #136	; 0x88
 8003610:	46bd      	mov	sp, r7
 8003612:	bdb0      	pop	{r4, r5, r7, pc}
 8003614:	0800b3b4 	.word	0x0800b3b4
 8003618:	20000608 	.word	0x20000608
 800361c:	0800b3bc 	.word	0x0800b3bc
 8003620:	0800b3d8 	.word	0x0800b3d8
 8003624:	0800b3f4 	.word	0x0800b3f4
 8003628:	0800b414 	.word	0x0800b414
 800362c:	0800b434 	.word	0x0800b434
 8003630:	0800b454 	.word	0x0800b454
 8003634:	0800b474 	.word	0x0800b474
 8003638:	0800b494 	.word	0x0800b494
 800363c:	0800b29c 	.word	0x0800b29c
 8003640:	0800b2a0 	.word	0x0800b2a0

08003644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800367c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003648:	f7fe fb12 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800364c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800364e:	e003      	b.n	8003658 <LoopCopyDataInit>

08003650 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003652:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003654:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003656:	3104      	adds	r1, #4

08003658 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003658:	480a      	ldr	r0, [pc, #40]	; (8003684 <LoopForever+0xa>)
	ldr	r3, =_edata
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <LoopForever+0xe>)
	adds	r2, r0, r1
 800365c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800365e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003660:	d3f6      	bcc.n	8003650 <CopyDataInit>
	ldr	r2, =_sbss
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003664:	e002      	b.n	800366c <LoopFillZerobss>

08003666 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003666:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003668:	f842 3b04 	str.w	r3, [r2], #4

0800366c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <LoopForever+0x16>)
	cmp	r2, r3
 800366e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003670:	d3f9      	bcc.n	8003666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003672:	f006 ff31 	bl	800a4d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003676:	f7fd febb 	bl	80013f0 <main>

0800367a <LoopForever>:

LoopForever:
    b LoopForever
 800367a:	e7fe      	b.n	800367a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800367c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8003680:	0800b56c 	.word	0x0800b56c
	ldr	r0, =_sdata
 8003684:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003688:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800368c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003690:	200006a0 	.word	0x200006a0

08003694 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003694:	e7fe      	b.n	8003694 <CAN1_RX0_IRQHandler>

08003696 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a0:	2003      	movs	r0, #3
 80036a2:	f001 fa0a 	bl	8004aba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036a6:	200f      	movs	r0, #15
 80036a8:	f7fe f9ee 	bl	8001a88 <HAL_InitTick>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	71fb      	strb	r3, [r7, #7]
 80036b6:	e001      	b.n	80036bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036b8:	f7fe f9c2 	bl	8001a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036bc:	79fb      	ldrb	r3, [r7, #7]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_IncTick+0x20>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x24>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_IncTick+0x24>)
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000008 	.word	0x20000008
 80036ec:	2000068c 	.word	0x2000068c

080036f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return uwTick;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_GetTick+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000068c 	.word	0x2000068c

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffde 	bl	80036f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000008 	.word	0x20000008

08003750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3360      	adds	r3, #96	; 0x60
 80037ca:	461a      	mov	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <LL_ADC_SetOffset+0x44>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	03fff000 	.word	0x03fff000

08003800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3360      	adds	r3, #96	; 0x60
 800380e:	461a      	mov	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3360      	adds	r3, #96	; 0x60
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3330      	adds	r3, #48	; 0x30
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	4413      	add	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	211f      	movs	r1, #31
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	401a      	ands	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0e9b      	lsrs	r3, r3, #26
 80038c0:	f003 011f 	and.w	r1, r3, #31
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	431a      	orrs	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003906:	b480      	push	{r7}
 8003908:	b087      	sub	sp, #28
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3314      	adds	r3, #20
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	0e5b      	lsrs	r3, r3, #25
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	4413      	add	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	0d1b      	lsrs	r3, r3, #20
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2107      	movs	r1, #7
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	401a      	ands	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	0d1b      	lsrs	r3, r3, #20
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	431a      	orrs	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0318 	and.w	r3, r3, #24
 800397e:	4908      	ldr	r1, [pc, #32]	; (80039a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003980:	40d9      	lsrs	r1, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	400b      	ands	r3, r1
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	431a      	orrs	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	0007ffff 	.word	0x0007ffff

080039a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80039b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6093      	str	r3, [r2, #8]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039dc:	d101      	bne.n	80039e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a2c:	d101      	bne.n	8003a32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <LL_ADC_IsEnabled+0x18>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <LL_ADC_IsEnabled+0x1a>
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d101      	bne.n	8003a7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d101      	bne.n	8003aa4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e12c      	b.n	8003d28 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fc fde9 	bl	80006b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff67 	bl	80039c8 <LL_ADC_IsDeepPowerDownEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff4d 	bl	80039a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ff82 	bl	8003a18 <LL_ADC_IsInternalRegulatorEnabled>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff66 	bl	80039f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b24:	4b82      	ldr	r3, [pc, #520]	; (8003d30 <HAL_ADC_Init+0x27c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	4a82      	ldr	r2, [pc, #520]	; (8003d34 <HAL_ADC_Init+0x280>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b38:	e002      	b.n	8003b40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f9      	bne.n	8003b3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff64 	bl	8003a18 <LL_ADC_IsInternalRegulatorEnabled>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10d      	bne.n	8003b72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ff75 	bl	8003a66 <LL_ADC_REG_IsConversionOngoing>
 8003b7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 80c5 	bne.w	8003d16 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 80c1 	bne.w	8003d16 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b9c:	f043 0202 	orr.w	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff49 	bl	8003a40 <LL_ADC_IsEnabled>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb4:	4860      	ldr	r0, [pc, #384]	; (8003d38 <HAL_ADC_Init+0x284>)
 8003bb6:	f7ff ff43 	bl	8003a40 <LL_ADC_IsEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	485d      	ldr	r0, [pc, #372]	; (8003d3c <HAL_ADC_Init+0x288>)
 8003bc8:	f7ff fdc2 	bl	8003750 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7e5b      	ldrb	r3, [r3, #25]
 8003bd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003bdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003be2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	045b      	lsls	r3, r3, #17
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <HAL_ADC_Init+0x28c>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	430b      	orrs	r3, r1
 8003c36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff12 	bl	8003a66 <LL_ADC_REG_IsConversionOngoing>
 8003c42:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff1f 	bl	8003a8c <LL_ADC_INJ_IsConversionOngoing>
 8003c4e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d13d      	bne.n	8003cd2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d13a      	bne.n	8003cd2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c60:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c68:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c78:	f023 0302 	bic.w	r3, r3, #2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	430b      	orrs	r3, r1
 8003c84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d118      	bne.n	8003cc2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	611a      	str	r2, [r3, #16]
 8003cc0:	e007      	b.n	8003cd2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f023 010f 	bic.w	r1, r3, #15
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf2:	e007      	b.n	8003d04 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 020f 	bic.w	r2, r2, #15
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f023 0303 	bic.w	r3, r3, #3
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
 8003d14:	e007      	b.n	8003d26 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000000 	.word	0x20000000
 8003d34:	053e2d63 	.word	0x053e2d63
 8003d38:	50040000 	.word	0x50040000
 8003d3c:	50040300 	.word	0x50040300
 8003d40:	fff0c007 	.word	0xfff0c007

08003d44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b088      	sub	sp, #32
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d017      	beq.n	8003db4 <HAL_ADC_IRQHandler+0x56>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d012      	beq.n	8003db4 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fdac 	bl	8004904 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0x6a>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d05e      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d059      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fd32 	bl	8003862 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03e      	beq.n	8003e82 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d135      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d12e      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe1c 	bl	8003a66 <LL_ADC_REG_IsConversionOngoing>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11a      	bne.n	8003e6a <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020c 	bic.w	r2, r2, #12
 8003e42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d112      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f043 0201 	orr.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
 8003e68:	e00b      	b.n	8003e82 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f043 0210 	orr.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fc fcbc 	bl	8000800 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	220c      	movs	r2, #12
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADC_IRQHandler+0x146>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d072      	beq.n	8003f94 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d06d      	beq.n	8003f94 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fd03 	bl	80038e0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003eda:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fcbe 	bl	8003862 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ee6:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d047      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_ADC_IRQHandler+0x1b2>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03f      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d13a      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d133      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d12e      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fdad 	bl	8003a8c <LL_ADC_INJ_IsConversionOngoing>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11a      	bne.n	8003f6e <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f46:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d112      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
 8003f6c:	e00b      	b.n	8003f86 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fc94 	bl	80048b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2260      	movs	r2, #96	; 0x60
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d011      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x264>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f886 	bl	80040c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x294>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fc7a 	bl	80048dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d012      	beq.n	8004022 <HAL_ADC_IRQHandler+0x2c4>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fc6c 	bl	80048f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02a      	beq.n	8004082 <HAL_ADC_IRQHandler+0x324>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d025      	beq.n	8004082 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e008      	b.n	8004056 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8004052:	2301      	movs	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10e      	bne.n	800407a <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f043 0202 	orr.w	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fc fc3b 	bl	80008f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2210      	movs	r2, #16
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	2b00      	cmp	r3, #0
 800408a:	d018      	beq.n	80040be <HAL_ADC_IRQHandler+0x360>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f043 0208 	orr.w	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fc05 	bl	80048c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80040be:	bf00      	nop
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b0b6      	sub	sp, #216	; 0xd8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x22>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e3b9      	b.n	8004872 <HAL_ADC_ConfigChannel+0x796>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fcab 	bl	8003a66 <LL_ADC_REG_IsConversionOngoing>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 839e 	bne.w	8004854 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b05      	cmp	r3, #5
 800411e:	d824      	bhi.n	800416a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	3b02      	subs	r3, #2
 8004126:	2b03      	cmp	r3, #3
 8004128:	d81b      	bhi.n	8004162 <HAL_ADC_ConfigChannel+0x86>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_ADC_ConfigChannel+0x54>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	08004149 	.word	0x08004149
 8004138:	08004151 	.word	0x08004151
 800413c:	08004159 	.word	0x08004159
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	220c      	movs	r2, #12
 8004144:	605a      	str	r2, [r3, #4]
          break;
 8004146:	e011      	b.n	800416c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2212      	movs	r2, #18
 800414c:	605a      	str	r2, [r3, #4]
          break;
 800414e:	e00d      	b.n	800416c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2218      	movs	r2, #24
 8004154:	605a      	str	r2, [r3, #4]
          break;
 8004156:	e009      	b.n	800416c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800415e:	605a      	str	r2, [r3, #4]
          break;
 8004160:	e004      	b.n	800416c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2206      	movs	r2, #6
 8004166:	605a      	str	r2, [r3, #4]
          break;
 8004168:	e000      	b.n	800416c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800416a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	f7ff fb85 	bl	8003888 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fc6f 	bl	8003a66 <LL_ADC_REG_IsConversionOngoing>
 8004188:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fc7b 	bl	8003a8c <LL_ADC_INJ_IsConversionOngoing>
 8004196:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800419a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 81a6 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 81a1 	bne.w	80044f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	461a      	mov	r2, r3
 80041bc:	f7ff fba3 	bl	8003906 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00a      	beq.n	80041f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6919      	ldr	r1, [r3, #16]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041f2:	f7ff fae1 	bl	80037b8 <LL_ADC_SetOffset>
 80041f6:	e17b      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fafe 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x148>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff faf3 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800421a:	4603      	mov	r3, r0
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	f003 021f 	and.w	r2, r3, #31
 8004222:	e01e      	b.n	8004262 <HAL_ADC_ConfigChannel+0x186>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fae8 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004230:	4603      	mov	r3, r0
 8004232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800424a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004252:	2320      	movs	r3, #32
 8004254:	e004      	b.n	8004260 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <HAL_ADC_ConfigChannel+0x19e>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	e018      	b.n	80042ac <HAL_ADC_ConfigChannel+0x1d0>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004286:	fa93 f3a3 	rbit	r3, r3
 800428a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800428e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004292:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004296:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800429e:	2320      	movs	r3, #32
 80042a0:	e004      	b.n	80042ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80042a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d106      	bne.n	80042be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fab7 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fa9b 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x20e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2101      	movs	r1, #1
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fa90 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	0e9b      	lsrs	r3, r3, #26
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	e01e      	b.n	8004328 <HAL_ADC_ConfigChannel+0x24c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2101      	movs	r1, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fa85 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800430c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004318:	2320      	movs	r3, #32
 800431a:	e004      	b.n	8004326 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800431c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x264>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	e018      	b.n	8004372 <HAL_ADC_ConfigChannel+0x296>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800435c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004364:	2320      	movs	r3, #32
 8004366:	e004      	b.n	8004372 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	2101      	movs	r1, #1
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fa54 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fa38 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x2d4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fa2d 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80043a6:	4603      	mov	r3, r0
 80043a8:	0e9b      	lsrs	r3, r3, #26
 80043aa:	f003 021f 	and.w	r2, r3, #31
 80043ae:	e01e      	b.n	80043ee <HAL_ADC_ConfigChannel+0x312>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2102      	movs	r1, #2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fa22 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80043bc:	4603      	mov	r3, r0
 80043be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80043ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80043d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80043de:	2320      	movs	r3, #32
 80043e0:	e004      	b.n	80043ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80043e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x32a>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	0e9b      	lsrs	r3, r3, #26
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	e016      	b.n	8004434 <HAL_ADC_ConfigChannel+0x358>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800441a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800441e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004426:	2320      	movs	r3, #32
 8004428:	e004      	b.n	8004434 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800442a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004434:	429a      	cmp	r2, r3
 8004436:	d106      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2200      	movs	r2, #0
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f9f3 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2103      	movs	r1, #3
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff f9d7 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x396>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2103      	movs	r1, #3
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f9cc 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004468:	4603      	mov	r3, r0
 800446a:	0e9b      	lsrs	r3, r3, #26
 800446c:	f003 021f 	and.w	r2, r3, #31
 8004470:	e017      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x3c6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2103      	movs	r1, #3
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f9c1 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800447e:	4603      	mov	r3, r0
 8004480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800448a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800448c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800448e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e003      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x3de>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	0e9b      	lsrs	r3, r3, #26
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	e011      	b.n	80044de <HAL_ADC_ConfigChannel+0x402>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80044c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80044d2:	2320      	movs	r3, #32
 80044d4:	e003      	b.n	80044de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	fab3 f383 	clz	r3, r3
 80044dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044de:	429a      	cmp	r2, r3
 80044e0:	d106      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2200      	movs	r2, #0
 80044e8:	2103      	movs	r1, #3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f99e 	bl	800382c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff faa3 	bl	8003a40 <LL_ADC_IsEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 813f 	bne.w	8004780 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	f7ff fa24 	bl	800395c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a8e      	ldr	r2, [pc, #568]	; (8004754 <HAL_ADC_ConfigChannel+0x678>)
 800451a:	4293      	cmp	r3, r2
 800451c:	f040 8130 	bne.w	8004780 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x46c>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	0e9b      	lsrs	r3, r3, #26
 8004536:	3301      	adds	r3, #1
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2b09      	cmp	r3, #9
 800453e:	bf94      	ite	ls
 8004540:	2301      	movls	r3, #1
 8004542:	2300      	movhi	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e019      	b.n	800457c <HAL_ADC_ConfigChannel+0x4a0>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004558:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800455a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2b09      	cmp	r3, #9
 8004574:	bf94      	ite	ls
 8004576:	2301      	movls	r3, #1
 8004578:	2300      	movhi	r3, #0
 800457a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800457c:	2b00      	cmp	r3, #0
 800457e:	d079      	beq.n	8004674 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <HAL_ADC_ConfigChannel+0x4c0>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0e9b      	lsrs	r3, r3, #26
 8004592:	3301      	adds	r3, #1
 8004594:	069b      	lsls	r3, r3, #26
 8004596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800459a:	e015      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x4ec>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80045ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80045b4:	2320      	movs	r3, #32
 80045b6:	e003      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80045b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	069b      	lsls	r3, r3, #26
 80045c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x50c>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	0e9b      	lsrs	r3, r3, #26
 80045da:	3301      	adds	r3, #1
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2101      	movs	r1, #1
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	e017      	b.n	8004618 <HAL_ADC_ConfigChannel+0x53c>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80045f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80045fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e003      	b.n	800460c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	ea42 0103 	orr.w	r1, r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_ADC_ConfigChannel+0x562>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	0e9b      	lsrs	r3, r3, #26
 800462e:	3301      	adds	r3, #1
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	051b      	lsls	r3, r3, #20
 800463c:	e018      	b.n	8004670 <HAL_ADC_ConfigChannel+0x594>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	fa93 f3a3 	rbit	r3, r3
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004656:	2320      	movs	r3, #32
 8004658:	e003      	b.n	8004662 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800465a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3301      	adds	r3, #1
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	4613      	mov	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4413      	add	r3, r2
 800466e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004670:	430b      	orrs	r3, r1
 8004672:	e080      	b.n	8004776 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467c:	2b00      	cmp	r3, #0
 800467e:	d107      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x5b4>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0e9b      	lsrs	r3, r3, #26
 8004686:	3301      	adds	r3, #1
 8004688:	069b      	lsls	r3, r3, #26
 800468a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800468e:	e015      	b.n	80046bc <HAL_ADC_ConfigChannel+0x5e0>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	fa93 f3a3 	rbit	r3, r3
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80046a8:	2320      	movs	r3, #32
 80046aa:	e003      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	069b      	lsls	r3, r3, #26
 80046b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x600>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0e9b      	lsrs	r3, r3, #26
 80046ce:	3301      	adds	r3, #1
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f303 	lsl.w	r3, r1, r3
 80046da:	e017      	b.n	800470c <HAL_ADC_ConfigChannel+0x630>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	61fb      	str	r3, [r7, #28]
  return result;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e003      	b.n	8004700 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2101      	movs	r1, #1
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	ea42 0103 	orr.w	r1, r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x65c>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	0e9b      	lsrs	r3, r3, #26
 8004722:	3301      	adds	r3, #1
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	3b1e      	subs	r3, #30
 8004730:	051b      	lsls	r3, r3, #20
 8004732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004736:	e01d      	b.n	8004774 <HAL_ADC_ConfigChannel+0x698>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	613b      	str	r3, [r7, #16]
  return result;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004750:	2320      	movs	r3, #32
 8004752:	e005      	b.n	8004760 <HAL_ADC_ConfigChannel+0x684>
 8004754:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	fab3 f383 	clz	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	3301      	adds	r3, #1
 8004762:	f003 021f 	and.w	r2, r3, #31
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	3b1e      	subs	r3, #30
 800476e:	051b      	lsls	r3, r3, #20
 8004770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004774:	430b      	orrs	r3, r1
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	6892      	ldr	r2, [r2, #8]
 800477a:	4619      	mov	r1, r3
 800477c:	f7ff f8c3 	bl	8003906 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_ADC_ConfigChannel+0x7a0>)
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d06c      	beq.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800478c:	483c      	ldr	r0, [pc, #240]	; (8004880 <HAL_ADC_ConfigChannel+0x7a4>)
 800478e:	f7ff f805 	bl	800379c <LL_ADC_GetCommonPathInternalCh>
 8004792:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3a      	ldr	r2, [pc, #232]	; (8004884 <HAL_ADC_ConfigChannel+0x7a8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d127      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d121      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a35      	ldr	r2, [pc, #212]	; (8004888 <HAL_ADC_ConfigChannel+0x7ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d157      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047be:	4619      	mov	r1, r3
 80047c0:	482f      	ldr	r0, [pc, #188]	; (8004880 <HAL_ADC_ConfigChannel+0x7a4>)
 80047c2:	f7fe ffd8 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047c6:	4b31      	ldr	r3, [pc, #196]	; (800488c <HAL_ADC_ConfigChannel+0x7b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	4a30      	ldr	r2, [pc, #192]	; (8004890 <HAL_ADC_ConfigChannel+0x7b4>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047e0:	e002      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f9      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047ee:	e03a      	b.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <HAL_ADC_ConfigChannel+0x7b8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d113      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x746>
 80047fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <HAL_ADC_ConfigChannel+0x7ac>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d12a      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004818:	4619      	mov	r1, r3
 800481a:	4819      	ldr	r0, [pc, #100]	; (8004880 <HAL_ADC_ConfigChannel+0x7a4>)
 800481c:	f7fe ffab 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004820:	e021      	b.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_ADC_ConfigChannel+0x7bc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d11c      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800482c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d116      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a12      	ldr	r2, [pc, #72]	; (8004888 <HAL_ADC_ConfigChannel+0x7ac>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d111      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800484a:	4619      	mov	r1, r3
 800484c:	480c      	ldr	r0, [pc, #48]	; (8004880 <HAL_ADC_ConfigChannel+0x7a4>)
 800484e:	f7fe ff92 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
 8004852:	e008      	b.n	8004866 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800486e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004872:	4618      	mov	r0, r3
 8004874:	37d8      	adds	r7, #216	; 0xd8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	80080000 	.word	0x80080000
 8004880:	50040300 	.word	0x50040300
 8004884:	c7520000 	.word	0xc7520000
 8004888:	50040000 	.word	0x50040000
 800488c:	20000000 	.word	0x20000000
 8004890:	053e2d63 	.word	0x053e2d63
 8004894:	cb840000 	.word	0xcb840000
 8004898:	80000001 	.word	0x80000001

0800489c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <__NVIC_SetPriorityGrouping+0x44>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004934:	4013      	ands	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800494a:	4a04      	ldr	r2, [pc, #16]	; (800495c <__NVIC_SetPriorityGrouping+0x44>)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	60d3      	str	r3, [r2, #12]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <__NVIC_GetPriorityGrouping+0x18>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	f003 0307 	and.w	r3, r3, #7
}
 800496e:	4618      	mov	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00

0800497c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	2b00      	cmp	r3, #0
 800498c:	db0b      	blt.n	80049a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	f003 021f 	and.w	r2, r3, #31
 8004994:	4907      	ldr	r1, [pc, #28]	; (80049b4 <__NVIC_EnableIRQ+0x38>)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2001      	movs	r0, #1
 800499e:	fa00 f202 	lsl.w	r2, r0, r2
 80049a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	e000e100 	.word	0xe000e100

080049b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	db12      	blt.n	80049f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	490a      	ldr	r1, [pc, #40]	; (80049fc <__NVIC_DisableIRQ+0x44>)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2001      	movs	r0, #1
 80049da:	fa00 f202 	lsl.w	r2, r0, r2
 80049de:	3320      	adds	r3, #32
 80049e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80049e4:	f3bf 8f4f 	dsb	sy
}
 80049e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049ea:	f3bf 8f6f 	isb	sy
}
 80049ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000e100 	.word	0xe000e100

08004a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	db0a      	blt.n	8004a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	490c      	ldr	r1, [pc, #48]	; (8004a4c <__NVIC_SetPriority+0x4c>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	0112      	lsls	r2, r2, #4
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	440b      	add	r3, r1
 8004a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a28:	e00a      	b.n	8004a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4908      	ldr	r1, [pc, #32]	; (8004a50 <__NVIC_SetPriority+0x50>)
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	3b04      	subs	r3, #4
 8004a38:	0112      	lsls	r2, r2, #4
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	761a      	strb	r2, [r3, #24]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	e000e100 	.word	0xe000e100
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f1c3 0307 	rsb	r3, r3, #7
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	bf28      	it	cs
 8004a72:	2304      	movcs	r3, #4
 8004a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d902      	bls.n	8004a84 <NVIC_EncodePriority+0x30>
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3b03      	subs	r3, #3
 8004a82:	e000      	b.n	8004a86 <NVIC_EncodePriority+0x32>
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43da      	mvns	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	401a      	ands	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	43d9      	mvns	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aac:	4313      	orrs	r3, r2
         );
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3724      	adds	r7, #36	; 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff28 	bl	8004918 <__NVIC_SetPriorityGrouping>
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ae2:	f7ff ff3d 	bl	8004960 <__NVIC_GetPriorityGrouping>
 8004ae6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	6978      	ldr	r0, [r7, #20]
 8004aee:	f7ff ffb1 	bl	8004a54 <NVIC_EncodePriority>
 8004af2:	4602      	mov	r2, r0
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff ff80 	bl	8004a00 <__NVIC_SetPriority>
}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff ff30 	bl	800497c <__NVIC_EnableIRQ>
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff40 	bl	80049b8 <__NVIC_DisableIRQ>
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e098      	b.n	8004c84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b4d      	ldr	r3, [pc, #308]	; (8004c90 <HAL_DMA_Init+0x150>)
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d80f      	bhi.n	8004b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <HAL_DMA_Init+0x154>)
 8004b66:	4413      	add	r3, r2
 8004b68:	4a4b      	ldr	r2, [pc, #300]	; (8004c98 <HAL_DMA_Init+0x158>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	009a      	lsls	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a48      	ldr	r2, [pc, #288]	; (8004c9c <HAL_DMA_Init+0x15c>)
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b7c:	e00e      	b.n	8004b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <HAL_DMA_Init+0x160>)
 8004b86:	4413      	add	r3, r2
 8004b88:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <HAL_DMA_Init+0x158>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	009a      	lsls	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_DMA_Init+0x164>)
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf6:	d039      	beq.n	8004c6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_DMA_Init+0x15c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d11a      	bne.n	8004c38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <HAL_DMA_Init+0x168>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f003 031c 	and.w	r3, r3, #28
 8004c0e:	210f      	movs	r1, #15
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	4924      	ldr	r1, [pc, #144]	; (8004ca8 <HAL_DMA_Init+0x168>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <HAL_DMA_Init+0x168>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c28:	f003 031c 	and.w	r3, r3, #28
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	491d      	ldr	r1, [pc, #116]	; (8004ca8 <HAL_DMA_Init+0x168>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
 8004c36:	e019      	b.n	8004c6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c38:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <HAL_DMA_Init+0x16c>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	f003 031c 	and.w	r3, r3, #28
 8004c44:	210f      	movs	r1, #15
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	4917      	ldr	r1, [pc, #92]	; (8004cac <HAL_DMA_Init+0x16c>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_DMA_Init+0x16c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f003 031c 	and.w	r3, r3, #28
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	4911      	ldr	r1, [pc, #68]	; (8004cac <HAL_DMA_Init+0x16c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40020407 	.word	0x40020407
 8004c94:	bffdfff8 	.word	0xbffdfff8
 8004c98:	cccccccd 	.word	0xcccccccd
 8004c9c:	40020000 	.word	0x40020000
 8004ca0:	bffdfbf8 	.word	0xbffdfbf8
 8004ca4:	40020400 	.word	0x40020400
 8004ca8:	400200a8 	.word	0x400200a8
 8004cac:	400204a8 	.word	0x400204a8

08004cb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d008      	beq.n	8004cda <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e022      	b.n	8004d20 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 020e 	bic.w	r2, r2, #14
 8004ce8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f003 021c 	and.w	r2, r3, #28
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d005      	beq.n	8004d50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
 8004d4e:	e029      	b.n	8004da4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 020e 	bic.w	r2, r2, #14
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f003 021c 	and.w	r2, r3, #28
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d82:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
    }
  }
  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f003 031c 	and.w	r3, r3, #28
 8004dce:	2204      	movs	r2, #4
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d026      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x7a>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d021      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0204 	bic.w	r2, r2, #4
 8004e00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f003 021c 	and.w	r2, r3, #28
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2104      	movs	r1, #4
 8004e10:	fa01 f202 	lsl.w	r2, r1, r2
 8004e14:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d071      	beq.n	8004f02 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004e26:	e06c      	b.n	8004f02 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	f003 031c 	and.w	r3, r3, #28
 8004e30:	2202      	movs	r2, #2
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02e      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xec>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d029      	beq.n	8004e9a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 020a 	bic.w	r2, r2, #10
 8004e62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f003 021c 	and.w	r2, r3, #28
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2102      	movs	r1, #2
 8004e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d038      	beq.n	8004f02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e98:	e033      	b.n	8004f02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f003 031c 	and.w	r3, r3, #28
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02a      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x156>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d025      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 020e 	bic.w	r2, r2, #14
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	f003 021c 	and.w	r2, r3, #28
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
}
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f1a:	b2db      	uxtb	r3, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f36:	e148      	b.n	80051ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 813a 	beq.w	80051c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d00b      	beq.n	8004f70 <HAL_GPIO_Init+0x48>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d007      	beq.n	8004f70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f64:	2b11      	cmp	r3, #17
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b12      	cmp	r3, #18
 8004f6e:	d130      	bne.n	8004fd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0201 	and.w	r2, r3, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2203      	movs	r2, #3
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_Init+0xea>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b12      	cmp	r3, #18
 8005010:	d123      	bne.n	800505a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	08da      	lsrs	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3208      	adds	r2, #8
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	08da      	lsrs	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3208      	adds	r2, #8
 8005054:	6939      	ldr	r1, [r7, #16]
 8005056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	2203      	movs	r2, #3
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0203 	and.w	r2, r3, #3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8094 	beq.w	80051c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509c:	4b52      	ldr	r3, [pc, #328]	; (80051e8 <HAL_GPIO_Init+0x2c0>)
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	4a51      	ldr	r2, [pc, #324]	; (80051e8 <HAL_GPIO_Init+0x2c0>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6613      	str	r3, [r2, #96]	; 0x60
 80050a8:	4b4f      	ldr	r3, [pc, #316]	; (80051e8 <HAL_GPIO_Init+0x2c0>)
 80050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80050b4:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <HAL_GPIO_Init+0x2c4>)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	3302      	adds	r3, #2
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	220f      	movs	r2, #15
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050de:	d00d      	beq.n	80050fc <HAL_GPIO_Init+0x1d4>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a43      	ldr	r2, [pc, #268]	; (80051f0 <HAL_GPIO_Init+0x2c8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <HAL_GPIO_Init+0x1d0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <HAL_GPIO_Init+0x2cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d101      	bne.n	80050f4 <HAL_GPIO_Init+0x1cc>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e004      	b.n	80050fe <HAL_GPIO_Init+0x1d6>
 80050f4:	2307      	movs	r3, #7
 80050f6:	e002      	b.n	80050fe <HAL_GPIO_Init+0x1d6>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_GPIO_Init+0x1d6>
 80050fc:	2300      	movs	r3, #0
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	f002 0203 	and.w	r2, r2, #3
 8005104:	0092      	lsls	r2, r2, #2
 8005106:	4093      	lsls	r3, r2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800510e:	4937      	ldr	r1, [pc, #220]	; (80051ec <HAL_GPIO_Init+0x2c4>)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	3302      	adds	r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800511c:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	43db      	mvns	r3, r3
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005140:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005146:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43db      	mvns	r3, r3
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4013      	ands	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800516a:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	43db      	mvns	r3, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4013      	ands	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005194:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <HAL_GPIO_Init+0x2d0>)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3301      	adds	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f47f aeaf 	bne.w	8004f38 <HAL_GPIO_Init+0x10>
  }
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40010000 	.word	0x40010000
 80051f0:	48000400 	.word	0x48000400
 80051f4:	48000800 	.word	0x48000800
 80051f8:	40010400 	.word	0x40010400

080051fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800520a:	e0ab      	b.n	8005364 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800520c:	2201      	movs	r2, #1
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	4013      	ands	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 809e 	beq.w	800535e <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005222:	4a57      	ldr	r2, [pc, #348]	; (8005380 <HAL_GPIO_DeInit+0x184>)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	3302      	adds	r3, #2
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	220f      	movs	r2, #15
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4013      	ands	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800524a:	d00d      	beq.n	8005268 <HAL_GPIO_DeInit+0x6c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a4d      	ldr	r2, [pc, #308]	; (8005384 <HAL_GPIO_DeInit+0x188>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <HAL_GPIO_DeInit+0x68>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a4c      	ldr	r2, [pc, #304]	; (8005388 <HAL_GPIO_DeInit+0x18c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <HAL_GPIO_DeInit+0x64>
 800525c:	2302      	movs	r3, #2
 800525e:	e004      	b.n	800526a <HAL_GPIO_DeInit+0x6e>
 8005260:	2307      	movs	r3, #7
 8005262:	e002      	b.n	800526a <HAL_GPIO_DeInit+0x6e>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_GPIO_DeInit+0x6e>
 8005268:	2300      	movs	r3, #0
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	f002 0203 	and.w	r2, r2, #3
 8005270:	0092      	lsls	r2, r2, #2
 8005272:	4093      	lsls	r3, r2
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	429a      	cmp	r2, r3
 8005278:	d132      	bne.n	80052e0 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800527a:	4b44      	ldr	r3, [pc, #272]	; (800538c <HAL_GPIO_DeInit+0x190>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	4942      	ldr	r1, [pc, #264]	; (800538c <HAL_GPIO_DeInit+0x190>)
 8005284:	4013      	ands	r3, r2
 8005286:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_GPIO_DeInit+0x190>)
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	43db      	mvns	r3, r3
 8005290:	493e      	ldr	r1, [pc, #248]	; (800538c <HAL_GPIO_DeInit+0x190>)
 8005292:	4013      	ands	r3, r2
 8005294:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_GPIO_DeInit+0x190>)
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	43db      	mvns	r3, r3
 800529e:	493b      	ldr	r1, [pc, #236]	; (800538c <HAL_GPIO_DeInit+0x190>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <HAL_GPIO_DeInit+0x190>)
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	4937      	ldr	r1, [pc, #220]	; (800538c <HAL_GPIO_DeInit+0x190>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	220f      	movs	r2, #15
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80052c2:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <HAL_GPIO_DeInit+0x184>)
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	3302      	adds	r3, #2
 80052ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	43da      	mvns	r2, r3
 80052d2:	482b      	ldr	r0, [pc, #172]	; (8005380 <HAL_GPIO_DeInit+0x184>)
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	400a      	ands	r2, r1
 80052da:	3302      	adds	r3, #2
 80052dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2103      	movs	r1, #3
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	220f      	movs	r2, #15
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	08d2      	lsrs	r2, r2, #3
 8005314:	4019      	ands	r1, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3208      	adds	r2, #8
 800531a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	2103      	movs	r1, #3
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	2101      	movs	r1, #1
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	2103      	movs	r1, #3
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	401a      	ands	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	3301      	adds	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f af4d 	bne.w	800520c <HAL_GPIO_DeInit+0x10>
  }
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40010000 	.word	0x40010000
 8005384:	48000400 	.word	0x48000400
 8005388:	48000800 	.word	0x48000800
 800538c:	40010400 	.word	0x40010400

08005390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
 80053ac:	e001      	b.n	80053b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d0:	787b      	ldrb	r3, [r7, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053dc:	e002      	b.n	80053e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e081      	b.n	8005506 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb fec2 	bl	80011a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0201 	bic.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005440:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005450:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d107      	bne.n	800546a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	e006      	b.n	8005478 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005476:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d104      	bne.n	800548a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	ea42 0103 	orr.w	r1, r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	461a      	mov	r2, r3
 800551c:	460b      	mov	r3, r1
 800551e:	817b      	strh	r3, [r7, #10]
 8005520:	4613      	mov	r3, r2
 8005522:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	d153      	bne.n	80055d8 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d101      	bne.n	8005544 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	e04a      	b.n	80055da <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Master_Transmit_IT+0x42>
 800554e:	2302      	movs	r3, #2
 8005550:	e043      	b.n	80055da <HAL_I2C_Master_Transmit_IT+0xca>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2221      	movs	r2, #33	; 0x21
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2210      	movs	r2, #16
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	893a      	ldrh	r2, [r7, #8]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8005580:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	2bff      	cmp	r3, #255	; 0xff
 8005590:	d906      	bls.n	80055a0 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e007      	b.n	80055b0 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ae:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	8979      	ldrh	r1, [r7, #10]
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <HAL_I2C_Master_Transmit_IT+0xdc>)
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f001 fadc 	bl	8006b7c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055cc:	2101      	movs	r1, #1
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f001 fb02 	bl	8006bd8 <I2C_Enable_IRQ>

    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	ffff0000 	.word	0xffff0000
 80055e8:	080059f9 	.word	0x080059f9
 80055ec:	80002000 	.word	0x80002000

080055f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	460b      	mov	r3, r1
 80055fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	f040 80f1 	bne.w	80057f4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	d101      	bne.n	8005626 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
 8005624:	e0e7      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_I2C_IsDeviceReady+0x44>
 8005630:	2302      	movs	r3, #2
 8005632:	e0e0      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2224      	movs	r2, #36	; 0x24
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_I2C_IsDeviceReady+0x72>
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005658:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800565c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005660:	e004      	b.n	800566c <HAL_I2C_IsDeviceReady+0x7c>
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005668:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005672:	f7fe f83d 	bl	80036f0 <HAL_GetTick>
 8005676:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b20      	cmp	r3, #32
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056a4:	e034      	b.n	8005710 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d01a      	beq.n	80056e4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fe f81f 	bl	80036f0 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <HAL_I2C_IsDeviceReady+0xd4>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e088      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	bf0c      	ite	eq
 80056f2:	2301      	moveq	r3, #1
 80056f4:	2300      	movne	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b10      	cmp	r3, #16
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005710:	7ffb      	ldrb	r3, [r7, #31]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <HAL_I2C_IsDeviceReady+0x12c>
 8005716:	7fbb      	ldrb	r3, [r7, #30]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0c4      	beq.n	80056a6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b10      	cmp	r3, #16
 8005728:	d01a      	beq.n	8005760 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2200      	movs	r2, #0
 8005732:	2120      	movs	r1, #32
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f001 f9e0 	bl	8006afa <I2C_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e058      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2220      	movs	r2, #32
 800574a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e04a      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	2120      	movs	r1, #32
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f001 f9c5 	bl	8006afa <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e03d      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2220      	movs	r2, #32
 8005788:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d118      	bne.n	80057c4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2120      	movs	r1, #32
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 f9a4 	bl	8006afa <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e01c      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2220      	movs	r2, #32
 80057c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3301      	adds	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	f63f af3b 	bhi.w	800564a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	68f9      	ldr	r1, [r7, #12]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
  }
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_I2C_ER_IRQHandler+0x46>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	09db      	lsrs	r3, r3, #7
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	f043 0201 	orr.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005876:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	0a9b      	lsrs	r3, r3, #10
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_I2C_ER_IRQHandler+0x74>
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005894:	f043 0208 	orr.w	r2, r3, #8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	0a5b      	lsrs	r3, r3, #9
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_I2C_ER_IRQHandler+0xa2>
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	09db      	lsrs	r3, r3, #7
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f043 0202 	orr.w	r2, r3, #2
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 030b 	and.w	r3, r3, #11
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 ffce 	bl	8006888 <I2C_ITError>
  }
}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
 8005950:	4613      	mov	r3, r2
 8005952:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d2:	b2db      	uxtb	r3, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <I2C_Master_ISR_IT+0x1e>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e114      	b.n	8005c40 <I2C_Master_ISR_IT+0x248>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d013      	beq.n	8005a52 <I2C_Master_ISR_IT+0x5a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f001 f813 	bl	8006a76 <I2C_Flush_TXDR>
 8005a50:	e0e1      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	089b      	lsrs	r3, r3, #2
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d023      	beq.n	8005aa6 <I2C_Master_ISR_IT+0xae>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01d      	beq.n	8005aa6 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aa4:	e0b7      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d01e      	beq.n	8005af0 <I2C_Master_ISR_IT+0xf8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005aee:	e092      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05d      	beq.n	8005bb8 <I2C_Master_ISR_IT+0x1c0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	099b      	lsrs	r3, r3, #6
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d057      	beq.n	8005bb8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d040      	beq.n	8005b94 <I2C_Master_ISR_IT+0x19c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d13c      	bne.n	8005b94 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b26:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2bff      	cmp	r3, #255	; 0xff
 8005b30:	d90e      	bls.n	8005b50 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	8a79      	ldrh	r1, [r7, #18]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f001 f817 	bl	8006b7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b4e:	e032      	b.n	8005bb6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b62:	d00b      	beq.n	8005b7c <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	8a79      	ldrh	r1, [r7, #18]
 8005b70:	2000      	movs	r0, #0
 8005b72:	9000      	str	r0, [sp, #0]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f001 f801 	bl	8006b7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b7a:	e01c      	b.n	8005bb6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8a79      	ldrh	r1, [r7, #18]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fff5 	bl	8006b7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b92:	e010      	b.n	8005bb6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ba2:	d003      	beq.n	8005bac <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fba9 	bl	80062fc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005baa:	e034      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bac:	2140      	movs	r1, #64	; 0x40
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fe6a 	bl	8006888 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bb4:	e02f      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
 8005bb6:	e02e      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d028      	beq.n	8005c16 <I2C_Master_ISR_IT+0x21e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d022      	beq.n	8005c16 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d119      	bne.n	8005c0e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be8:	d015      	beq.n	8005c16 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf2:	d108      	bne.n	8005c06 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	e007      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fb78 	bl	80062fc <I2C_ITMasterSeqCplt>
 8005c0c:	e003      	b.n	8005c16 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c0e:	2140      	movs	r1, #64	; 0x40
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fe39 	bl	8006888 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <I2C_Master_ISR_IT+0x23e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c2e:	6979      	ldr	r1, [r7, #20]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 fbff 	bl	8006434 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <I2C_Slave_ISR_IT+0x24>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0ec      	b.n	8005e46 <I2C_Slave_ISR_IT+0x1fe>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <I2C_Slave_ISR_IT+0x4c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c8c:	6939      	ldr	r1, [r7, #16]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fc9a 	bl	80065c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	091b      	lsrs	r3, r3, #4
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d04d      	beq.n	8005d3c <I2C_Slave_ISR_IT+0xf4>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d047      	beq.n	8005d3c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d128      	bne.n	8005d08 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b28      	cmp	r3, #40	; 0x28
 8005cc0:	d108      	bne.n	8005cd4 <I2C_Slave_ISR_IT+0x8c>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc8:	d104      	bne.n	8005cd4 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cca:	6939      	ldr	r1, [r7, #16]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fd85 	bl	80067dc <I2C_ITListenCplt>
 8005cd2:	e032      	b.n	8005d3a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b29      	cmp	r3, #41	; 0x29
 8005cde:	d10e      	bne.n	8005cfe <I2C_Slave_ISR_IT+0xb6>
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ce6:	d00a      	beq.n	8005cfe <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2210      	movs	r2, #16
 8005cee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fec0 	bl	8006a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fb3d 	bl	8006376 <I2C_ITSlaveSeqCplt>
 8005cfc:	e01d      	b.n	8005d3a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2210      	movs	r2, #16
 8005d04:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d06:	e096      	b.n	8005e36 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2210      	movs	r2, #16
 8005d0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d14:	f043 0204 	orr.w	r2, r3, #4
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <I2C_Slave_ISR_IT+0xe4>
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d28:	f040 8085 	bne.w	8005e36 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d30:	4619      	mov	r1, r3
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fda8 	bl	8006888 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d38:	e07d      	b.n	8005e36 <I2C_Slave_ISR_IT+0x1ee>
 8005d3a:	e07c      	b.n	8005e36 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d030      	beq.n	8005daa <I2C_Slave_ISR_IT+0x162>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	089b      	lsrs	r3, r3, #2
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02a      	beq.n	8005daa <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d14f      	bne.n	8005e3a <I2C_Slave_ISR_IT+0x1f2>
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005da0:	d04b      	beq.n	8005e3a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fae7 	bl	8006376 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005da8:	e047      	b.n	8005e3a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	08db      	lsrs	r3, r3, #3
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dc2:	6939      	ldr	r1, [r7, #16]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fa15 	bl	80061f4 <I2C_ITAddrCplt>
 8005dca:	e037      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d031      	beq.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02b      	beq.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e1e:	e00d      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e26:	d002      	beq.n	8005e2e <I2C_Slave_ISR_IT+0x1e6>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 faa1 	bl	8006376 <I2C_ITSlaveSeqCplt>
 8005e34:	e002      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005e3a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b088      	sub	sp, #32
 8005e52:	af02      	add	r7, sp, #8
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <I2C_Master_ISR_DMA+0x1a>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e0e1      	b.n	800602c <I2C_Master_ISR_DMA+0x1de>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d017      	beq.n	8005eac <I2C_Master_ISR_DMA+0x5e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	f043 0204 	orr.w	r2, r3, #4
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e9c:	2120      	movs	r1, #32
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fe9a 	bl	8006bd8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fde6 	bl	8006a76 <I2C_Flush_TXDR>
 8005eaa:	e0ba      	b.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	09db      	lsrs	r3, r3, #7
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d072      	beq.n	8005f9e <I2C_Master_ISR_DMA+0x150>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	099b      	lsrs	r3, r3, #6
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d06c      	beq.n	8005f9e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d04e      	beq.n	8005f7c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2bff      	cmp	r3, #255	; 0xff
 8005ef4:	d906      	bls.n	8005f04 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	22ff      	movs	r2, #255	; 0xff
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e010      	b.n	8005f26 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f16:	d003      	beq.n	8005f20 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e002      	b.n	8005f26 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f24:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8a79      	ldrh	r1, [r7, #18]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fe21 	bl	8006b7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b22      	cmp	r3, #34	; 0x22
 8005f56:	d108      	bne.n	8005f6a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f68:	e05b      	b.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f7a:	e052      	b.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f8a:	d003      	beq.n	8005f94 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f9b5 	bl	80062fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f92:	e046      	b.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f94:	2140      	movs	r1, #64	; 0x40
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fc76 	bl	8006888 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f9c:	e041      	b.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d029      	beq.n	8005ffe <I2C_Master_ISR_DMA+0x1b0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	099b      	lsrs	r3, r3, #6
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d023      	beq.n	8005ffe <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d119      	bne.n	8005ff4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fce:	d027      	beq.n	8006020 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fd8:	d108      	bne.n	8005fec <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005fea:	e019      	b.n	8006020 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f985 	bl	80062fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005ff2:	e015      	b.n	8006020 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fc46 	bl	8006888 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ffc:	e010      	b.n	8006020 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fa0b 	bl	8006434 <I2C_ITMasterCplt>
 800601e:	e000      	b.n	8006022 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006020:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <I2C_Slave_ISR_DMA+0x24>
 8006054:	2302      	movs	r3, #2
 8006056:	e0c9      	b.n	80061ec <I2C_Slave_ISR_DMA+0x1b8>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <I2C_Slave_ISR_DMA+0x4c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 faa4 	bl	80065c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 809a 	beq.w	80061c2 <I2C_Slave_ISR_DMA+0x18e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 8093 	beq.w	80061c2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	0b9b      	lsrs	r3, r3, #14
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	0bdb      	lsrs	r3, r3, #15
 80060ac:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d07f      	beq.n	80061b4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	0bdb      	lsrs	r3, r3, #15
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80060d4:	2301      	movs	r3, #1
 80060d6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	0b9b      	lsrs	r3, r3, #14
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80060f8:	2301      	movs	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d128      	bne.n	8006154 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b28      	cmp	r3, #40	; 0x28
 800610c:	d108      	bne.n	8006120 <I2C_Slave_ISR_DMA+0xec>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006114:	d104      	bne.n	8006120 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fb5f 	bl	80067dc <I2C_ITListenCplt>
 800611e:	e048      	b.n	80061b2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b29      	cmp	r3, #41	; 0x29
 800612a:	d10e      	bne.n	800614a <I2C_Slave_ISR_DMA+0x116>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006132:	d00a      	beq.n	800614a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2210      	movs	r2, #16
 800613a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fc9a 	bl	8006a76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f917 	bl	8006376 <I2C_ITSlaveSeqCplt>
 8006148:	e033      	b.n	80061b2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2210      	movs	r2, #16
 8006150:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006152:	e034      	b.n	80061be <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2210      	movs	r2, #16
 800615a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006160:	f043 0204 	orr.w	r2, r3, #4
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <I2C_Slave_ISR_DMA+0x14a>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800617c:	d11f      	bne.n	80061be <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800617e:	7dfb      	ldrb	r3, [r7, #23]
 8006180:	2b21      	cmp	r3, #33	; 0x21
 8006182:	d002      	beq.n	800618a <I2C_Slave_ISR_DMA+0x156>
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	2b29      	cmp	r3, #41	; 0x29
 8006188:	d103      	bne.n	8006192 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2221      	movs	r2, #33	; 0x21
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
 8006190:	e008      	b.n	80061a4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	2b22      	cmp	r3, #34	; 0x22
 8006196:	d002      	beq.n	800619e <I2C_Slave_ISR_DMA+0x16a>
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	2b2a      	cmp	r3, #42	; 0x2a
 800619c:	d102      	bne.n	80061a4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2222      	movs	r2, #34	; 0x22
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a8:	4619      	mov	r1, r3
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fb6c 	bl	8006888 <I2C_ITError>
      if (treatdmanack == 1U)
 80061b0:	e005      	b.n	80061be <I2C_Slave_ISR_DMA+0x18a>
 80061b2:	e004      	b.n	80061be <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2210      	movs	r2, #16
 80061ba:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061bc:	e011      	b.n	80061e2 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80061be:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80061c0:	e00f      	b.n	80061e2 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <I2C_Slave_ISR_DMA+0x1ae>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	08db      	lsrs	r3, r3, #3
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f809 	bl	80061f4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006204:	b2db      	uxtb	r3, r3
 8006206:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800620a:	2b28      	cmp	r3, #40	; 0x28
 800620c:	d16a      	bne.n	80062e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	b29b      	uxth	r3, r3
 8006228:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800622c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006248:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d138      	bne.n	80062c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006252:	897b      	ldrh	r3, [r7, #10]
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	b29a      	uxth	r2, r3
 8006258:	89bb      	ldrh	r3, [r7, #12]
 800625a:	4053      	eors	r3, r2
 800625c:	b29b      	uxth	r3, r3
 800625e:	f003 0306 	and.w	r3, r3, #6
 8006262:	2b00      	cmp	r3, #0
 8006264:	d11c      	bne.n	80062a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006266:	897b      	ldrh	r3, [r7, #10]
 8006268:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006278:	2b02      	cmp	r3, #2
 800627a:	d13b      	bne.n	80062f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2208      	movs	r2, #8
 8006288:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006292:	89ba      	ldrh	r2, [r7, #12]
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fb53 	bl	8005944 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800629e:	e029      	b.n	80062f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80062a0:	893b      	ldrh	r3, [r7, #8]
 80062a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fcf9 	bl	8006ca0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062b6:	89ba      	ldrh	r2, [r7, #12]
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fb41 	bl	8005944 <HAL_I2C_AddrCallback>
}
 80062c2:	e017      	b.n	80062f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80062c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fce9 	bl	8006ca0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80062d6:	89ba      	ldrh	r2, [r7, #12]
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff fb31 	bl	8005944 <HAL_I2C_AddrCallback>
}
 80062e2:	e007      	b.n	80062f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2208      	movs	r2, #8
 80062ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b21      	cmp	r3, #33	; 0x21
 8006316:	d115      	bne.n	8006344 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2211      	movs	r2, #17
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800632c:	2101      	movs	r1, #1
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fcb6 	bl	8006ca0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fad9 	bl	80058f4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006342:	e014      	b.n	800636e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2212      	movs	r2, #18
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006358:	2102      	movs	r1, #2
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fca0 	bl	8006ca0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff facd 	bl	8005908 <HAL_I2C_MasterRxCpltCallback>
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	0b9b      	lsrs	r3, r3, #14
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e00d      	b.n	80063c8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	0bdb      	lsrs	r3, r3, #15
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063c6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b29      	cmp	r3, #41	; 0x29
 80063d2:	d112      	bne.n	80063fa <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2228      	movs	r2, #40	; 0x28
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2221      	movs	r2, #33	; 0x21
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063e2:	2101      	movs	r1, #1
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fc5b 	bl	8006ca0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fa92 	bl	800591c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063f8:	e017      	b.n	800642a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b2a      	cmp	r3, #42	; 0x2a
 8006404:	d111      	bne.n	800642a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2228      	movs	r2, #40	; 0x28
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2222      	movs	r2, #34	; 0x22
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006414:	2102      	movs	r1, #2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fc42 	bl	8006ca0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fa83 	bl	8005930 <HAL_I2C_SlaveRxCpltCallback>
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2220      	movs	r2, #32
 8006448:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b21      	cmp	r3, #33	; 0x21
 8006454:	d107      	bne.n	8006466 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006456:	2101      	movs	r1, #1
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc21 	bl	8006ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2211      	movs	r2, #17
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
 8006464:	e00c      	b.n	8006480 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b22      	cmp	r3, #34	; 0x22
 8006470:	d106      	bne.n	8006480 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006472:	2102      	movs	r1, #2
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc13 	bl	8006ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2212      	movs	r2, #18
 800647e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b4d      	ldr	r3, [pc, #308]	; (80065c0 <I2C_ITMasterCplt+0x18c>)
 800648c:	400b      	ands	r3, r1
 800648e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a4a      	ldr	r2, [pc, #296]	; (80065c4 <I2C_ITMasterCplt+0x190>)
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	091b      	lsrs	r3, r3, #4
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2210      	movs	r2, #16
 80064ae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b60      	cmp	r3, #96	; 0x60
 80064c6:	d10b      	bne.n	80064e0 <I2C_ITMasterCplt+0xac>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80064de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fac8 	bl	8006a76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b60      	cmp	r3, #96	; 0x60
 80064f6:	d002      	beq.n	80064fe <I2C_ITMasterCplt+0xca>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d006      	beq.n	800650c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f9bf 	bl	8006888 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800650a:	e054      	b.n	80065b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b21      	cmp	r3, #33	; 0x21
 8006516:	d124      	bne.n	8006562 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d10b      	bne.n	800654a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fa16 	bl	8005974 <HAL_I2C_MemTxCpltCallback>
}
 8006548:	e035      	b.n	80065b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff f9ca 	bl	80058f4 <HAL_I2C_MasterTxCpltCallback>
}
 8006560:	e029      	b.n	80065b6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b22      	cmp	r3, #34	; 0x22
 800656c:	d123      	bne.n	80065b6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d10b      	bne.n	80065a0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff f9f5 	bl	8005988 <HAL_I2C_MemRxCpltCallback>
}
 800659e:	e00a      	b.n	80065b6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff f9a9 	bl	8005908 <HAL_I2C_MasterRxCpltCallback>
}
 80065b6:	bf00      	nop
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	fe00e800 	.word	0xfe00e800
 80065c4:	ffff0000 	.word	0xffff0000

080065c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2220      	movs	r2, #32
 80065ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b21      	cmp	r3, #33	; 0x21
 80065f2:	d002      	beq.n	80065fa <I2C_ITSlaveCplt+0x32>
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b29      	cmp	r3, #41	; 0x29
 80065f8:	d108      	bne.n	800660c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80065fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fb4e 	bl	8006ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2221      	movs	r2, #33	; 0x21
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
 800660a:	e00d      	b.n	8006628 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b22      	cmp	r3, #34	; 0x22
 8006610:	d002      	beq.n	8006618 <I2C_ITSlaveCplt+0x50>
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	2b2a      	cmp	r3, #42	; 0x2a
 8006616:	d107      	bne.n	8006628 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006618:	f248 0102 	movw	r1, #32770	; 0x8002
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb3f 	bl	8006ca0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2222      	movs	r2, #34	; 0x22
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006636:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <I2C_ITSlaveCplt+0x20c>)
 8006644:	400b      	ands	r3, r1
 8006646:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fa14 	bl	8006a76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	0b9b      	lsrs	r3, r3, #14
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d013      	beq.n	8006682 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006668:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	2b00      	cmp	r3, #0
 8006670:	d020      	beq.n	80066b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006680:	e018      	b.n	80066b4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	0bdb      	lsrs	r3, r3, #15
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d012      	beq.n	80066b4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800669c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d020      	beq.n	8006702 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0304 	bic.w	r3, r3, #4
 80066c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006710:	f043 0204 	orr.w	r2, r3, #4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	2b00      	cmp	r3, #0
 800672c:	d010      	beq.n	8006750 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f8a7 	bl	8006888 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b28      	cmp	r3, #40	; 0x28
 8006744:	d141      	bne.n	80067ca <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006746:	6979      	ldr	r1, [r7, #20]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f847 	bl	80067dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800674e:	e03c      	b.n	80067ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006758:	d014      	beq.n	8006784 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff fe0b 	bl	8006376 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a1d      	ldr	r2, [pc, #116]	; (80067d8 <I2C_ITSlaveCplt+0x210>)
 8006764:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff f8ef 	bl	8005960 <HAL_I2C_ListenCpltCallback>
}
 8006782:	e022      	b.n	80067ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b22      	cmp	r3, #34	; 0x22
 800678e:	d10e      	bne.n	80067ae <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff f8c2 	bl	8005930 <HAL_I2C_SlaveRxCpltCallback>
}
 80067ac:	e00d      	b.n	80067ca <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff f8a9 	bl	800591c <HAL_I2C_SlaveTxCpltCallback>
}
 80067ca:	bf00      	nop
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	fe00e800 	.word	0xfe00e800
 80067d8:	ffff0000 	.word	0xffff0000

080067dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a26      	ldr	r2, [pc, #152]	; (8006884 <I2C_ITListenCplt+0xa8>)
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d022      	beq.n	800685a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	2b00      	cmp	r3, #0
 8006832:	d012      	beq.n	800685a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	f043 0204 	orr.w	r2, r3, #4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800685a:	f248 0103 	movw	r1, #32771	; 0x8003
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa1e 	bl	8006ca0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2210      	movs	r2, #16
 800686a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff f873 	bl	8005960 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	ffff0000 	.word	0xffff0000

08006888 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a5d      	ldr	r2, [pc, #372]	; (8006a1c <I2C_ITError+0x194>)
 80068a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b28      	cmp	r3, #40	; 0x28
 80068be:	d005      	beq.n	80068cc <I2C_ITError+0x44>
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2b29      	cmp	r3, #41	; 0x29
 80068c4:	d002      	beq.n	80068cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b2a      	cmp	r3, #42	; 0x2a
 80068ca:	d10b      	bne.n	80068e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80068cc:	2103      	movs	r1, #3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f9e6 	bl	8006ca0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2228      	movs	r2, #40	; 0x28
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a50      	ldr	r2, [pc, #320]	; (8006a20 <I2C_ITError+0x198>)
 80068e0:	635a      	str	r2, [r3, #52]	; 0x34
 80068e2:	e011      	b.n	8006908 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80068e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9d9 	bl	8006ca0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b60      	cmp	r3, #96	; 0x60
 80068f8:	d003      	beq.n	8006902 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d039      	beq.n	800698a <I2C_ITError+0x102>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b11      	cmp	r3, #17
 800691a:	d002      	beq.n	8006922 <I2C_ITError+0x9a>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b21      	cmp	r3, #33	; 0x21
 8006920:	d133      	bne.n	800698a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800692c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006930:	d107      	bne.n	8006942 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006940:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fae0 	bl	8004f0c <HAL_DMA_GetState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d017      	beq.n	8006982 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	4a33      	ldr	r2, [pc, #204]	; (8006a24 <I2C_ITError+0x19c>)
 8006958:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe f9e0 	bl	8004d2c <HAL_DMA_Abort_IT>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04d      	beq.n	8006a0e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006980:	e045      	b.n	8006a0e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f850 	bl	8006a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006988:	e041      	b.n	8006a0e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d039      	beq.n	8006a06 <I2C_ITError+0x17e>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b12      	cmp	r3, #18
 8006996:	d002      	beq.n	800699e <I2C_ITError+0x116>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b22      	cmp	r3, #34	; 0x22
 800699c:	d133      	bne.n	8006a06 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ac:	d107      	bne.n	80069be <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe faa2 	bl	8004f0c <HAL_DMA_GetState>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d017      	beq.n	80069fe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	4a14      	ldr	r2, [pc, #80]	; (8006a24 <I2C_ITError+0x19c>)
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f9a2 	bl	8004d2c <HAL_DMA_Abort_IT>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d011      	beq.n	8006a12 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069fc:	e009      	b.n	8006a12 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f812 	bl	8006a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a04:	e005      	b.n	8006a12 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f80e 	bl	8006a28 <I2C_TreatErrorCallback>
  }
}
 8006a0c:	e002      	b.n	8006a14 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a12:	bf00      	nop
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	ffff0000 	.word	0xffff0000
 8006a20:	08005c49 	.word	0x08005c49
 8006a24:	08006abf 	.word	0x08006abf

08006a28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b60      	cmp	r3, #96	; 0x60
 8006a3a:	d10e      	bne.n	8006a5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fe ffac 	bl	80059b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a58:	e009      	b.n	8006a6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe ff97 	bl	800599c <HAL_I2C_ErrorCallback>
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d103      	bne.n	8006a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d007      	beq.n	8006ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	619a      	str	r2, [r3, #24]
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	2200      	movs	r2, #0
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	2200      	movs	r2, #0
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff ff9b 	bl	8006a28 <I2C_TreatErrorCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b0a:	e022      	b.n	8006b52 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d01e      	beq.n	8006b52 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b14:	f7fc fdec 	bl	80036f0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d113      	bne.n	8006b52 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e00f      	b.n	8006b72 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d0cd      	beq.n	8006b0c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	817b      	strh	r3, [r7, #10]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	0d5b      	lsrs	r3, r3, #21
 8006b98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <I2C_TransferConfig+0x58>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	ea02 0103 	and.w	r1, r2, r3
 8006ba6:	897b      	ldrh	r3, [r7, #10]
 8006ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bac:	7a7b      	ldrb	r3, [r7, #9]
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	03ff63ff 	.word	0x03ff63ff

08006bd8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <I2C_Enable_IRQ+0xc0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006bf6:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <I2C_Enable_IRQ+0xc4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d11d      	bne.n	8006c38 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da03      	bge.n	8006c0c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c0c:	887b      	ldrh	r3, [r7, #2]
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d103      	bne.n	8006c1a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006c18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c1a:	887b      	ldrh	r3, [r7, #2]
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d103      	bne.n	8006c28 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d125      	bne.n	8006c7a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c34:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c36:	e020      	b.n	8006c7a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da03      	bge.n	8006c48 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c46:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c48:	887b      	ldrh	r3, [r7, #2]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006c58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c5a:	887b      	ldrh	r3, [r7, #2]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006c6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c6c:	887b      	ldrh	r3, [r7, #2]
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d103      	bne.n	8006c7a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	08005e4f 	.word	0x08005e4f
 8006c9c:	08006035 	.word	0x08006035

08006ca0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006cc0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cce:	2b28      	cmp	r3, #40	; 0x28
 8006cd0:	d003      	beq.n	8006cda <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006cd8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006cda:	887b      	ldrh	r3, [r7, #2]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00f      	beq.n	8006d04 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006cea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cf8:	2b28      	cmp	r3, #40	; 0x28
 8006cfa:	d003      	beq.n	8006d04 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006d02:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	da03      	bge.n	8006d14 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006d12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d14:	887b      	ldrh	r3, [r7, #2]
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d103      	bne.n	8006d22 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d22:	887b      	ldrh	r3, [r7, #2]
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d103      	bne.n	8006d30 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f043 0320 	orr.w	r3, r3, #32
 8006d2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	2b40      	cmp	r3, #64	; 0x40
 8006d34:	d103      	bne.n	8006d3e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	43da      	mvns	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	400a      	ands	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d138      	bne.n	8006de4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e032      	b.n	8006de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2224      	movs	r2, #36	; 0x24
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6819      	ldr	r1, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e000      	b.n	8006de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d139      	bne.n	8006e7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e033      	b.n	8006e7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2224      	movs	r2, #36	; 0x24
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e7c:	2302      	movs	r3, #2
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9a:	6013      	str	r3, [r2, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40007000 	.word	0x40007000

08006eac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40007000 	.word	0x40007000

08006ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed6:	d130      	bne.n	8006f3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ed8:	4b23      	ldr	r3, [pc, #140]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee4:	d038      	beq.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ee6:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ef4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ef6:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2232      	movs	r2, #50	; 0x32
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	0c9b      	lsrs	r3, r3, #18
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f0c:	e002      	b.n	8006f14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f20:	d102      	bne.n	8006f28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f2      	bne.n	8006f0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d110      	bne.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e00f      	b.n	8006f5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f46:	d007      	beq.n	8006f58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f48:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f50:	4a05      	ldr	r2, [pc, #20]	; (8006f68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40007000 	.word	0x40007000
 8006f6c:	20000000 	.word	0x20000000
 8006f70:	431bde83 	.word	0x431bde83

08006f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f000 bc11 	b.w	80077aa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f88:	4ba0      	ldr	r3, [pc, #640]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 030c 	and.w	r3, r3, #12
 8006f90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f92:	4b9e      	ldr	r3, [pc, #632]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80e4 	beq.w	8007172 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x4c>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b0c      	cmp	r3, #12
 8006fb4:	f040 808b 	bne.w	80070ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	f040 8087 	bne.w	80070ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fc0:	4b92      	ldr	r3, [pc, #584]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x64>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e3e8      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	4b8b      	ldr	r3, [pc, #556]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x7e>
 8006fe8:	4b88      	ldr	r3, [pc, #544]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ff0:	e005      	b.n	8006ffe <HAL_RCC_OscConfig+0x8a>
 8006ff2:	4b86      	ldr	r3, [pc, #536]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8006ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d223      	bcs.n	800704a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fdac 	bl	8007b64 <RCC_SetFlashLatencyFromMSIRange>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e3c9      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007016:	4b7d      	ldr	r3, [pc, #500]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a7c      	ldr	r2, [pc, #496]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800701c:	f043 0308 	orr.w	r3, r3, #8
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	4b7a      	ldr	r3, [pc, #488]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	4977      	ldr	r1, [pc, #476]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007030:	4313      	orrs	r3, r2
 8007032:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007034:	4b75      	ldr	r3, [pc, #468]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	4972      	ldr	r1, [pc, #456]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007044:	4313      	orrs	r3, r2
 8007046:	604b      	str	r3, [r1, #4]
 8007048:	e025      	b.n	8007096 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800704a:	4b70      	ldr	r3, [pc, #448]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6f      	ldr	r2, [pc, #444]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	4b6d      	ldr	r3, [pc, #436]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	496a      	ldr	r1, [pc, #424]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007068:	4b68      	ldr	r3, [pc, #416]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	4965      	ldr	r1, [pc, #404]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fd6c 	bl	8007b64 <RCC_SetFlashLatencyFromMSIRange>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e389      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007096:	f000 fc6f 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 800709a:	4602      	mov	r2, r0
 800709c:	4b5b      	ldr	r3, [pc, #364]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	495a      	ldr	r1, [pc, #360]	; (8007210 <HAL_RCC_OscConfig+0x29c>)
 80070a8:	5ccb      	ldrb	r3, [r1, r3]
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	fa22 f303 	lsr.w	r3, r2, r3
 80070b2:	4a58      	ldr	r2, [pc, #352]	; (8007214 <HAL_RCC_OscConfig+0x2a0>)
 80070b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070b6:	4b58      	ldr	r3, [pc, #352]	; (8007218 <HAL_RCC_OscConfig+0x2a4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fa fce4 	bl	8001a88 <HAL_InitTick>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d052      	beq.n	8007170 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	e36d      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d032      	beq.n	800713c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070d6:	4b4d      	ldr	r3, [pc, #308]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a4c      	ldr	r2, [pc, #304]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070e2:	f7fc fb05 	bl	80036f0 <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070ea:	f7fc fb01 	bl	80036f0 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e356      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070fc:	4b43      	ldr	r3, [pc, #268]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0f0      	beq.n	80070ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007108:	4b40      	ldr	r3, [pc, #256]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a3f      	ldr	r2, [pc, #252]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800710e:	f043 0308 	orr.w	r3, r3, #8
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	4b3d      	ldr	r3, [pc, #244]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	493a      	ldr	r1, [pc, #232]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007126:	4b39      	ldr	r3, [pc, #228]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	4935      	ldr	r1, [pc, #212]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007136:	4313      	orrs	r3, r2
 8007138:	604b      	str	r3, [r1, #4]
 800713a:	e01a      	b.n	8007172 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800713c:	4b33      	ldr	r3, [pc, #204]	; (800720c <HAL_RCC_OscConfig+0x298>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a32      	ldr	r2, [pc, #200]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007148:	f7fc fad2 	bl	80036f0 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007150:	f7fc face 	bl	80036f0 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e323      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007162:	4b2a      	ldr	r3, [pc, #168]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x1dc>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d073      	beq.n	8007266 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d005      	beq.n	8007190 <HAL_RCC_OscConfig+0x21c>
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b0c      	cmp	r3, #12
 8007188:	d10e      	bne.n	80071a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d10b      	bne.n	80071a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <HAL_RCC_OscConfig+0x298>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d063      	beq.n	8007264 <HAL_RCC_OscConfig+0x2f0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d15f      	bne.n	8007264 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e300      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b0:	d106      	bne.n	80071c0 <HAL_RCC_OscConfig+0x24c>
 80071b2:	4b16      	ldr	r3, [pc, #88]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a15      	ldr	r2, [pc, #84]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e01d      	b.n	80071fc <HAL_RCC_OscConfig+0x288>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071c8:	d10c      	bne.n	80071e4 <HAL_RCC_OscConfig+0x270>
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a0f      	ldr	r2, [pc, #60]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	4b0d      	ldr	r3, [pc, #52]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a0c      	ldr	r2, [pc, #48]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	e00b      	b.n	80071fc <HAL_RCC_OscConfig+0x288>
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a05      	ldr	r2, [pc, #20]	; (800720c <HAL_RCC_OscConfig+0x298>)
 80071f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01b      	beq.n	800723c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fc fa74 	bl	80036f0 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800720a:	e010      	b.n	800722e <HAL_RCC_OscConfig+0x2ba>
 800720c:	40021000 	.word	0x40021000
 8007210:	0800b4e0 	.word	0x0800b4e0
 8007214:	20000000 	.word	0x20000000
 8007218:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800721c:	f7fc fa68 	bl	80036f0 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	; 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e2bd      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800722e:	4baf      	ldr	r3, [pc, #700]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0f0      	beq.n	800721c <HAL_RCC_OscConfig+0x2a8>
 800723a:	e014      	b.n	8007266 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723c:	f7fc fa58 	bl	80036f0 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007244:	f7fc fa54 	bl	80036f0 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b64      	cmp	r3, #100	; 0x64
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e2a9      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007256:	4ba5      	ldr	r3, [pc, #660]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0x2d0>
 8007262:	e000      	b.n	8007266 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d060      	beq.n	8007334 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d005      	beq.n	8007284 <HAL_RCC_OscConfig+0x310>
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b0c      	cmp	r3, #12
 800727c:	d119      	bne.n	80072b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d116      	bne.n	80072b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007284:	4b99      	ldr	r3, [pc, #612]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_RCC_OscConfig+0x328>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e286      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729c:	4b93      	ldr	r3, [pc, #588]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	061b      	lsls	r3, r3, #24
 80072aa:	4990      	ldr	r1, [pc, #576]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b0:	e040      	b.n	8007334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d023      	beq.n	8007302 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072ba:	4b8c      	ldr	r3, [pc, #560]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a8b      	ldr	r2, [pc, #556]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80072c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c6:	f7fc fa13 	bl	80036f0 <HAL_GetTick>
 80072ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072cc:	e008      	b.n	80072e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ce:	f7fc fa0f 	bl	80036f0 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e264      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072e0:	4b82      	ldr	r3, [pc, #520]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0f0      	beq.n	80072ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ec:	4b7f      	ldr	r3, [pc, #508]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	061b      	lsls	r3, r3, #24
 80072fa:	497c      	ldr	r1, [pc, #496]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	604b      	str	r3, [r1, #4]
 8007300:	e018      	b.n	8007334 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007302:	4b7a      	ldr	r3, [pc, #488]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a79      	ldr	r2, [pc, #484]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800730c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f7fc f9ef 	bl	80036f0 <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007316:	f7fc f9eb 	bl	80036f0 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e240      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007328:	4b70      	ldr	r3, [pc, #448]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f0      	bne.n	8007316 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d03c      	beq.n	80073ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01c      	beq.n	8007382 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007348:	4b68      	ldr	r3, [pc, #416]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800734a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800734e:	4a67      	ldr	r2, [pc, #412]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007350:	f043 0301 	orr.w	r3, r3, #1
 8007354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007358:	f7fc f9ca 	bl	80036f0 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007360:	f7fc f9c6 	bl	80036f0 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e21b      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007372:	4b5e      	ldr	r3, [pc, #376]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ef      	beq.n	8007360 <HAL_RCC_OscConfig+0x3ec>
 8007380:	e01b      	b.n	80073ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007382:	4b5a      	ldr	r3, [pc, #360]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007388:	4a58      	ldr	r2, [pc, #352]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007392:	f7fc f9ad 	bl	80036f0 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007398:	e008      	b.n	80073ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800739a:	f7fc f9a9 	bl	80036f0 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e1fe      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073ac:	4b4f      	ldr	r3, [pc, #316]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80073ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1ef      	bne.n	800739a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 80a6 	beq.w	8007514 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c8:	2300      	movs	r3, #0
 80073ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073cc:	4b47      	ldr	r3, [pc, #284]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10d      	bne.n	80073f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d8:	4b44      	ldr	r3, [pc, #272]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	4a43      	ldr	r2, [pc, #268]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80073de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e2:	6593      	str	r3, [r2, #88]	; 0x58
 80073e4:	4b41      	ldr	r3, [pc, #260]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073f0:	2301      	movs	r3, #1
 80073f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f4:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <HAL_RCC_OscConfig+0x57c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d118      	bne.n	8007432 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007400:	4b3b      	ldr	r3, [pc, #236]	; (80074f0 <HAL_RCC_OscConfig+0x57c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a3a      	ldr	r2, [pc, #232]	; (80074f0 <HAL_RCC_OscConfig+0x57c>)
 8007406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800740a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800740c:	f7fc f970 	bl	80036f0 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007414:	f7fc f96c 	bl	80036f0 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e1c1      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007426:	4b32      	ldr	r3, [pc, #200]	; (80074f0 <HAL_RCC_OscConfig+0x57c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d108      	bne.n	800744c <HAL_RCC_OscConfig+0x4d8>
 800743a:	4b2c      	ldr	r3, [pc, #176]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007442:	f043 0301 	orr.w	r3, r3, #1
 8007446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800744a:	e024      	b.n	8007496 <HAL_RCC_OscConfig+0x522>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b05      	cmp	r3, #5
 8007452:	d110      	bne.n	8007476 <HAL_RCC_OscConfig+0x502>
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745a:	4a24      	ldr	r2, [pc, #144]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800745c:	f043 0304 	orr.w	r3, r3, #4
 8007460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	4a20      	ldr	r2, [pc, #128]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007474:	e00f      	b.n	8007496 <HAL_RCC_OscConfig+0x522>
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747c:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007486:	4b19      	ldr	r3, [pc, #100]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748c:	4a17      	ldr	r2, [pc, #92]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 800748e:	f023 0304 	bic.w	r3, r3, #4
 8007492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749e:	f7fc f927 	bl	80036f0 <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a4:	e00a      	b.n	80074bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f7fc f923 	bl	80036f0 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e176      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <HAL_RCC_OscConfig+0x578>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0ed      	beq.n	80074a6 <HAL_RCC_OscConfig+0x532>
 80074ca:	e01a      	b.n	8007502 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074cc:	f7fc f910 	bl	80036f0 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074d2:	e00f      	b.n	80074f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d4:	f7fc f90c 	bl	80036f0 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d906      	bls.n	80074f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e15f      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
 80074ea:	bf00      	nop
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074f4:	4baa      	ldr	r3, [pc, #680]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e8      	bne.n	80074d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007502:	7ffb      	ldrb	r3, [r7, #31]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d105      	bne.n	8007514 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007508:	4ba5      	ldr	r3, [pc, #660]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800750a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750c:	4aa4      	ldr	r2, [pc, #656]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800750e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007512:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d03c      	beq.n	800759a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01c      	beq.n	8007562 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007528:	4b9d      	ldr	r3, [pc, #628]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800752a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800752e:	4a9c      	ldr	r2, [pc, #624]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7fc f8da 	bl	80036f0 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007540:	f7fc f8d6 	bl	80036f0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e12b      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007552:	4b93      	ldr	r3, [pc, #588]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ef      	beq.n	8007540 <HAL_RCC_OscConfig+0x5cc>
 8007560:	e01b      	b.n	800759a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007562:	4b8f      	ldr	r3, [pc, #572]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007568:	4a8d      	ldr	r2, [pc, #564]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007572:	f7fc f8bd 	bl	80036f0 <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800757a:	f7fc f8b9 	bl	80036f0 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e10e      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800758c:	4b84      	ldr	r3, [pc, #528]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800758e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1ef      	bne.n	800757a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8102 	beq.w	80077a8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	f040 80c5 	bne.w	8007738 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80075ae:	4b7c      	ldr	r3, [pc, #496]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f003 0203 	and.w	r2, r3, #3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	429a      	cmp	r2, r3
 80075c0:	d12c      	bne.n	800761c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	3b01      	subs	r3, #1
 80075ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d123      	bne.n	800761c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d11b      	bne.n	800761c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d113      	bne.n	800761c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	3b01      	subs	r3, #1
 8007602:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007604:	429a      	cmp	r2, r3
 8007606:	d109      	bne.n	800761c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	3b01      	subs	r3, #1
 8007616:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007618:	429a      	cmp	r2, r3
 800761a:	d067      	beq.n	80076ec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b0c      	cmp	r3, #12
 8007620:	d062      	beq.n	80076e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007622:	4b5f      	ldr	r3, [pc, #380]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e0bb      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007632:	4b5b      	ldr	r3, [pc, #364]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a5a      	ldr	r2, [pc, #360]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800763c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800763e:	f7fc f857 	bl	80036f0 <HAL_GetTick>
 8007642:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007644:	e008      	b.n	8007658 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007646:	f7fc f853 	bl	80036f0 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e0a8      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007658:	4b51      	ldr	r3, [pc, #324]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f0      	bne.n	8007646 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007664:	4b4e      	ldr	r3, [pc, #312]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	4b4e      	ldr	r3, [pc, #312]	; (80077a4 <HAL_RCC_OscConfig+0x830>)
 800766a:	4013      	ands	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007674:	3a01      	subs	r2, #1
 8007676:	0112      	lsls	r2, r2, #4
 8007678:	4311      	orrs	r1, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800767e:	0212      	lsls	r2, r2, #8
 8007680:	4311      	orrs	r1, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007686:	0852      	lsrs	r2, r2, #1
 8007688:	3a01      	subs	r2, #1
 800768a:	0552      	lsls	r2, r2, #21
 800768c:	4311      	orrs	r1, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007692:	0852      	lsrs	r2, r2, #1
 8007694:	3a01      	subs	r2, #1
 8007696:	0652      	lsls	r2, r2, #25
 8007698:	4311      	orrs	r1, r2
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800769e:	06d2      	lsls	r2, r2, #27
 80076a0:	430a      	orrs	r2, r1
 80076a2:	493f      	ldr	r1, [pc, #252]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076a8:	4b3d      	ldr	r3, [pc, #244]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076b4:	4b3a      	ldr	r3, [pc, #232]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4a39      	ldr	r2, [pc, #228]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076c0:	f7fc f816 	bl	80036f0 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c8:	f7fc f812 	bl	80036f0 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e067      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076da:	4b31      	ldr	r3, [pc, #196]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076e6:	e05f      	b.n	80077a8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e05e      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ec:	4b2c      	ldr	r3, [pc, #176]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d157      	bne.n	80077a8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80076f8:	4b29      	ldr	r3, [pc, #164]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 80076fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007702:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007704:	4b26      	ldr	r3, [pc, #152]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a25      	ldr	r2, [pc, #148]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800770a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800770e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007710:	f7fb ffee 	bl	80036f0 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007718:	f7fb ffea 	bl	80036f0 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e03f      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772a:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0f0      	beq.n	8007718 <HAL_RCC_OscConfig+0x7a4>
 8007736:	e037      	b.n	80077a8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b0c      	cmp	r3, #12
 800773c:	d02d      	beq.n	800779a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800773e:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007748:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800774a:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	4a0e      	ldr	r2, [pc, #56]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 8007768:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800776c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007770:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007772:	f7fb ffbd 	bl	80036f0 <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800777a:	f7fb ffb9 	bl	80036f0 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e00e      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <HAL_RCC_OscConfig+0x82c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <HAL_RCC_OscConfig+0x806>
 8007798:	e006      	b.n	80077a8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e005      	b.n	80077aa <HAL_RCC_OscConfig+0x836>
 800779e:	bf00      	nop
 80077a0:	40021000 	.word	0x40021000
 80077a4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop

080077b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0c8      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077c8:	4b66      	ldr	r3, [pc, #408]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d910      	bls.n	80077f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d6:	4b63      	ldr	r3, [pc, #396]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f023 0207 	bic.w	r2, r3, #7
 80077de:	4961      	ldr	r1, [pc, #388]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e6:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d001      	beq.n	80077f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e0b0      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d04c      	beq.n	800789e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b03      	cmp	r3, #3
 800780a:	d107      	bne.n	800781c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800780c:	4b56      	ldr	r3, [pc, #344]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d121      	bne.n	800785c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e09e      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d107      	bne.n	8007834 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007824:	4b50      	ldr	r3, [pc, #320]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d115      	bne.n	800785c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e092      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d107      	bne.n	800784c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800783c:	4b4a      	ldr	r3, [pc, #296]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e086      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800784c:	4b46      	ldr	r3, [pc, #280]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e07e      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800785c:	4b42      	ldr	r3, [pc, #264]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f023 0203 	bic.w	r2, r3, #3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	493f      	ldr	r1, [pc, #252]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 800786a:	4313      	orrs	r3, r2
 800786c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786e:	f7fb ff3f 	bl	80036f0 <HAL_GetTick>
 8007872:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007874:	e00a      	b.n	800788c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007876:	f7fb ff3b 	bl	80036f0 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	f241 3288 	movw	r2, #5000	; 0x1388
 8007884:	4293      	cmp	r3, r2
 8007886:	d901      	bls.n	800788c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e066      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 020c 	and.w	r2, r3, #12
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	429a      	cmp	r2, r3
 800789c:	d1eb      	bne.n	8007876 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078aa:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	492c      	ldr	r1, [pc, #176]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078bc:	4b29      	ldr	r3, [pc, #164]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d210      	bcs.n	80078ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ca:	4b26      	ldr	r3, [pc, #152]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f023 0207 	bic.w	r2, r3, #7
 80078d2:	4924      	ldr	r1, [pc, #144]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078da:	4b22      	ldr	r3, [pc, #136]	; (8007964 <HAL_RCC_ClockConfig+0x1b0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d001      	beq.n	80078ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e036      	b.n	800795a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f8:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4918      	ldr	r1, [pc, #96]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 8007906:	4313      	orrs	r3, r2
 8007908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4910      	ldr	r1, [pc, #64]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800792a:	f000 f825 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 800792e:	4602      	mov	r2, r0
 8007930:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <HAL_RCC_ClockConfig+0x1b4>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	490c      	ldr	r1, [pc, #48]	; (800796c <HAL_RCC_ClockConfig+0x1b8>)
 800793c:	5ccb      	ldrb	r3, [r1, r3]
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x1bc>)
 8007948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x1c0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fa f89a 	bl	8001a88 <HAL_InitTick>
 8007954:	4603      	mov	r3, r0
 8007956:	72fb      	strb	r3, [r7, #11]

  return status;
 8007958:	7afb      	ldrb	r3, [r7, #11]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40022000 	.word	0x40022000
 8007968:	40021000 	.word	0x40021000
 800796c:	0800b4e0 	.word	0x0800b4e0
 8007970:	20000000 	.word	0x20000000
 8007974:	20000004 	.word	0x20000004

08007978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	b089      	sub	sp, #36	; 0x24
 800797c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007986:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 030c 	and.w	r3, r3, #12
 800798e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007990:	4b3b      	ldr	r3, [pc, #236]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0303 	and.w	r3, r3, #3
 8007998:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_RCC_GetSysClockFreq+0x34>
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b0c      	cmp	r3, #12
 80079a4:	d121      	bne.n	80079ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d11e      	bne.n	80079ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80079ac:	4b34      	ldr	r3, [pc, #208]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d107      	bne.n	80079c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80079b8:	4b31      	ldr	r3, [pc, #196]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	e005      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80079c8:	4b2d      	ldr	r3, [pc, #180]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	091b      	lsrs	r3, r3, #4
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80079d4:	4a2b      	ldr	r2, [pc, #172]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x10c>)
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079e8:	e00a      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d102      	bne.n	80079f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x110>)
 80079f2:	61bb      	str	r3, [r7, #24]
 80079f4:	e004      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d101      	bne.n	8007a00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079fc:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x114>)
 80079fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b0c      	cmp	r3, #12
 8007a04:	d134      	bne.n	8007a70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a06:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d003      	beq.n	8007a1e <HAL_RCC_GetSysClockFreq+0xa6>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d003      	beq.n	8007a24 <HAL_RCC_GetSysClockFreq+0xac>
 8007a1c:	e005      	b.n	8007a2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x110>)
 8007a20:	617b      	str	r3, [r7, #20]
      break;
 8007a22:	e005      	b.n	8007a30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007a24:	4b19      	ldr	r3, [pc, #100]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x114>)
 8007a26:	617b      	str	r3, [r7, #20]
      break;
 8007a28:	e002      	b.n	8007a30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	617b      	str	r3, [r7, #20]
      break;
 8007a2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a30:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	091b      	lsrs	r3, r3, #4
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007a3e:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	fb02 f203 	mul.w	r2, r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	0e5b      	lsrs	r3, r3, #25
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	3301      	adds	r3, #1
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a70:	69bb      	ldr	r3, [r7, #24]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3724      	adds	r7, #36	; 0x24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40021000 	.word	0x40021000
 8007a84:	0800b4f8 	.word	0x0800b4f8
 8007a88:	00f42400 	.word	0x00f42400
 8007a8c:	00989680 	.word	0x00989680

08007a90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a94:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000000 	.word	0x20000000

08007aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007aac:	f7ff fff0 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4904      	ldr	r1, [pc, #16]	; (8007ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40021000 	.word	0x40021000
 8007ad0:	0800b4f0 	.word	0x0800b4f0

08007ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ad8:	f7ff ffda 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007adc:	4602      	mov	r2, r0
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	0adb      	lsrs	r3, r3, #11
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4904      	ldr	r1, [pc, #16]	; (8007afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aea:	5ccb      	ldrb	r3, [r1, r3]
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40021000 	.word	0x40021000
 8007afc:	0800b4f0 	.word	0x0800b4f0

08007b00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	220f      	movs	r2, #15
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <HAL_RCC_GetClockConfig+0x5c>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0203 	and.w	r2, r3, #3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <HAL_RCC_GetClockConfig+0x5c>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007b28:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <HAL_RCC_GetClockConfig+0x5c>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <HAL_RCC_GetClockConfig+0x5c>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	08db      	lsrs	r3, r3, #3
 8007b3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007b42:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <HAL_RCC_GetClockConfig+0x60>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0207 	and.w	r2, r3, #7
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	601a      	str	r2, [r3, #0]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	40022000 	.word	0x40022000

08007b64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b70:	4b2a      	ldr	r3, [pc, #168]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b7c:	f7ff f996 	bl	8006eac <HAL_PWREx_GetVoltageRange>
 8007b80:	6178      	str	r0, [r7, #20]
 8007b82:	e014      	b.n	8007bae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b84:	4b25      	ldr	r3, [pc, #148]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8007b90:	4b22      	ldr	r3, [pc, #136]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b9c:	f7ff f986 	bl	8006eac <HAL_PWREx_GetVoltageRange>
 8007ba0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ba2:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb4:	d10b      	bne.n	8007bce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d919      	bls.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2ba0      	cmp	r3, #160	; 0xa0
 8007bc0:	d902      	bls.n	8007bc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	e013      	b.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bc8:	2301      	movs	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	e010      	b.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d902      	bls.n	8007bda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	e00a      	b.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b80      	cmp	r3, #128	; 0x80
 8007bde:	d102      	bne.n	8007be6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007be0:	2302      	movs	r3, #2
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	e004      	b.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b70      	cmp	r3, #112	; 0x70
 8007bea:	d101      	bne.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bec:	2301      	movs	r3, #1
 8007bee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f023 0207 	bic.w	r2, r3, #7
 8007bf8:	4909      	ldr	r1, [pc, #36]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d001      	beq.n	8007c12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e000      	b.n	8007c14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	40022000 	.word	0x40022000

08007c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c30:	2300      	movs	r3, #0
 8007c32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d031      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c48:	d01a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007c4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c4e:	d814      	bhi.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d009      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007c54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c58:	d10f      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007c5a:	4bac      	ldr	r3, [pc, #688]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	4aab      	ldr	r2, [pc, #684]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c66:	e00c      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f9cc 	bl	800800c <RCCEx_PLLSAI1_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c78:	e003      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c82:	7cfb      	ldrb	r3, [r7, #19]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10b      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c88:	4ba0      	ldr	r3, [pc, #640]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	499d      	ldr	r1, [pc, #628]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c9e:	e001      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7cfb      	ldrb	r3, [r7, #19]
 8007ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8099 	beq.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007cb6:	4b95      	ldr	r3, [pc, #596]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00d      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ccc:	4b8f      	ldr	r3, [pc, #572]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	4a8e      	ldr	r2, [pc, #568]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8007cd8:	4b8c      	ldr	r3, [pc, #560]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce0:	60bb      	str	r3, [r7, #8]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ce8:	4b89      	ldr	r3, [pc, #548]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a88      	ldr	r2, [pc, #544]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cf4:	f7fb fcfc 	bl	80036f0 <HAL_GetTick>
 8007cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007cfa:	e009      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cfc:	f7fb fcf8 	bl	80036f0 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d902      	bls.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8007d0e:	e005      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d10:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0ef      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007d1c:	7cfb      	ldrb	r3, [r7, #19]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d155      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d22:	4b7a      	ldr	r3, [pc, #488]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01e      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d019      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d3e:	4b73      	ldr	r3, [pc, #460]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d4a:	4b70      	ldr	r3, [pc, #448]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d50:	4a6e      	ldr	r2, [pc, #440]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d5a:	4b6c      	ldr	r3, [pc, #432]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	4a6a      	ldr	r2, [pc, #424]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d6a:	4a68      	ldr	r2, [pc, #416]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d016      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7c:	f7fb fcb8 	bl	80036f0 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d82:	e00b      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d84:	f7fb fcb4 	bl	80036f0 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d902      	bls.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	74fb      	strb	r3, [r7, #19]
            break;
 8007d9a:	e006      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d9c:	4b5b      	ldr	r3, [pc, #364]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0ec      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007daa:	7cfb      	ldrb	r3, [r7, #19]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007db0:	4b56      	ldr	r3, [pc, #344]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbe:	4953      	ldr	r1, [pc, #332]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007dc6:	e004      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dc8:	7cfb      	ldrb	r3, [r7, #19]
 8007dca:	74bb      	strb	r3, [r7, #18]
 8007dcc:	e001      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dce:	7cfb      	ldrb	r3, [r7, #19]
 8007dd0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007dd2:	7c7b      	ldrb	r3, [r7, #17]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dd8:	4b4c      	ldr	r3, [pc, #304]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ddc:	4a4b      	ldr	r2, [pc, #300]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007df0:	4b46      	ldr	r3, [pc, #280]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df6:	f023 0203 	bic.w	r2, r3, #3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	4943      	ldr	r1, [pc, #268]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e12:	4b3e      	ldr	r3, [pc, #248]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e18:	f023 020c 	bic.w	r2, r3, #12
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	493a      	ldr	r1, [pc, #232]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e34:	4b35      	ldr	r3, [pc, #212]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	4932      	ldr	r1, [pc, #200]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e56:	4b2d      	ldr	r3, [pc, #180]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e64:	4929      	ldr	r1, [pc, #164]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e78:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	4921      	ldr	r1, [pc, #132]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e9a:	4b1c      	ldr	r3, [pc, #112]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	4918      	ldr	r1, [pc, #96]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ebc:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	4910      	ldr	r1, [pc, #64]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02c      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	4907      	ldr	r1, [pc, #28]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007efc:	d10a      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007efe:	4b03      	ldr	r3, [pc, #12]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	4a02      	ldr	r2, [pc, #8]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f08:	60d3      	str	r3, [r2, #12]
 8007f0a:	e015      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	2101      	movs	r1, #1
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f871 	bl	800800c <RCCEx_PLLSAI1_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007f2e:	7cfb      	ldrb	r3, [r7, #19]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8007f34:	7cfb      	ldrb	r3, [r7, #19]
 8007f36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d028      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f44:	4b30      	ldr	r3, [pc, #192]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f52:	492d      	ldr	r1, [pc, #180]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f62:	d106      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f64:	4b28      	ldr	r3, [pc, #160]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	4a27      	ldr	r2, [pc, #156]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f6e:	60d3      	str	r3, [r2, #12]
 8007f70:	e011      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f7a:	d10c      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	2101      	movs	r1, #1
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f842 	bl	800800c <RCCEx_PLLSAI1_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f8c:	7cfb      	ldrb	r3, [r7, #19]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8007f92:	7cfb      	ldrb	r3, [r7, #19]
 8007f94:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01c      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fa2:	4b19      	ldr	r3, [pc, #100]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb0:	4915      	ldr	r1, [pc, #84]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc0:	d10c      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f81f 	bl	800800c <RCCEx_PLLSAI1_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fd2:	7cfb      	ldrb	r3, [r7, #19]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007fd8:	7cfb      	ldrb	r3, [r7, #19]
 8007fda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fe8:	4b07      	ldr	r3, [pc, #28]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	4904      	ldr	r1, [pc, #16]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007ffe:	7cbb      	ldrb	r3, [r7, #18]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	40021000 	.word	0x40021000

0800800c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800801a:	4b74      	ldr	r3, [pc, #464]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008026:	4b71      	ldr	r3, [pc, #452]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0203 	and.w	r2, r3, #3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d10d      	bne.n	8008052 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
       ||
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800803e:	4b6b      	ldr	r3, [pc, #428]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	091b      	lsrs	r3, r3, #4
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
       ||
 800804e:	429a      	cmp	r2, r3
 8008050:	d047      	beq.n	80080e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
 8008056:	e044      	b.n	80080e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d018      	beq.n	8008092 <RCCEx_PLLSAI1_Config+0x86>
 8008060:	2b03      	cmp	r3, #3
 8008062:	d825      	bhi.n	80080b0 <RCCEx_PLLSAI1_Config+0xa4>
 8008064:	2b01      	cmp	r3, #1
 8008066:	d002      	beq.n	800806e <RCCEx_PLLSAI1_Config+0x62>
 8008068:	2b02      	cmp	r3, #2
 800806a:	d009      	beq.n	8008080 <RCCEx_PLLSAI1_Config+0x74>
 800806c:	e020      	b.n	80080b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800806e:	4b5f      	ldr	r3, [pc, #380]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11d      	bne.n	80080b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800807e:	e01a      	b.n	80080b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008080:	4b5a      	ldr	r3, [pc, #360]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008088:	2b00      	cmp	r3, #0
 800808a:	d116      	bne.n	80080ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008090:	e013      	b.n	80080ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008092:	4b56      	ldr	r3, [pc, #344]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10f      	bne.n	80080be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800809e:	4b53      	ldr	r3, [pc, #332]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080ae:	e006      	b.n	80080be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e004      	b.n	80080c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080b6:	bf00      	nop
 80080b8:	e002      	b.n	80080c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080ba:	bf00      	nop
 80080bc:	e000      	b.n	80080c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080be:	bf00      	nop
    }

    if(status == HAL_OK)
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80080c6:	4b49      	ldr	r3, [pc, #292]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6819      	ldr	r1, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	430b      	orrs	r3, r1
 80080dc:	4943      	ldr	r1, [pc, #268]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d17c      	bne.n	80081e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080e8:	4b40      	ldr	r3, [pc, #256]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a3f      	ldr	r2, [pc, #252]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f4:	f7fb fafc 	bl	80036f0 <HAL_GetTick>
 80080f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080fa:	e009      	b.n	8008110 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080fc:	f7fb faf8 	bl	80036f0 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d902      	bls.n	8008110 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
        break;
 800810e:	e005      	b.n	800811c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008110:	4b36      	ldr	r3, [pc, #216]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ef      	bne.n	80080fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d15f      	bne.n	80081e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d110      	bne.n	800814a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008128:	4b30      	ldr	r3, [pc, #192]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008130:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6892      	ldr	r2, [r2, #8]
 8008138:	0211      	lsls	r1, r2, #8
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68d2      	ldr	r2, [r2, #12]
 800813e:	06d2      	lsls	r2, r2, #27
 8008140:	430a      	orrs	r2, r1
 8008142:	492a      	ldr	r1, [pc, #168]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008144:	4313      	orrs	r3, r2
 8008146:	610b      	str	r3, [r1, #16]
 8008148:	e027      	b.n	800819a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d112      	bne.n	8008176 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008150:	4b26      	ldr	r3, [pc, #152]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008158:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6892      	ldr	r2, [r2, #8]
 8008160:	0211      	lsls	r1, r2, #8
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6912      	ldr	r2, [r2, #16]
 8008166:	0852      	lsrs	r2, r2, #1
 8008168:	3a01      	subs	r2, #1
 800816a:	0552      	lsls	r2, r2, #21
 800816c:	430a      	orrs	r2, r1
 800816e:	491f      	ldr	r1, [pc, #124]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008170:	4313      	orrs	r3, r2
 8008172:	610b      	str	r3, [r1, #16]
 8008174:	e011      	b.n	800819a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008176:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800817e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6892      	ldr	r2, [r2, #8]
 8008186:	0211      	lsls	r1, r2, #8
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6952      	ldr	r2, [r2, #20]
 800818c:	0852      	lsrs	r2, r2, #1
 800818e:	3a01      	subs	r2, #1
 8008190:	0652      	lsls	r2, r2, #25
 8008192:	430a      	orrs	r2, r1
 8008194:	4915      	ldr	r1, [pc, #84]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8008196:	4313      	orrs	r3, r2
 8008198:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800819a:	4b14      	ldr	r3, [pc, #80]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80081a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a6:	f7fb faa3 	bl	80036f0 <HAL_GetTick>
 80081aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ac:	e009      	b.n	80081c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081ae:	f7fb fa9f 	bl	80036f0 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d902      	bls.n	80081c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	73fb      	strb	r3, [r7, #15]
          break;
 80081c0:	e005      	b.n	80081ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0ef      	beq.n	80081ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d106      	bne.n	80081e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	4903      	ldr	r1, [pc, #12]	; (80081ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	40021000 	.word	0x40021000

080081f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d06c      	beq.n	80082dc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7f9 fb62 	bl	80018e0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	22ca      	movs	r2, #202	; 0xca
 800822a:	625a      	str	r2, [r3, #36]	; 0x24
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2253      	movs	r2, #83	; 0x53
 8008232:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f87c 	bl	8008332 <RTC_EnterInitMode>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d14b      	bne.n	80082dc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008256:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6899      	ldr	r1, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	68d2      	ldr	r2, [r2, #12]
 800827e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6919      	ldr	r1, [r3, #16]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	041a      	lsls	r2, r3, #16
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f87f 	bl	8008398 <RTC_ExitInitMode>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11b      	bne.n	80082dc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0203 	bic.w	r2, r2, #3
 80082b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	22ff      	movs	r2, #255	; 0xff
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082fc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80082fe:	f7fb f9f7 	bl	80036f0 <HAL_GetTick>
 8008302:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008304:	e009      	b.n	800831a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008306:	f7fb f9f3 	bl	80036f0 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008314:	d901      	bls.n	800831a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e007      	b.n	800832a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0ee      	beq.n	8008306 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d120      	bne.n	800838e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f04f 32ff 	mov.w	r2, #4294967295
 8008354:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008356:	f7fb f9cb 	bl	80036f0 <HAL_GetTick>
 800835a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800835c:	e00d      	b.n	800837a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800835e:	f7fb f9c7 	bl	80036f0 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800836c:	d905      	bls.n	800837a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2203      	movs	r2, #3
 8008376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <RTC_EnterInitMode+0x5c>
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	2b03      	cmp	r3, #3
 800838c:	d1e7      	bne.n	800835e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80083a4:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <RTC_ExitInitMode+0x78>)
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	4a19      	ldr	r2, [pc, #100]	; (8008410 <RTC_ExitInitMode+0x78>)
 80083aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083b0:	4b17      	ldr	r3, [pc, #92]	; (8008410 <RTC_ExitInitMode+0x78>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ff92 	bl	80082e6 <HAL_RTC_WaitForSynchro>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01e      	beq.n	8008406 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2203      	movs	r2, #3
 80083cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	e017      	b.n	8008406 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80083d6:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <RTC_ExitInitMode+0x78>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	4a0d      	ldr	r2, [pc, #52]	; (8008410 <RTC_ExitInitMode+0x78>)
 80083dc:	f023 0320 	bic.w	r3, r3, #32
 80083e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff ff7f 	bl	80082e6 <HAL_RTC_WaitForSynchro>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2203      	movs	r2, #3
 80083f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <RTC_ExitInitMode+0x78>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	4a04      	ldr	r2, [pc, #16]	; (8008410 <RTC_ExitInitMode+0x78>)
 8008400:	f043 0320 	orr.w	r3, r3, #32
 8008404:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40002800 	.word	0x40002800

08008414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e095      	b.n	8008552 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d108      	bne.n	8008440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008436:	d009      	beq.n	800844c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	61da      	str	r2, [r3, #28]
 800843e:	e005      	b.n	800844c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7f9 faa8 	bl	80019bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800848c:	d902      	bls.n	8008494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	e002      	b.n	800849a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80084a2:	d007      	beq.n	80084b4 <HAL_SPI_Init+0xa0>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084ac:	d002      	beq.n	80084b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	ea42 0103 	orr.w	r1, r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	0c1b      	lsrs	r3, r3, #16
 8008510:	f003 0204 	and.w	r2, r3, #4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008530:	ea42 0103 	orr.w	r1, r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e049      	b.n	8008600 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f841 	bl	8008608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3304      	adds	r3, #4
 8008596:	4619      	mov	r1, r3
 8008598:	4610      	mov	r0, r2
 800859a:	f000 fac5 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d001      	beq.n	8008634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e03b      	b.n	80086ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a19      	ldr	r2, [pc, #100]	; (80086b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d009      	beq.n	800866a <HAL_TIM_Base_Start_IT+0x4e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865e:	d004      	beq.n	800866a <HAL_TIM_Base_Start_IT+0x4e>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a15      	ldr	r2, [pc, #84]	; (80086bc <HAL_TIM_Base_Start_IT+0xa0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d115      	bne.n	8008696 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8008672:	4013      	ands	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2b06      	cmp	r3, #6
 800867a:	d015      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x8c>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008682:	d011      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008694:	e008      	b.n	80086a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0201 	orr.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	e000      	b.n	80086aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	40012c00 	.word	0x40012c00
 80086bc:	40014000 	.word	0x40014000
 80086c0:	00010007 	.word	0x00010007

080086c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e049      	b.n	800876a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 fb50 	bl	8001d90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3304      	adds	r3, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f000 fa10 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b02      	cmp	r3, #2
 8008786:	d122      	bne.n	80087ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b02      	cmp	r3, #2
 8008794:	d11b      	bne.n	80087ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f06f 0202 	mvn.w	r2, #2
 800879e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f999 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 80087ba:	e005      	b.n	80087c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f98b 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f99c 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d122      	bne.n	8008822 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d11b      	bne.n	8008822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f06f 0204 	mvn.w	r2, #4
 80087f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f96f 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 800880e:	e005      	b.n	800881c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f961 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f972 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b08      	cmp	r3, #8
 800882e:	d122      	bne.n	8008876 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b08      	cmp	r3, #8
 800883c:	d11b      	bne.n	8008876 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f06f 0208 	mvn.w	r2, #8
 8008846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2204      	movs	r2, #4
 800884c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f003 0303 	and.w	r3, r3, #3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f945 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 8008862:	e005      	b.n	8008870 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f937 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f948 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b10      	cmp	r3, #16
 8008882:	d122      	bne.n	80088ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	2b10      	cmp	r3, #16
 8008890:	d11b      	bne.n	80088ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f06f 0210 	mvn.w	r2, #16
 800889a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2208      	movs	r2, #8
 80088a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f91b 	bl	8008aec <HAL_TIM_IC_CaptureCallback>
 80088b6:	e005      	b.n	80088c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f90d 	bl	8008ad8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f91e 	bl	8008b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d10e      	bne.n	80088f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d107      	bne.n	80088f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f06f 0201 	mvn.w	r2, #1
 80088ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7f8 ffb5 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008900:	2b80      	cmp	r3, #128	; 0x80
 8008902:	d10e      	bne.n	8008922 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890e:	2b80      	cmp	r3, #128	; 0x80
 8008910:	d107      	bne.n	8008922 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800891a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fae3 	bl	8008ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008930:	d10e      	bne.n	8008950 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893c:	2b80      	cmp	r3, #128	; 0x80
 800893e:	d107      	bne.n	8008950 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fad6 	bl	8008efc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895a:	2b40      	cmp	r3, #64	; 0x40
 800895c:	d10e      	bne.n	800897c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008968:	2b40      	cmp	r3, #64	; 0x40
 800896a:	d107      	bne.n	800897c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f8cc 	bl	8008b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	f003 0320 	and.w	r3, r3, #32
 8008986:	2b20      	cmp	r3, #32
 8008988:	d10e      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b20      	cmp	r3, #32
 8008996:	d107      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f06f 0220 	mvn.w	r2, #32
 80089a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa96 	bl	8008ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_IC_ConfigChannel+0x1a>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e082      	b.n	8008ad0 <HAL_TIM_IC_ConfigChannel+0x120>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d11b      	bne.n	8008a10 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	6819      	ldr	r1, [r3, #0]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f000 f902 	bl	8008bf0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 020c 	bic.w	r2, r2, #12
 80089fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6999      	ldr	r1, [r3, #24]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	619a      	str	r2, [r3, #24]
 8008a0e:	e05a      	b.n	8008ac6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d11c      	bne.n	8008a50 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6819      	ldr	r1, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f000 f939 	bl	8008c9c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	699a      	ldr	r2, [r3, #24]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6999      	ldr	r1, [r3, #24]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	021a      	lsls	r2, r3, #8
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	619a      	str	r2, [r3, #24]
 8008a4e:	e03a      	b.n	8008ac6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d11b      	bne.n	8008a8e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f000 f956 	bl	8008d16 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 020c 	bic.w	r2, r2, #12
 8008a78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69d9      	ldr	r1, [r3, #28]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	61da      	str	r2, [r3, #28]
 8008a8c:	e01b      	b.n	8008ac6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6819      	ldr	r1, [r3, #0]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f000 f976 	bl	8008d8e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ab0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69d9      	ldr	r1, [r3, #28]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	021a      	lsls	r2, r3, #8
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a2a      	ldr	r2, [pc, #168]	; (8008be4 <TIM_Base_SetConfig+0xbc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d003      	beq.n	8008b48 <TIM_Base_SetConfig+0x20>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b46:	d108      	bne.n	8008b5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a21      	ldr	r2, [pc, #132]	; (8008be4 <TIM_Base_SetConfig+0xbc>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00b      	beq.n	8008b7a <TIM_Base_SetConfig+0x52>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b68:	d007      	beq.n	8008b7a <TIM_Base_SetConfig+0x52>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1e      	ldr	r2, [pc, #120]	; (8008be8 <TIM_Base_SetConfig+0xc0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d003      	beq.n	8008b7a <TIM_Base_SetConfig+0x52>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1d      	ldr	r2, [pc, #116]	; (8008bec <TIM_Base_SetConfig+0xc4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d108      	bne.n	8008b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <TIM_Base_SetConfig+0xbc>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d007      	beq.n	8008bc8 <TIM_Base_SetConfig+0xa0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a0b      	ldr	r2, [pc, #44]	; (8008be8 <TIM_Base_SetConfig+0xc0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_Base_SetConfig+0xa0>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <TIM_Base_SetConfig+0xc4>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d103      	bne.n	8008bd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	691a      	ldr	r2, [r3, #16]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	615a      	str	r2, [r3, #20]
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40012c00 	.word	0x40012c00
 8008be8:	40014000 	.word	0x40014000
 8008bec:	40014400 	.word	0x40014400

08008bf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	f023 0201 	bic.w	r2, r3, #1
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4a1e      	ldr	r2, [pc, #120]	; (8008c94 <TIM_TI1_SetConfig+0xa4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d007      	beq.n	8008c2e <TIM_TI1_SetConfig+0x3e>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c24:	d003      	beq.n	8008c2e <TIM_TI1_SetConfig+0x3e>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4a1b      	ldr	r2, [pc, #108]	; (8008c98 <TIM_TI1_SetConfig+0xa8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <TIM_TI1_SetConfig+0x42>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <TIM_TI1_SetConfig+0x44>
 8008c32:	2300      	movs	r3, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d008      	beq.n	8008c4a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e003      	b.n	8008c52 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f023 030a 	bic.w	r3, r3, #10
 8008c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f003 030a 	and.w	r3, r3, #10
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	621a      	str	r2, [r3, #32]
}
 8008c86:	bf00      	nop
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40012c00 	.word	0x40012c00
 8008c98:	40014000 	.word	0x40014000

08008c9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f023 0210 	bic.w	r2, r3, #16
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	031b      	lsls	r3, r3, #12
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b087      	sub	sp, #28
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008d66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b087      	sub	sp, #28
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	031b      	lsls	r3, r3, #12
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	621a      	str	r2, [r3, #32]
}
 8008dfc:	bf00      	nop
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e04f      	b.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a21      	ldr	r2, [pc, #132]	; (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d108      	bne.n	8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a14      	ldr	r2, [pc, #80]	; (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e88:	d004      	beq.n	8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a10      	ldr	r2, [pc, #64]	; (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d10c      	bne.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	40014000 	.word	0x40014000

08008ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e040      	b.n	8008fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7f9 f84e 	bl	8001fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2224      	movs	r2, #36	; 0x24
 8008f3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0201 	bic.w	r2, r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fccc 	bl	80098ec <UART_SetConfig>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e022      	b.n	8008fa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fecc 	bl	8009d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 ff53 	bl	8009e48 <UART_CheckIdleState>
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e02b      	b.n	8009016 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2224      	movs	r2, #36	; 0x24
 8008fc2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7f9 f8b5 	bl	800215c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b08a      	sub	sp, #40	; 0x28
 8009022:	af02      	add	r7, sp, #8
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009032:	2b20      	cmp	r3, #32
 8009034:	f040 8082 	bne.w	800913c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HAL_UART_Transmit+0x26>
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e07a      	b.n	800913e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_UART_Transmit+0x38>
 8009052:	2302      	movs	r3, #2
 8009054:	e073      	b.n	800913e <HAL_UART_Transmit+0x120>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2221      	movs	r2, #33	; 0x21
 800906a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800906c:	f7fa fb40 	bl	80036f0 <HAL_GetTick>
 8009070:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	88fa      	ldrh	r2, [r7, #6]
 8009076:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	88fa      	ldrh	r2, [r7, #6]
 800907e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908a:	d108      	bne.n	800909e <HAL_UART_Transmit+0x80>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d104      	bne.n	800909e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	61bb      	str	r3, [r7, #24]
 800909c:	e003      	b.n	80090a6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80090ae:	e02d      	b.n	800910c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2200      	movs	r2, #0
 80090b8:	2180      	movs	r1, #128	; 0x80
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 ff0d 	bl	8009eda <UART_WaitOnFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e039      	b.n	800913e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10b      	bne.n	80090e8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	881a      	ldrh	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090dc:	b292      	uxth	r2, r2
 80090de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	3302      	adds	r3, #2
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	e008      	b.n	80090fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	b292      	uxth	r2, r2
 80090f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009112:	b29b      	uxth	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1cb      	bne.n	80090b0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2200      	movs	r2, #0
 8009120:	2140      	movs	r1, #64	; 0x40
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 fed9 	bl	8009eda <UART_WaitOnFlagUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e005      	b.n	800913e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4613      	mov	r3, r2
 8009154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800915a:	2b20      	cmp	r3, #32
 800915c:	d145      	bne.n	80091ea <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <HAL_UART_Transmit_IT+0x22>
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e03e      	b.n	80091ec <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UART_Transmit_IT+0x34>
 8009178:	2302      	movs	r3, #2
 800917a:	e037      	b.n	80091ec <HAL_UART_Transmit_IT+0xa4>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2221      	movs	r2, #33	; 0x21
 80091ac:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b6:	d107      	bne.n	80091c8 <HAL_UART_Transmit_IT+0x80>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4a0d      	ldr	r2, [pc, #52]	; (80091f8 <HAL_UART_Transmit_IT+0xb0>)
 80091c4:	669a      	str	r2, [r3, #104]	; 0x68
 80091c6:	e002      	b.n	80091ce <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4a0c      	ldr	r2, [pc, #48]	; (80091fc <HAL_UART_Transmit_IT+0xb4>)
 80091cc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e000      	b.n	80091ec <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80091ea:	2302      	movs	r3, #2
  }
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	0800a259 	.word	0x0800a259
 80091fc:	0800a1e5 	.word	0x0800a1e5

08009200 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009212:	2b20      	cmp	r3, #32
 8009214:	d131      	bne.n	800927a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_UART_Receive_IT+0x22>
 800921c:	88fb      	ldrh	r3, [r7, #6]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e02a      	b.n	800927c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <HAL_UART_Receive_IT+0x34>
 8009230:	2302      	movs	r3, #2
 8009232:	e023      	b.n	800927c <HAL_UART_Receive_IT+0x7c>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a0f      	ldr	r2, [pc, #60]	; (8009284 <HAL_UART_Receive_IT+0x84>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00e      	beq.n	800926a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009268:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	461a      	mov	r2, r3
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 feaf 	bl	8009fd4 <UART_Start_Receive_IT>
 8009276:	4603      	mov	r3, r0
 8009278:	e000      	b.n	800927c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800927a:	2302      	movs	r3, #2
  }
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40008000 	.word	0x40008000

08009288 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800929e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b80      	cmp	r3, #128	; 0x80
 80092ac:	d12d      	bne.n	800930a <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092bc:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d013      	beq.n	80092ee <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ca:	4a19      	ldr	r2, [pc, #100]	; (8009330 <HAL_UART_AbortTransmit_IT+0xa8>)
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fb fd2a 	bl	8004d2c <HAL_DMA_Abort_IT>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d022      	beq.n	8009324 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	e01a      	b.n	8009324 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa9a 	bl	800983c <HAL_UART_AbortTransmitCpltCallback>
 8009308:	e00c      	b.n	8009324 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa8c 	bl	800983c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	0800a16f 	.word	0x0800a16f

08009334 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800934a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0201 	bic.w	r2, r2, #1
 800935a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009360:	2b01      	cmp	r3, #1
 8009362:	d107      	bne.n	8009374 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0210 	bic.w	r2, r2, #16
 8009372:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d13e      	bne.n	8009400 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009390:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	4a25      	ldr	r2, [pc, #148]	; (8009434 <HAL_UART_AbortReceive_IT+0x100>)
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fb fcc0 	bl	8004d2c <HAL_DMA_Abort_IT>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d03a      	beq.n	8009428 <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
 80093c0:	e032      	b.n	8009428 <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	220f      	movs	r2, #15
 80093d6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	8b1b      	ldrh	r3, [r3, #24]
 80093de:	b29a      	uxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0208 	orr.w	r2, r2, #8
 80093e8:	b292      	uxth	r2, r2
 80093ea:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fa29 	bl	8009850 <HAL_UART_AbortReceiveCpltCallback>
 80093fe:	e013      	b.n	8009428 <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	220f      	movs	r2, #15
 8009414:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa14 	bl	8009850 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	0800a199 	.word	0x0800a199

08009438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	f640 030f 	movw	r3, #2063	; 0x80f
 800945e:	4013      	ands	r3, r2
 8009460:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d113      	bne.n	8009490 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00e      	beq.n	8009490 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 81ce 	beq.w	8009822 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	4798      	blx	r3
      }
      return;
 800948e:	e1c8      	b.n	8009822 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80e3 	beq.w	800965e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	4ba6      	ldr	r3, [pc, #664]	; (8009740 <HAL_UART_IRQHandler+0x308>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80d8 	beq.w	800965e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d010      	beq.n	80094da <HAL_UART_IRQHandler+0xa2>
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00b      	beq.n	80094da <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2201      	movs	r2, #1
 80094c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d0:	f043 0201 	orr.w	r2, r3, #1
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d010      	beq.n	8009506 <HAL_UART_IRQHandler+0xce>
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2202      	movs	r2, #2
 80094f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094fc:	f043 0204 	orr.w	r2, r3, #4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d010      	beq.n	8009532 <HAL_UART_IRQHandler+0xfa>
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2204      	movs	r2, #4
 8009520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009528:	f043 0202 	orr.w	r2, r3, #2
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	f003 0308 	and.w	r3, r3, #8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d015      	beq.n	8009568 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2208      	movs	r2, #8
 8009556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800955e:	f043 0208 	orr.w	r2, r3, #8
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800956e:	2b00      	cmp	r3, #0
 8009570:	d011      	beq.n	8009596 <HAL_UART_IRQHandler+0x15e>
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00c      	beq.n	8009596 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800958c:	f043 0220 	orr.w	r2, r3, #32
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 8142 	beq.w	8009826 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	f003 0320 	and.w	r3, r3, #32
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00c      	beq.n	80095c6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d007      	beq.n	80095c6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b40      	cmp	r3, #64	; 0x40
 80095da:	d004      	beq.n	80095e6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d031      	beq.n	800964a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fd7c 	bl	800a0e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	d123      	bne.n	8009642 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009608:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960e:	2b00      	cmp	r3, #0
 8009610:	d013      	beq.n	800963a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009616:	4a4b      	ldr	r2, [pc, #300]	; (8009744 <HAL_UART_IRQHandler+0x30c>)
 8009618:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961e:	4618      	mov	r0, r3
 8009620:	f7fb fb84 	bl	8004d2c <HAL_DMA_Abort_IT>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d017      	beq.n	800965a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009638:	e00f      	b.n	800965a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f8 fc26 	bl	8001e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009640:	e00b      	b.n	800965a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7f8 fc22 	bl	8001e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009648:	e007      	b.n	800965a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7f8 fc1e 	bl	8001e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009658:	e0e5      	b.n	8009826 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965a:	bf00      	nop
    return;
 800965c:	e0e3      	b.n	8009826 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009662:	2b01      	cmp	r3, #1
 8009664:	f040 80a9 	bne.w	80097ba <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	f003 0310 	and.w	r3, r3, #16
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 80a3 	beq.w	80097ba <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	f003 0310 	and.w	r3, r3, #16
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 809d 	beq.w	80097ba <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2210      	movs	r2, #16
 8009686:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d158      	bne.n	8009748 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80096a0:	893b      	ldrh	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 80c1 	beq.w	800982a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096ae:	893a      	ldrh	r2, [r7, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	f080 80ba 	bcs.w	800982a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	893a      	ldrh	r2, [r7, #8]
 80096ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d12a      	bne.n	8009724 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0201 	bic.w	r2, r2, #1
 80096ec:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096fc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0210 	bic.w	r2, r2, #16
 8009718:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	4618      	mov	r0, r3
 8009720:	f7fb fac6 	bl	8004cb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009730:	b29b      	uxth	r3, r3
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	b29b      	uxth	r3, r3
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f893 	bl	8009864 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800973e:	e074      	b.n	800982a <HAL_UART_IRQHandler+0x3f2>
 8009740:	04000120 	.word	0x04000120
 8009744:	0800a143 	.word	0x0800a143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009754:	b29b      	uxth	r3, r3
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d063      	beq.n	800982e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8009766:	897b      	ldrh	r3, [r7, #10]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d060      	beq.n	800982e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800977a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0201 	bic.w	r2, r2, #1
 800978a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0210 	bic.w	r2, r2, #16
 80097ac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097ae:	897b      	ldrh	r3, [r7, #10]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f856 	bl	8009864 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80097b8:	e039      	b.n	800982e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00d      	beq.n	80097e0 <HAL_UART_IRQHandler+0x3a8>
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d008      	beq.n	80097e0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fe6c 	bl	800a4b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097de:	e029      	b.n	8009834 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00d      	beq.n	8009806 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d01a      	beq.n	8009832 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
    }
    return;
 8009804:	e015      	b.n	8009832 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d011      	beq.n	8009834 <HAL_UART_IRQHandler+0x3fc>
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00c      	beq.n	8009834 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fd5a 	bl	800a2d4 <UART_EndTransmit_IT>
    return;
 8009820:	e008      	b.n	8009834 <HAL_UART_IRQHandler+0x3fc>
      return;
 8009822:	bf00      	nop
 8009824:	e006      	b.n	8009834 <HAL_UART_IRQHandler+0x3fc>
    return;
 8009826:	bf00      	nop
 8009828:	e004      	b.n	8009834 <HAL_UART_IRQHandler+0x3fc>
      return;
 800982a:	bf00      	nop
 800982c:	e002      	b.n	8009834 <HAL_UART_IRQHandler+0x3fc>
      return;
 800982e:	bf00      	nop
 8009830:	e000      	b.n	8009834 <HAL_UART_IRQHandler+0x3fc>
    return;
 8009832:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop

0800983c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <HAL_UART_EnableReceiverTimeout+0x6c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d024      	beq.n	80098d8 <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009892:	2b20      	cmp	r3, #32
 8009894:	d11e      	bne.n	80098d4 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800989c:	2b01      	cmp	r3, #1
 800989e:	d101      	bne.n	80098a4 <HAL_UART_EnableReceiverTimeout+0x28>
 80098a0:	2302      	movs	r3, #2
 80098a2:	e01a      	b.n	80098da <HAL_UART_EnableReceiverTimeout+0x5e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2224      	movs	r2, #36	; 0x24
 80098b0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098c0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	e002      	b.n	80098da <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 80098d4:	2302      	movs	r3, #2
 80098d6:	e000      	b.n	80098da <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40008000 	.word	0x40008000

080098ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098ec:	b5b0      	push	{r4, r5, r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	431a      	orrs	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	4313      	orrs	r3, r2
 800990e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4baf      	ldr	r3, [pc, #700]	; (8009bd4 <UART_SetConfig+0x2e8>)
 8009918:	4013      	ands	r3, r2
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	69f9      	ldr	r1, [r7, #28]
 8009920:	430b      	orrs	r3, r1
 8009922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4aa4      	ldr	r2, [pc, #656]	; (8009bd8 <UART_SetConfig+0x2ec>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d004      	beq.n	8009954 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	4313      	orrs	r3, r2
 8009952:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	430a      	orrs	r2, r1
 8009966:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a9b      	ldr	r2, [pc, #620]	; (8009bdc <UART_SetConfig+0x2f0>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d121      	bne.n	80099b6 <UART_SetConfig+0xca>
 8009972:	4b9b      	ldr	r3, [pc, #620]	; (8009be0 <UART_SetConfig+0x2f4>)
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	2b03      	cmp	r3, #3
 800997e:	d817      	bhi.n	80099b0 <UART_SetConfig+0xc4>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <UART_SetConfig+0x9c>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009999 	.word	0x08009999
 800998c:	080099a5 	.word	0x080099a5
 8009990:	0800999f 	.word	0x0800999f
 8009994:	080099ab 	.word	0x080099ab
 8009998:	2301      	movs	r3, #1
 800999a:	76fb      	strb	r3, [r7, #27]
 800999c:	e070      	b.n	8009a80 <UART_SetConfig+0x194>
 800999e:	2302      	movs	r3, #2
 80099a0:	76fb      	strb	r3, [r7, #27]
 80099a2:	e06d      	b.n	8009a80 <UART_SetConfig+0x194>
 80099a4:	2304      	movs	r3, #4
 80099a6:	76fb      	strb	r3, [r7, #27]
 80099a8:	e06a      	b.n	8009a80 <UART_SetConfig+0x194>
 80099aa:	2308      	movs	r3, #8
 80099ac:	76fb      	strb	r3, [r7, #27]
 80099ae:	e067      	b.n	8009a80 <UART_SetConfig+0x194>
 80099b0:	2310      	movs	r3, #16
 80099b2:	76fb      	strb	r3, [r7, #27]
 80099b4:	e064      	b.n	8009a80 <UART_SetConfig+0x194>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a8a      	ldr	r2, [pc, #552]	; (8009be4 <UART_SetConfig+0x2f8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d132      	bne.n	8009a26 <UART_SetConfig+0x13a>
 80099c0:	4b87      	ldr	r3, [pc, #540]	; (8009be0 <UART_SetConfig+0x2f4>)
 80099c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c6:	f003 030c 	and.w	r3, r3, #12
 80099ca:	2b0c      	cmp	r3, #12
 80099cc:	d828      	bhi.n	8009a20 <UART_SetConfig+0x134>
 80099ce:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <UART_SetConfig+0xe8>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	08009a09 	.word	0x08009a09
 80099d8:	08009a21 	.word	0x08009a21
 80099dc:	08009a21 	.word	0x08009a21
 80099e0:	08009a21 	.word	0x08009a21
 80099e4:	08009a15 	.word	0x08009a15
 80099e8:	08009a21 	.word	0x08009a21
 80099ec:	08009a21 	.word	0x08009a21
 80099f0:	08009a21 	.word	0x08009a21
 80099f4:	08009a0f 	.word	0x08009a0f
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009a1b 	.word	0x08009a1b
 8009a08:	2300      	movs	r3, #0
 8009a0a:	76fb      	strb	r3, [r7, #27]
 8009a0c:	e038      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	76fb      	strb	r3, [r7, #27]
 8009a12:	e035      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a14:	2304      	movs	r3, #4
 8009a16:	76fb      	strb	r3, [r7, #27]
 8009a18:	e032      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	76fb      	strb	r3, [r7, #27]
 8009a1e:	e02f      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a20:	2310      	movs	r3, #16
 8009a22:	76fb      	strb	r3, [r7, #27]
 8009a24:	e02c      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a6b      	ldr	r2, [pc, #428]	; (8009bd8 <UART_SetConfig+0x2ec>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d125      	bne.n	8009a7c <UART_SetConfig+0x190>
 8009a30:	4b6b      	ldr	r3, [pc, #428]	; (8009be0 <UART_SetConfig+0x2f4>)
 8009a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a3e:	d017      	beq.n	8009a70 <UART_SetConfig+0x184>
 8009a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a44:	d817      	bhi.n	8009a76 <UART_SetConfig+0x18a>
 8009a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a4a:	d00b      	beq.n	8009a64 <UART_SetConfig+0x178>
 8009a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a50:	d811      	bhi.n	8009a76 <UART_SetConfig+0x18a>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <UART_SetConfig+0x172>
 8009a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a5a:	d006      	beq.n	8009a6a <UART_SetConfig+0x17e>
 8009a5c:	e00b      	b.n	8009a76 <UART_SetConfig+0x18a>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	76fb      	strb	r3, [r7, #27]
 8009a62:	e00d      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a64:	2302      	movs	r3, #2
 8009a66:	76fb      	strb	r3, [r7, #27]
 8009a68:	e00a      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a6a:	2304      	movs	r3, #4
 8009a6c:	76fb      	strb	r3, [r7, #27]
 8009a6e:	e007      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a70:	2308      	movs	r3, #8
 8009a72:	76fb      	strb	r3, [r7, #27]
 8009a74:	e004      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a76:	2310      	movs	r3, #16
 8009a78:	76fb      	strb	r3, [r7, #27]
 8009a7a:	e001      	b.n	8009a80 <UART_SetConfig+0x194>
 8009a7c:	2310      	movs	r3, #16
 8009a7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a54      	ldr	r2, [pc, #336]	; (8009bd8 <UART_SetConfig+0x2ec>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d173      	bne.n	8009b72 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a8a:	7efb      	ldrb	r3, [r7, #27]
 8009a8c:	2b08      	cmp	r3, #8
 8009a8e:	d824      	bhi.n	8009ada <UART_SetConfig+0x1ee>
 8009a90:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <UART_SetConfig+0x1ac>)
 8009a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a96:	bf00      	nop
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009adb 	.word	0x08009adb
 8009aa0:	08009ac5 	.word	0x08009ac5
 8009aa4:	08009adb 	.word	0x08009adb
 8009aa8:	08009acb 	.word	0x08009acb
 8009aac:	08009adb 	.word	0x08009adb
 8009ab0:	08009adb 	.word	0x08009adb
 8009ab4:	08009adb 	.word	0x08009adb
 8009ab8:	08009ad3 	.word	0x08009ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009abc:	f7fd fff4 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8009ac0:	6178      	str	r0, [r7, #20]
        break;
 8009ac2:	e00f      	b.n	8009ae4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ac4:	4b48      	ldr	r3, [pc, #288]	; (8009be8 <UART_SetConfig+0x2fc>)
 8009ac6:	617b      	str	r3, [r7, #20]
        break;
 8009ac8:	e00c      	b.n	8009ae4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aca:	f7fd ff55 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8009ace:	6178      	str	r0, [r7, #20]
        break;
 8009ad0:	e008      	b.n	8009ae4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ad6:	617b      	str	r3, [r7, #20]
        break;
 8009ad8:	e004      	b.n	8009ae4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	76bb      	strb	r3, [r7, #26]
        break;
 8009ae2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80fe 	beq.w	8009ce8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	4413      	add	r3, r2
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d305      	bcc.n	8009b08 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d902      	bls.n	8009b0e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	76bb      	strb	r3, [r7, #26]
 8009b0c:	e0ec      	b.n	8009ce8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f04f 0100 	mov.w	r1, #0
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	020b      	lsls	r3, r1, #8
 8009b20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b24:	0202      	lsls	r2, r0, #8
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	6849      	ldr	r1, [r1, #4]
 8009b2a:	0849      	lsrs	r1, r1, #1
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	f04f 0100 	mov.w	r1, #0
 8009b32:	1814      	adds	r4, r2, r0
 8009b34:	eb43 0501 	adc.w	r5, r3, r1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f04f 0300 	mov.w	r3, #0
 8009b42:	4620      	mov	r0, r4
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7f6 fb93 	bl	8000270 <__aeabi_uldivmod>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4613      	mov	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b58:	d308      	bcc.n	8009b6c <UART_SetConfig+0x280>
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b60:	d204      	bcs.n	8009b6c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	60da      	str	r2, [r3, #12]
 8009b6a:	e0bd      	b.n	8009ce8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	76bb      	strb	r3, [r7, #26]
 8009b70:	e0ba      	b.n	8009ce8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b7a:	d168      	bne.n	8009c4e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8009b7c:	7efb      	ldrb	r3, [r7, #27]
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d834      	bhi.n	8009bec <UART_SetConfig+0x300>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <UART_SetConfig+0x29c>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009bad 	.word	0x08009bad
 8009b8c:	08009bb5 	.word	0x08009bb5
 8009b90:	08009bbd 	.word	0x08009bbd
 8009b94:	08009bed 	.word	0x08009bed
 8009b98:	08009bc3 	.word	0x08009bc3
 8009b9c:	08009bed 	.word	0x08009bed
 8009ba0:	08009bed 	.word	0x08009bed
 8009ba4:	08009bed 	.word	0x08009bed
 8009ba8:	08009bcb 	.word	0x08009bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bac:	f7fd ff7c 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8009bb0:	6178      	str	r0, [r7, #20]
        break;
 8009bb2:	e020      	b.n	8009bf6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bb4:	f7fd ff8e 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 8009bb8:	6178      	str	r0, [r7, #20]
        break;
 8009bba:	e01c      	b.n	8009bf6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bbc:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <UART_SetConfig+0x2fc>)
 8009bbe:	617b      	str	r3, [r7, #20]
        break;
 8009bc0:	e019      	b.n	8009bf6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bc2:	f7fd fed9 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8009bc6:	6178      	str	r0, [r7, #20]
        break;
 8009bc8:	e015      	b.n	8009bf6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bce:	617b      	str	r3, [r7, #20]
        break;
 8009bd0:	e011      	b.n	8009bf6 <UART_SetConfig+0x30a>
 8009bd2:	bf00      	nop
 8009bd4:	efff69f3 	.word	0xefff69f3
 8009bd8:	40008000 	.word	0x40008000
 8009bdc:	40013800 	.word	0x40013800
 8009be0:	40021000 	.word	0x40021000
 8009be4:	40004400 	.word	0x40004400
 8009be8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	76bb      	strb	r3, [r7, #26]
        break;
 8009bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d075      	beq.n	8009ce8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	005a      	lsls	r2, r3, #1
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	085b      	lsrs	r3, r3, #1
 8009c06:	441a      	add	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b0f      	cmp	r3, #15
 8009c18:	d916      	bls.n	8009c48 <UART_SetConfig+0x35c>
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c20:	d212      	bcs.n	8009c48 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f023 030f 	bic.w	r3, r3, #15
 8009c2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	89fa      	ldrh	r2, [r7, #14]
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	e04f      	b.n	8009ce8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	76bb      	strb	r3, [r7, #26]
 8009c4c:	e04c      	b.n	8009ce8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c4e:	7efb      	ldrb	r3, [r7, #27]
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	d828      	bhi.n	8009ca6 <UART_SetConfig+0x3ba>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <UART_SetConfig+0x370>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c89 	.word	0x08009c89
 8009c64:	08009c91 	.word	0x08009c91
 8009c68:	08009ca7 	.word	0x08009ca7
 8009c6c:	08009c97 	.word	0x08009c97
 8009c70:	08009ca7 	.word	0x08009ca7
 8009c74:	08009ca7 	.word	0x08009ca7
 8009c78:	08009ca7 	.word	0x08009ca7
 8009c7c:	08009c9f 	.word	0x08009c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c80:	f7fd ff12 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8009c84:	6178      	str	r0, [r7, #20]
        break;
 8009c86:	e013      	b.n	8009cb0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c88:	f7fd ff24 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 8009c8c:	6178      	str	r0, [r7, #20]
        break;
 8009c8e:	e00f      	b.n	8009cb0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c90:	4b1b      	ldr	r3, [pc, #108]	; (8009d00 <UART_SetConfig+0x414>)
 8009c92:	617b      	str	r3, [r7, #20]
        break;
 8009c94:	e00c      	b.n	8009cb0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c96:	f7fd fe6f 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8009c9a:	6178      	str	r0, [r7, #20]
        break;
 8009c9c:	e008      	b.n	8009cb0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ca2:	617b      	str	r3, [r7, #20]
        break;
 8009ca4:	e004      	b.n	8009cb0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	76bb      	strb	r3, [r7, #26]
        break;
 8009cae:	bf00      	nop
    }

    if (pclk != 0U)
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d018      	beq.n	8009ce8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	085a      	lsrs	r2, r3, #1
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	441a      	add	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b0f      	cmp	r3, #15
 8009cd0:	d908      	bls.n	8009ce4 <UART_SetConfig+0x3f8>
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd8:	d204      	bcs.n	8009ce4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	60da      	str	r2, [r3, #12]
 8009ce2:	e001      	b.n	8009ce8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009cf4:	7ebb      	ldrb	r3, [r7, #26]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	00f42400 	.word	0x00f42400

08009d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00a      	beq.n	8009d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	430a      	orrs	r2, r1
 8009db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01a      	beq.n	8009e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e02:	d10a      	bne.n	8009e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	605a      	str	r2, [r3, #4]
  }
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e58:	f7f9 fc4a 	bl	80036f0 <HAL_GetTick>
 8009e5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b08      	cmp	r3, #8
 8009e6a:	d10e      	bne.n	8009e8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f82d 	bl	8009eda <UART_WaitOnFlagUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e023      	b.n	8009ed2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d10e      	bne.n	8009eb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f817 	bl	8009eda <UART_WaitOnFlagUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e00d      	b.n	8009ed2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	603b      	str	r3, [r7, #0]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eea:	e05e      	b.n	8009faa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d05a      	beq.n	8009faa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef4:	f7f9 fbfc 	bl	80036f0 <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d302      	bcc.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x30>
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d11b      	bne.n	8009f42 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0201 	bic.w	r2, r2, #1
 8009f28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2220      	movs	r2, #32
 8009f34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e043      	b.n	8009fca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d02c      	beq.n	8009faa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f5e:	d124      	bne.n	8009faa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f68:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0201 	bic.w	r2, r2, #1
 8009f88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e00f      	b.n	8009fca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69da      	ldr	r2, [r3, #28]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	bf0c      	ite	eq
 8009fba:	2301      	moveq	r3, #1
 8009fbc:	2300      	movne	r3, #0
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d091      	beq.n	8009eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	88fa      	ldrh	r2, [r7, #6]
 8009fec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	88fa      	ldrh	r2, [r7, #6]
 8009ff4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a006:	d10e      	bne.n	800a026 <UART_Start_Receive_IT+0x52>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d105      	bne.n	800a01c <UART_Start_Receive_IT+0x48>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a016:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a01a:	e02d      	b.n	800a078 <UART_Start_Receive_IT+0xa4>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	22ff      	movs	r2, #255	; 0xff
 800a020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a024:	e028      	b.n	800a078 <UART_Start_Receive_IT+0xa4>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10d      	bne.n	800a04a <UART_Start_Receive_IT+0x76>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d104      	bne.n	800a040 <UART_Start_Receive_IT+0x6c>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	22ff      	movs	r2, #255	; 0xff
 800a03a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a03e:	e01b      	b.n	800a078 <UART_Start_Receive_IT+0xa4>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	227f      	movs	r2, #127	; 0x7f
 800a044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a048:	e016      	b.n	800a078 <UART_Start_Receive_IT+0xa4>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a052:	d10d      	bne.n	800a070 <UART_Start_Receive_IT+0x9c>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d104      	bne.n	800a066 <UART_Start_Receive_IT+0x92>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	227f      	movs	r2, #127	; 0x7f
 800a060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a064:	e008      	b.n	800a078 <UART_Start_Receive_IT+0xa4>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	223f      	movs	r2, #63	; 0x3f
 800a06a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a06e:	e003      	b.n	800a078 <UART_Start_Receive_IT+0xa4>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2222      	movs	r2, #34	; 0x22
 800a084:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689a      	ldr	r2, [r3, #8]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f042 0201 	orr.w	r2, r2, #1
 800a094:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a09e:	d107      	bne.n	800a0b0 <UART_Start_Receive_IT+0xdc>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4a0c      	ldr	r2, [pc, #48]	; (800a0dc <UART_Start_Receive_IT+0x108>)
 800a0ac:	665a      	str	r2, [r3, #100]	; 0x64
 800a0ae:	e002      	b.n	800a0b6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a0b      	ldr	r2, [pc, #44]	; (800a0e0 <UART_Start_Receive_IT+0x10c>)
 800a0b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a0cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	0800a3df 	.word	0x0800a3df
 800a0e0:	0800a307 	.word	0x0800a307

0800a0e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0201 	bic.w	r2, r2, #1
 800a10a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a110:	2b01      	cmp	r3, #1
 800a112:	d107      	bne.n	800a124 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0210 	bic.w	r2, r2, #16
 800a122:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a136:	bf00      	nop
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7f7 fe93 	bl	8001e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a166:	bf00      	nop
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2220      	movs	r2, #32
 800a188:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff fb56 	bl	800983c <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	220f      	movs	r2, #15
 800a1b4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	8b1b      	ldrh	r3, [r3, #24]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0208 	orr.w	r2, r2, #8
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f7ff fb3a 	bl	8009850 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1f0:	2b21      	cmp	r3, #33	; 0x21
 800a1f2:	d12b      	bne.n	800a24c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d110      	bne.n	800a222 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a20e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a21e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a220:	e014      	b.n	800a24c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	b292      	uxth	r2, r2
 800a22e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a240:	b29b      	uxth	r3, r3
 800a242:	3b01      	subs	r3, #1
 800a244:	b29a      	uxth	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a264:	2b21      	cmp	r3, #33	; 0x21
 800a266:	d12f      	bne.n	800a2c8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d110      	bne.n	800a296 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a282:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a292:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a294:	e018      	b.n	800a2c8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	881a      	ldrh	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2a8:	b292      	uxth	r2, r2
 800a2aa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b0:	1c9a      	adds	r2, r3, #2
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a2c8:	bf00      	nop
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7f7 fda7 	bl	8001e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a314:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a31a:	2b22      	cmp	r3, #34	; 0x22
 800a31c:	d151      	bne.n	800a3c2 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a324:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a326:	89bb      	ldrh	r3, [r7, #12]
 800a328:	b2d9      	uxtb	r1, r3
 800a32a:	89fb      	ldrh	r3, [r7, #14]
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	400a      	ands	r2, r1
 800a334:	b2d2      	uxtb	r2, r2
 800a336:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a348:	b29b      	uxth	r3, r3
 800a34a:	3b01      	subs	r3, #1
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d13a      	bne.n	800a3d6 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a36e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689a      	ldr	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2220      	movs	r2, #32
 800a384:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a390:	2b01      	cmp	r3, #1
 800a392:	d10f      	bne.n	800a3b4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0210 	bic.w	r2, r2, #16
 800a3a2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fa59 	bl	8009864 <HAL_UARTEx_RxEventCallback>
 800a3b2:	e002      	b.n	800a3ba <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7f7 fd59 	bl	8001e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3c0:	e009      	b.n	800a3d6 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	8b1b      	ldrh	r3, [r3, #24]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0208 	orr.w	r2, r2, #8
 800a3d2:	b292      	uxth	r2, r2
 800a3d4:	831a      	strh	r2, [r3, #24]
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f2:	2b22      	cmp	r3, #34	; 0x22
 800a3f4:	d151      	bne.n	800a49a <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3fc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a402:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a404:	89ba      	ldrh	r2, [r7, #12]
 800a406:	89fb      	ldrh	r3, [r7, #14]
 800a408:	4013      	ands	r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d13a      	bne.n	800a4ae <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a446:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0201 	bic.w	r2, r2, #1
 800a456:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2220      	movs	r2, #32
 800a45c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d10f      	bne.n	800a48c <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 0210 	bic.w	r2, r2, #16
 800a47a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff f9ed 	bl	8009864 <HAL_UARTEx_RxEventCallback>
 800a48a:	e002      	b.n	800a492 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7f7 fced 	bl	8001e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a498:	e009      	b.n	800a4ae <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	8b1b      	ldrh	r3, [r3, #24]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0208 	orr.w	r2, r2, #8
 800a4aa:	b292      	uxth	r2, r2
 800a4ac:	831a      	strh	r2, [r3, #24]
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <__errno>:
 800a4cc:	4b01      	ldr	r3, [pc, #4]	; (800a4d4 <__errno+0x8>)
 800a4ce:	6818      	ldr	r0, [r3, #0]
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	2000000c 	.word	0x2000000c

0800a4d8 <__libc_init_array>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	4d0d      	ldr	r5, [pc, #52]	; (800a510 <__libc_init_array+0x38>)
 800a4dc:	4c0d      	ldr	r4, [pc, #52]	; (800a514 <__libc_init_array+0x3c>)
 800a4de:	1b64      	subs	r4, r4, r5
 800a4e0:	10a4      	asrs	r4, r4, #2
 800a4e2:	2600      	movs	r6, #0
 800a4e4:	42a6      	cmp	r6, r4
 800a4e6:	d109      	bne.n	800a4fc <__libc_init_array+0x24>
 800a4e8:	4d0b      	ldr	r5, [pc, #44]	; (800a518 <__libc_init_array+0x40>)
 800a4ea:	4c0c      	ldr	r4, [pc, #48]	; (800a51c <__libc_init_array+0x44>)
 800a4ec:	f000 fc62 	bl	800adb4 <_init>
 800a4f0:	1b64      	subs	r4, r4, r5
 800a4f2:	10a4      	asrs	r4, r4, #2
 800a4f4:	2600      	movs	r6, #0
 800a4f6:	42a6      	cmp	r6, r4
 800a4f8:	d105      	bne.n	800a506 <__libc_init_array+0x2e>
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}
 800a4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a500:	4798      	blx	r3
 800a502:	3601      	adds	r6, #1
 800a504:	e7ee      	b.n	800a4e4 <__libc_init_array+0xc>
 800a506:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50a:	4798      	blx	r3
 800a50c:	3601      	adds	r6, #1
 800a50e:	e7f2      	b.n	800a4f6 <__libc_init_array+0x1e>
 800a510:	0800b564 	.word	0x0800b564
 800a514:	0800b564 	.word	0x0800b564
 800a518:	0800b564 	.word	0x0800b564
 800a51c:	0800b568 	.word	0x0800b568

0800a520 <memcpy>:
 800a520:	440a      	add	r2, r1
 800a522:	4291      	cmp	r1, r2
 800a524:	f100 33ff 	add.w	r3, r0, #4294967295
 800a528:	d100      	bne.n	800a52c <memcpy+0xc>
 800a52a:	4770      	bx	lr
 800a52c:	b510      	push	{r4, lr}
 800a52e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a532:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a536:	4291      	cmp	r1, r2
 800a538:	d1f9      	bne.n	800a52e <memcpy+0xe>
 800a53a:	bd10      	pop	{r4, pc}

0800a53c <memset>:
 800a53c:	4402      	add	r2, r0
 800a53e:	4603      	mov	r3, r0
 800a540:	4293      	cmp	r3, r2
 800a542:	d100      	bne.n	800a546 <memset+0xa>
 800a544:	4770      	bx	lr
 800a546:	f803 1b01 	strb.w	r1, [r3], #1
 800a54a:	e7f9      	b.n	800a540 <memset+0x4>

0800a54c <sniprintf>:
 800a54c:	b40c      	push	{r2, r3}
 800a54e:	b530      	push	{r4, r5, lr}
 800a550:	4b17      	ldr	r3, [pc, #92]	; (800a5b0 <sniprintf+0x64>)
 800a552:	1e0c      	subs	r4, r1, #0
 800a554:	681d      	ldr	r5, [r3, #0]
 800a556:	b09d      	sub	sp, #116	; 0x74
 800a558:	da08      	bge.n	800a56c <sniprintf+0x20>
 800a55a:	238b      	movs	r3, #139	; 0x8b
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	b01d      	add	sp, #116	; 0x74
 800a564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a568:	b002      	add	sp, #8
 800a56a:	4770      	bx	lr
 800a56c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a570:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a574:	bf14      	ite	ne
 800a576:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a57a:	4623      	moveq	r3, r4
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	9307      	str	r3, [sp, #28]
 800a580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a584:	9002      	str	r0, [sp, #8]
 800a586:	9006      	str	r0, [sp, #24]
 800a588:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a58c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a58e:	ab21      	add	r3, sp, #132	; 0x84
 800a590:	a902      	add	r1, sp, #8
 800a592:	4628      	mov	r0, r5
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	f000 f869 	bl	800a66c <_svfiprintf_r>
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	bfbc      	itt	lt
 800a59e:	238b      	movlt	r3, #139	; 0x8b
 800a5a0:	602b      	strlt	r3, [r5, #0]
 800a5a2:	2c00      	cmp	r4, #0
 800a5a4:	d0dd      	beq.n	800a562 <sniprintf+0x16>
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	701a      	strb	r2, [r3, #0]
 800a5ac:	e7d9      	b.n	800a562 <sniprintf+0x16>
 800a5ae:	bf00      	nop
 800a5b0:	2000000c 	.word	0x2000000c

0800a5b4 <__ssputs_r>:
 800a5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b8:	688e      	ldr	r6, [r1, #8]
 800a5ba:	429e      	cmp	r6, r3
 800a5bc:	4682      	mov	sl, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	4690      	mov	r8, r2
 800a5c2:	461f      	mov	r7, r3
 800a5c4:	d838      	bhi.n	800a638 <__ssputs_r+0x84>
 800a5c6:	898a      	ldrh	r2, [r1, #12]
 800a5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5cc:	d032      	beq.n	800a634 <__ssputs_r+0x80>
 800a5ce:	6825      	ldr	r5, [r4, #0]
 800a5d0:	6909      	ldr	r1, [r1, #16]
 800a5d2:	eba5 0901 	sub.w	r9, r5, r1
 800a5d6:	6965      	ldr	r5, [r4, #20]
 800a5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	444b      	add	r3, r9
 800a5e4:	106d      	asrs	r5, r5, #1
 800a5e6:	429d      	cmp	r5, r3
 800a5e8:	bf38      	it	cc
 800a5ea:	461d      	movcc	r5, r3
 800a5ec:	0553      	lsls	r3, r2, #21
 800a5ee:	d531      	bpl.n	800a654 <__ssputs_r+0xa0>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	f000 fb39 	bl	800ac68 <_malloc_r>
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	b950      	cbnz	r0, 800a610 <__ssputs_r+0x5c>
 800a5fa:	230c      	movs	r3, #12
 800a5fc:	f8ca 3000 	str.w	r3, [sl]
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	f04f 30ff 	mov.w	r0, #4294967295
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a610:	6921      	ldr	r1, [r4, #16]
 800a612:	464a      	mov	r2, r9
 800a614:	f7ff ff84 	bl	800a520 <memcpy>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a622:	81a3      	strh	r3, [r4, #12]
 800a624:	6126      	str	r6, [r4, #16]
 800a626:	6165      	str	r5, [r4, #20]
 800a628:	444e      	add	r6, r9
 800a62a:	eba5 0509 	sub.w	r5, r5, r9
 800a62e:	6026      	str	r6, [r4, #0]
 800a630:	60a5      	str	r5, [r4, #8]
 800a632:	463e      	mov	r6, r7
 800a634:	42be      	cmp	r6, r7
 800a636:	d900      	bls.n	800a63a <__ssputs_r+0x86>
 800a638:	463e      	mov	r6, r7
 800a63a:	4632      	mov	r2, r6
 800a63c:	6820      	ldr	r0, [r4, #0]
 800a63e:	4641      	mov	r1, r8
 800a640:	f000 faa8 	bl	800ab94 <memmove>
 800a644:	68a3      	ldr	r3, [r4, #8]
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	1b9b      	subs	r3, r3, r6
 800a64a:	4432      	add	r2, r6
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	2000      	movs	r0, #0
 800a652:	e7db      	b.n	800a60c <__ssputs_r+0x58>
 800a654:	462a      	mov	r2, r5
 800a656:	f000 fb61 	bl	800ad1c <_realloc_r>
 800a65a:	4606      	mov	r6, r0
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1e1      	bne.n	800a624 <__ssputs_r+0x70>
 800a660:	6921      	ldr	r1, [r4, #16]
 800a662:	4650      	mov	r0, sl
 800a664:	f000 fab0 	bl	800abc8 <_free_r>
 800a668:	e7c7      	b.n	800a5fa <__ssputs_r+0x46>
	...

0800a66c <_svfiprintf_r>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	4698      	mov	r8, r3
 800a672:	898b      	ldrh	r3, [r1, #12]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	b09d      	sub	sp, #116	; 0x74
 800a678:	4607      	mov	r7, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	d50e      	bpl.n	800a69e <_svfiprintf_r+0x32>
 800a680:	690b      	ldr	r3, [r1, #16]
 800a682:	b963      	cbnz	r3, 800a69e <_svfiprintf_r+0x32>
 800a684:	2140      	movs	r1, #64	; 0x40
 800a686:	f000 faef 	bl	800ac68 <_malloc_r>
 800a68a:	6028      	str	r0, [r5, #0]
 800a68c:	6128      	str	r0, [r5, #16]
 800a68e:	b920      	cbnz	r0, 800a69a <_svfiprintf_r+0x2e>
 800a690:	230c      	movs	r3, #12
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	f04f 30ff 	mov.w	r0, #4294967295
 800a698:	e0d1      	b.n	800a83e <_svfiprintf_r+0x1d2>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	616b      	str	r3, [r5, #20]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a2:	2320      	movs	r3, #32
 800a6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ac:	2330      	movs	r3, #48	; 0x30
 800a6ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a858 <_svfiprintf_r+0x1ec>
 800a6b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b6:	f04f 0901 	mov.w	r9, #1
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	469a      	mov	sl, r3
 800a6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c2:	b10a      	cbz	r2, 800a6c8 <_svfiprintf_r+0x5c>
 800a6c4:	2a25      	cmp	r2, #37	; 0x25
 800a6c6:	d1f9      	bne.n	800a6bc <_svfiprintf_r+0x50>
 800a6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a6cc:	d00b      	beq.n	800a6e6 <_svfiprintf_r+0x7a>
 800a6ce:	465b      	mov	r3, fp
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f7ff ff6d 	bl	800a5b4 <__ssputs_r>
 800a6da:	3001      	adds	r0, #1
 800a6dc:	f000 80aa 	beq.w	800a834 <_svfiprintf_r+0x1c8>
 800a6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e2:	445a      	add	r2, fp
 800a6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 80a2 	beq.w	800a834 <_svfiprintf_r+0x1c8>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fa:	f10a 0a01 	add.w	sl, sl, #1
 800a6fe:	9304      	str	r3, [sp, #16]
 800a700:	9307      	str	r3, [sp, #28]
 800a702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a706:	931a      	str	r3, [sp, #104]	; 0x68
 800a708:	4654      	mov	r4, sl
 800a70a:	2205      	movs	r2, #5
 800a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a710:	4851      	ldr	r0, [pc, #324]	; (800a858 <_svfiprintf_r+0x1ec>)
 800a712:	f7f5 fd5d 	bl	80001d0 <memchr>
 800a716:	9a04      	ldr	r2, [sp, #16]
 800a718:	b9d8      	cbnz	r0, 800a752 <_svfiprintf_r+0xe6>
 800a71a:	06d0      	lsls	r0, r2, #27
 800a71c:	bf44      	itt	mi
 800a71e:	2320      	movmi	r3, #32
 800a720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a724:	0711      	lsls	r1, r2, #28
 800a726:	bf44      	itt	mi
 800a728:	232b      	movmi	r3, #43	; 0x2b
 800a72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72e:	f89a 3000 	ldrb.w	r3, [sl]
 800a732:	2b2a      	cmp	r3, #42	; 0x2a
 800a734:	d015      	beq.n	800a762 <_svfiprintf_r+0xf6>
 800a736:	9a07      	ldr	r2, [sp, #28]
 800a738:	4654      	mov	r4, sl
 800a73a:	2000      	movs	r0, #0
 800a73c:	f04f 0c0a 	mov.w	ip, #10
 800a740:	4621      	mov	r1, r4
 800a742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a746:	3b30      	subs	r3, #48	; 0x30
 800a748:	2b09      	cmp	r3, #9
 800a74a:	d94e      	bls.n	800a7ea <_svfiprintf_r+0x17e>
 800a74c:	b1b0      	cbz	r0, 800a77c <_svfiprintf_r+0x110>
 800a74e:	9207      	str	r2, [sp, #28]
 800a750:	e014      	b.n	800a77c <_svfiprintf_r+0x110>
 800a752:	eba0 0308 	sub.w	r3, r0, r8
 800a756:	fa09 f303 	lsl.w	r3, r9, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	46a2      	mov	sl, r4
 800a760:	e7d2      	b.n	800a708 <_svfiprintf_r+0x9c>
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	1d19      	adds	r1, r3, #4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	9103      	str	r1, [sp, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	bfbb      	ittet	lt
 800a76e:	425b      	neglt	r3, r3
 800a770:	f042 0202 	orrlt.w	r2, r2, #2
 800a774:	9307      	strge	r3, [sp, #28]
 800a776:	9307      	strlt	r3, [sp, #28]
 800a778:	bfb8      	it	lt
 800a77a:	9204      	strlt	r2, [sp, #16]
 800a77c:	7823      	ldrb	r3, [r4, #0]
 800a77e:	2b2e      	cmp	r3, #46	; 0x2e
 800a780:	d10c      	bne.n	800a79c <_svfiprintf_r+0x130>
 800a782:	7863      	ldrb	r3, [r4, #1]
 800a784:	2b2a      	cmp	r3, #42	; 0x2a
 800a786:	d135      	bne.n	800a7f4 <_svfiprintf_r+0x188>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	1d1a      	adds	r2, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9203      	str	r2, [sp, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfb8      	it	lt
 800a794:	f04f 33ff 	movlt.w	r3, #4294967295
 800a798:	3402      	adds	r4, #2
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a868 <_svfiprintf_r+0x1fc>
 800a7a0:	7821      	ldrb	r1, [r4, #0]
 800a7a2:	2203      	movs	r2, #3
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	f7f5 fd13 	bl	80001d0 <memchr>
 800a7aa:	b140      	cbz	r0, 800a7be <_svfiprintf_r+0x152>
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	eba0 000a 	sub.w	r0, r0, sl
 800a7b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a7b6:	9b04      	ldr	r3, [sp, #16]
 800a7b8:	4303      	orrs	r3, r0
 800a7ba:	3401      	adds	r4, #1
 800a7bc:	9304      	str	r3, [sp, #16]
 800a7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c2:	4826      	ldr	r0, [pc, #152]	; (800a85c <_svfiprintf_r+0x1f0>)
 800a7c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7c8:	2206      	movs	r2, #6
 800a7ca:	f7f5 fd01 	bl	80001d0 <memchr>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d038      	beq.n	800a844 <_svfiprintf_r+0x1d8>
 800a7d2:	4b23      	ldr	r3, [pc, #140]	; (800a860 <_svfiprintf_r+0x1f4>)
 800a7d4:	bb1b      	cbnz	r3, 800a81e <_svfiprintf_r+0x1b2>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	3307      	adds	r3, #7
 800a7da:	f023 0307 	bic.w	r3, r3, #7
 800a7de:	3308      	adds	r3, #8
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e4:	4433      	add	r3, r6
 800a7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e8:	e767      	b.n	800a6ba <_svfiprintf_r+0x4e>
 800a7ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	e7a5      	b.n	800a740 <_svfiprintf_r+0xd4>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	3401      	adds	r4, #1
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f04f 0c0a 	mov.w	ip, #10
 800a800:	4620      	mov	r0, r4
 800a802:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a806:	3a30      	subs	r2, #48	; 0x30
 800a808:	2a09      	cmp	r2, #9
 800a80a:	d903      	bls.n	800a814 <_svfiprintf_r+0x1a8>
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d0c5      	beq.n	800a79c <_svfiprintf_r+0x130>
 800a810:	9105      	str	r1, [sp, #20]
 800a812:	e7c3      	b.n	800a79c <_svfiprintf_r+0x130>
 800a814:	fb0c 2101 	mla	r1, ip, r1, r2
 800a818:	4604      	mov	r4, r0
 800a81a:	2301      	movs	r3, #1
 800a81c:	e7f0      	b.n	800a800 <_svfiprintf_r+0x194>
 800a81e:	ab03      	add	r3, sp, #12
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	462a      	mov	r2, r5
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <_svfiprintf_r+0x1f8>)
 800a826:	a904      	add	r1, sp, #16
 800a828:	4638      	mov	r0, r7
 800a82a:	f3af 8000 	nop.w
 800a82e:	1c42      	adds	r2, r0, #1
 800a830:	4606      	mov	r6, r0
 800a832:	d1d6      	bne.n	800a7e2 <_svfiprintf_r+0x176>
 800a834:	89ab      	ldrh	r3, [r5, #12]
 800a836:	065b      	lsls	r3, r3, #25
 800a838:	f53f af2c 	bmi.w	800a694 <_svfiprintf_r+0x28>
 800a83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83e:	b01d      	add	sp, #116	; 0x74
 800a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a844:	ab03      	add	r3, sp, #12
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	462a      	mov	r2, r5
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <_svfiprintf_r+0x1f8>)
 800a84c:	a904      	add	r1, sp, #16
 800a84e:	4638      	mov	r0, r7
 800a850:	f000 f87a 	bl	800a948 <_printf_i>
 800a854:	e7eb      	b.n	800a82e <_svfiprintf_r+0x1c2>
 800a856:	bf00      	nop
 800a858:	0800b528 	.word	0x0800b528
 800a85c:	0800b532 	.word	0x0800b532
 800a860:	00000000 	.word	0x00000000
 800a864:	0800a5b5 	.word	0x0800a5b5
 800a868:	0800b52e 	.word	0x0800b52e

0800a86c <_printf_common>:
 800a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	4616      	mov	r6, r2
 800a872:	4699      	mov	r9, r3
 800a874:	688a      	ldr	r2, [r1, #8]
 800a876:	690b      	ldr	r3, [r1, #16]
 800a878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a87c:	4293      	cmp	r3, r2
 800a87e:	bfb8      	it	lt
 800a880:	4613      	movlt	r3, r2
 800a882:	6033      	str	r3, [r6, #0]
 800a884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a888:	4607      	mov	r7, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b10a      	cbz	r2, 800a892 <_printf_common+0x26>
 800a88e:	3301      	adds	r3, #1
 800a890:	6033      	str	r3, [r6, #0]
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	0699      	lsls	r1, r3, #26
 800a896:	bf42      	ittt	mi
 800a898:	6833      	ldrmi	r3, [r6, #0]
 800a89a:	3302      	addmi	r3, #2
 800a89c:	6033      	strmi	r3, [r6, #0]
 800a89e:	6825      	ldr	r5, [r4, #0]
 800a8a0:	f015 0506 	ands.w	r5, r5, #6
 800a8a4:	d106      	bne.n	800a8b4 <_printf_common+0x48>
 800a8a6:	f104 0a19 	add.w	sl, r4, #25
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	6832      	ldr	r2, [r6, #0]
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dc26      	bgt.n	800a902 <_printf_common+0x96>
 800a8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8b8:	1e13      	subs	r3, r2, #0
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	bf18      	it	ne
 800a8be:	2301      	movne	r3, #1
 800a8c0:	0692      	lsls	r2, r2, #26
 800a8c2:	d42b      	bmi.n	800a91c <_printf_common+0xb0>
 800a8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	47c0      	blx	r8
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d01e      	beq.n	800a910 <_printf_common+0xa4>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	68e5      	ldr	r5, [r4, #12]
 800a8d6:	6832      	ldr	r2, [r6, #0]
 800a8d8:	f003 0306 	and.w	r3, r3, #6
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	bf08      	it	eq
 800a8e0:	1aad      	subeq	r5, r5, r2
 800a8e2:	68a3      	ldr	r3, [r4, #8]
 800a8e4:	6922      	ldr	r2, [r4, #16]
 800a8e6:	bf0c      	ite	eq
 800a8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8ec:	2500      	movne	r5, #0
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	bfc4      	itt	gt
 800a8f2:	1a9b      	subgt	r3, r3, r2
 800a8f4:	18ed      	addgt	r5, r5, r3
 800a8f6:	2600      	movs	r6, #0
 800a8f8:	341a      	adds	r4, #26
 800a8fa:	42b5      	cmp	r5, r6
 800a8fc:	d11a      	bne.n	800a934 <_printf_common+0xc8>
 800a8fe:	2000      	movs	r0, #0
 800a900:	e008      	b.n	800a914 <_printf_common+0xa8>
 800a902:	2301      	movs	r3, #1
 800a904:	4652      	mov	r2, sl
 800a906:	4649      	mov	r1, r9
 800a908:	4638      	mov	r0, r7
 800a90a:	47c0      	blx	r8
 800a90c:	3001      	adds	r0, #1
 800a90e:	d103      	bne.n	800a918 <_printf_common+0xac>
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a918:	3501      	adds	r5, #1
 800a91a:	e7c6      	b.n	800a8aa <_printf_common+0x3e>
 800a91c:	18e1      	adds	r1, r4, r3
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	2030      	movs	r0, #48	; 0x30
 800a922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a926:	4422      	add	r2, r4
 800a928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a930:	3302      	adds	r3, #2
 800a932:	e7c7      	b.n	800a8c4 <_printf_common+0x58>
 800a934:	2301      	movs	r3, #1
 800a936:	4622      	mov	r2, r4
 800a938:	4649      	mov	r1, r9
 800a93a:	4638      	mov	r0, r7
 800a93c:	47c0      	blx	r8
 800a93e:	3001      	adds	r0, #1
 800a940:	d0e6      	beq.n	800a910 <_printf_common+0xa4>
 800a942:	3601      	adds	r6, #1
 800a944:	e7d9      	b.n	800a8fa <_printf_common+0x8e>
	...

0800a948 <_printf_i>:
 800a948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a94c:	460c      	mov	r4, r1
 800a94e:	4691      	mov	r9, r2
 800a950:	7e27      	ldrb	r7, [r4, #24]
 800a952:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a954:	2f78      	cmp	r7, #120	; 0x78
 800a956:	4680      	mov	r8, r0
 800a958:	469a      	mov	sl, r3
 800a95a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a95e:	d807      	bhi.n	800a970 <_printf_i+0x28>
 800a960:	2f62      	cmp	r7, #98	; 0x62
 800a962:	d80a      	bhi.n	800a97a <_printf_i+0x32>
 800a964:	2f00      	cmp	r7, #0
 800a966:	f000 80d8 	beq.w	800ab1a <_printf_i+0x1d2>
 800a96a:	2f58      	cmp	r7, #88	; 0x58
 800a96c:	f000 80a3 	beq.w	800aab6 <_printf_i+0x16e>
 800a970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a978:	e03a      	b.n	800a9f0 <_printf_i+0xa8>
 800a97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a97e:	2b15      	cmp	r3, #21
 800a980:	d8f6      	bhi.n	800a970 <_printf_i+0x28>
 800a982:	a001      	add	r0, pc, #4	; (adr r0, 800a988 <_printf_i+0x40>)
 800a984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a988:	0800a9e1 	.word	0x0800a9e1
 800a98c:	0800a9f5 	.word	0x0800a9f5
 800a990:	0800a971 	.word	0x0800a971
 800a994:	0800a971 	.word	0x0800a971
 800a998:	0800a971 	.word	0x0800a971
 800a99c:	0800a971 	.word	0x0800a971
 800a9a0:	0800a9f5 	.word	0x0800a9f5
 800a9a4:	0800a971 	.word	0x0800a971
 800a9a8:	0800a971 	.word	0x0800a971
 800a9ac:	0800a971 	.word	0x0800a971
 800a9b0:	0800a971 	.word	0x0800a971
 800a9b4:	0800ab01 	.word	0x0800ab01
 800a9b8:	0800aa25 	.word	0x0800aa25
 800a9bc:	0800aae3 	.word	0x0800aae3
 800a9c0:	0800a971 	.word	0x0800a971
 800a9c4:	0800a971 	.word	0x0800a971
 800a9c8:	0800ab23 	.word	0x0800ab23
 800a9cc:	0800a971 	.word	0x0800a971
 800a9d0:	0800aa25 	.word	0x0800aa25
 800a9d4:	0800a971 	.word	0x0800a971
 800a9d8:	0800a971 	.word	0x0800a971
 800a9dc:	0800aaeb 	.word	0x0800aaeb
 800a9e0:	680b      	ldr	r3, [r1, #0]
 800a9e2:	1d1a      	adds	r2, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	600a      	str	r2, [r1, #0]
 800a9e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e0a3      	b.n	800ab3c <_printf_i+0x1f4>
 800a9f4:	6825      	ldr	r5, [r4, #0]
 800a9f6:	6808      	ldr	r0, [r1, #0]
 800a9f8:	062e      	lsls	r6, r5, #24
 800a9fa:	f100 0304 	add.w	r3, r0, #4
 800a9fe:	d50a      	bpl.n	800aa16 <_printf_i+0xce>
 800aa00:	6805      	ldr	r5, [r0, #0]
 800aa02:	600b      	str	r3, [r1, #0]
 800aa04:	2d00      	cmp	r5, #0
 800aa06:	da03      	bge.n	800aa10 <_printf_i+0xc8>
 800aa08:	232d      	movs	r3, #45	; 0x2d
 800aa0a:	426d      	negs	r5, r5
 800aa0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa10:	485e      	ldr	r0, [pc, #376]	; (800ab8c <_printf_i+0x244>)
 800aa12:	230a      	movs	r3, #10
 800aa14:	e019      	b.n	800aa4a <_printf_i+0x102>
 800aa16:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa1a:	6805      	ldr	r5, [r0, #0]
 800aa1c:	600b      	str	r3, [r1, #0]
 800aa1e:	bf18      	it	ne
 800aa20:	b22d      	sxthne	r5, r5
 800aa22:	e7ef      	b.n	800aa04 <_printf_i+0xbc>
 800aa24:	680b      	ldr	r3, [r1, #0]
 800aa26:	6825      	ldr	r5, [r4, #0]
 800aa28:	1d18      	adds	r0, r3, #4
 800aa2a:	6008      	str	r0, [r1, #0]
 800aa2c:	0628      	lsls	r0, r5, #24
 800aa2e:	d501      	bpl.n	800aa34 <_printf_i+0xec>
 800aa30:	681d      	ldr	r5, [r3, #0]
 800aa32:	e002      	b.n	800aa3a <_printf_i+0xf2>
 800aa34:	0669      	lsls	r1, r5, #25
 800aa36:	d5fb      	bpl.n	800aa30 <_printf_i+0xe8>
 800aa38:	881d      	ldrh	r5, [r3, #0]
 800aa3a:	4854      	ldr	r0, [pc, #336]	; (800ab8c <_printf_i+0x244>)
 800aa3c:	2f6f      	cmp	r7, #111	; 0x6f
 800aa3e:	bf0c      	ite	eq
 800aa40:	2308      	moveq	r3, #8
 800aa42:	230a      	movne	r3, #10
 800aa44:	2100      	movs	r1, #0
 800aa46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa4a:	6866      	ldr	r6, [r4, #4]
 800aa4c:	60a6      	str	r6, [r4, #8]
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	bfa2      	ittt	ge
 800aa52:	6821      	ldrge	r1, [r4, #0]
 800aa54:	f021 0104 	bicge.w	r1, r1, #4
 800aa58:	6021      	strge	r1, [r4, #0]
 800aa5a:	b90d      	cbnz	r5, 800aa60 <_printf_i+0x118>
 800aa5c:	2e00      	cmp	r6, #0
 800aa5e:	d04d      	beq.n	800aafc <_printf_i+0x1b4>
 800aa60:	4616      	mov	r6, r2
 800aa62:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa66:	fb03 5711 	mls	r7, r3, r1, r5
 800aa6a:	5dc7      	ldrb	r7, [r0, r7]
 800aa6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa70:	462f      	mov	r7, r5
 800aa72:	42bb      	cmp	r3, r7
 800aa74:	460d      	mov	r5, r1
 800aa76:	d9f4      	bls.n	800aa62 <_printf_i+0x11a>
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d10b      	bne.n	800aa94 <_printf_i+0x14c>
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	07df      	lsls	r7, r3, #31
 800aa80:	d508      	bpl.n	800aa94 <_printf_i+0x14c>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	6861      	ldr	r1, [r4, #4]
 800aa86:	4299      	cmp	r1, r3
 800aa88:	bfde      	ittt	le
 800aa8a:	2330      	movle	r3, #48	; 0x30
 800aa8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa94:	1b92      	subs	r2, r2, r6
 800aa96:	6122      	str	r2, [r4, #16]
 800aa98:	f8cd a000 	str.w	sl, [sp]
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	aa03      	add	r2, sp, #12
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	f7ff fee2 	bl	800a86c <_printf_common>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d14c      	bne.n	800ab46 <_printf_i+0x1fe>
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	b004      	add	sp, #16
 800aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab6:	4835      	ldr	r0, [pc, #212]	; (800ab8c <_printf_i+0x244>)
 800aab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	680e      	ldr	r6, [r1, #0]
 800aac0:	061f      	lsls	r7, r3, #24
 800aac2:	f856 5b04 	ldr.w	r5, [r6], #4
 800aac6:	600e      	str	r6, [r1, #0]
 800aac8:	d514      	bpl.n	800aaf4 <_printf_i+0x1ac>
 800aaca:	07d9      	lsls	r1, r3, #31
 800aacc:	bf44      	itt	mi
 800aace:	f043 0320 	orrmi.w	r3, r3, #32
 800aad2:	6023      	strmi	r3, [r4, #0]
 800aad4:	b91d      	cbnz	r5, 800aade <_printf_i+0x196>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	f023 0320 	bic.w	r3, r3, #32
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	2310      	movs	r3, #16
 800aae0:	e7b0      	b.n	800aa44 <_printf_i+0xfc>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	f043 0320 	orr.w	r3, r3, #32
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	2378      	movs	r3, #120	; 0x78
 800aaec:	4828      	ldr	r0, [pc, #160]	; (800ab90 <_printf_i+0x248>)
 800aaee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aaf2:	e7e3      	b.n	800aabc <_printf_i+0x174>
 800aaf4:	065e      	lsls	r6, r3, #25
 800aaf6:	bf48      	it	mi
 800aaf8:	b2ad      	uxthmi	r5, r5
 800aafa:	e7e6      	b.n	800aaca <_printf_i+0x182>
 800aafc:	4616      	mov	r6, r2
 800aafe:	e7bb      	b.n	800aa78 <_printf_i+0x130>
 800ab00:	680b      	ldr	r3, [r1, #0]
 800ab02:	6826      	ldr	r6, [r4, #0]
 800ab04:	6960      	ldr	r0, [r4, #20]
 800ab06:	1d1d      	adds	r5, r3, #4
 800ab08:	600d      	str	r5, [r1, #0]
 800ab0a:	0635      	lsls	r5, r6, #24
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	d501      	bpl.n	800ab14 <_printf_i+0x1cc>
 800ab10:	6018      	str	r0, [r3, #0]
 800ab12:	e002      	b.n	800ab1a <_printf_i+0x1d2>
 800ab14:	0671      	lsls	r1, r6, #25
 800ab16:	d5fb      	bpl.n	800ab10 <_printf_i+0x1c8>
 800ab18:	8018      	strh	r0, [r3, #0]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6123      	str	r3, [r4, #16]
 800ab1e:	4616      	mov	r6, r2
 800ab20:	e7ba      	b.n	800aa98 <_printf_i+0x150>
 800ab22:	680b      	ldr	r3, [r1, #0]
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	600a      	str	r2, [r1, #0]
 800ab28:	681e      	ldr	r6, [r3, #0]
 800ab2a:	6862      	ldr	r2, [r4, #4]
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7f5 fb4e 	bl	80001d0 <memchr>
 800ab34:	b108      	cbz	r0, 800ab3a <_printf_i+0x1f2>
 800ab36:	1b80      	subs	r0, r0, r6
 800ab38:	6060      	str	r0, [r4, #4]
 800ab3a:	6863      	ldr	r3, [r4, #4]
 800ab3c:	6123      	str	r3, [r4, #16]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab44:	e7a8      	b.n	800aa98 <_printf_i+0x150>
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	4632      	mov	r2, r6
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	47d0      	blx	sl
 800ab50:	3001      	adds	r0, #1
 800ab52:	d0ab      	beq.n	800aaac <_printf_i+0x164>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	079b      	lsls	r3, r3, #30
 800ab58:	d413      	bmi.n	800ab82 <_printf_i+0x23a>
 800ab5a:	68e0      	ldr	r0, [r4, #12]
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	4298      	cmp	r0, r3
 800ab60:	bfb8      	it	lt
 800ab62:	4618      	movlt	r0, r3
 800ab64:	e7a4      	b.n	800aab0 <_printf_i+0x168>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4632      	mov	r2, r6
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	47d0      	blx	sl
 800ab70:	3001      	adds	r0, #1
 800ab72:	d09b      	beq.n	800aaac <_printf_i+0x164>
 800ab74:	3501      	adds	r5, #1
 800ab76:	68e3      	ldr	r3, [r4, #12]
 800ab78:	9903      	ldr	r1, [sp, #12]
 800ab7a:	1a5b      	subs	r3, r3, r1
 800ab7c:	42ab      	cmp	r3, r5
 800ab7e:	dcf2      	bgt.n	800ab66 <_printf_i+0x21e>
 800ab80:	e7eb      	b.n	800ab5a <_printf_i+0x212>
 800ab82:	2500      	movs	r5, #0
 800ab84:	f104 0619 	add.w	r6, r4, #25
 800ab88:	e7f5      	b.n	800ab76 <_printf_i+0x22e>
 800ab8a:	bf00      	nop
 800ab8c:	0800b539 	.word	0x0800b539
 800ab90:	0800b54a 	.word	0x0800b54a

0800ab94 <memmove>:
 800ab94:	4288      	cmp	r0, r1
 800ab96:	b510      	push	{r4, lr}
 800ab98:	eb01 0402 	add.w	r4, r1, r2
 800ab9c:	d902      	bls.n	800aba4 <memmove+0x10>
 800ab9e:	4284      	cmp	r4, r0
 800aba0:	4623      	mov	r3, r4
 800aba2:	d807      	bhi.n	800abb4 <memmove+0x20>
 800aba4:	1e43      	subs	r3, r0, #1
 800aba6:	42a1      	cmp	r1, r4
 800aba8:	d008      	beq.n	800abbc <memmove+0x28>
 800abaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abb2:	e7f8      	b.n	800aba6 <memmove+0x12>
 800abb4:	4402      	add	r2, r0
 800abb6:	4601      	mov	r1, r0
 800abb8:	428a      	cmp	r2, r1
 800abba:	d100      	bne.n	800abbe <memmove+0x2a>
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abc6:	e7f7      	b.n	800abb8 <memmove+0x24>

0800abc8 <_free_r>:
 800abc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abca:	2900      	cmp	r1, #0
 800abcc:	d048      	beq.n	800ac60 <_free_r+0x98>
 800abce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd2:	9001      	str	r0, [sp, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f1a1 0404 	sub.w	r4, r1, #4
 800abda:	bfb8      	it	lt
 800abdc:	18e4      	addlt	r4, r4, r3
 800abde:	f000 f8d3 	bl	800ad88 <__malloc_lock>
 800abe2:	4a20      	ldr	r2, [pc, #128]	; (800ac64 <_free_r+0x9c>)
 800abe4:	9801      	ldr	r0, [sp, #4]
 800abe6:	6813      	ldr	r3, [r2, #0]
 800abe8:	4615      	mov	r5, r2
 800abea:	b933      	cbnz	r3, 800abfa <_free_r+0x32>
 800abec:	6063      	str	r3, [r4, #4]
 800abee:	6014      	str	r4, [r2, #0]
 800abf0:	b003      	add	sp, #12
 800abf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abf6:	f000 b8cd 	b.w	800ad94 <__malloc_unlock>
 800abfa:	42a3      	cmp	r3, r4
 800abfc:	d90b      	bls.n	800ac16 <_free_r+0x4e>
 800abfe:	6821      	ldr	r1, [r4, #0]
 800ac00:	1862      	adds	r2, r4, r1
 800ac02:	4293      	cmp	r3, r2
 800ac04:	bf04      	itt	eq
 800ac06:	681a      	ldreq	r2, [r3, #0]
 800ac08:	685b      	ldreq	r3, [r3, #4]
 800ac0a:	6063      	str	r3, [r4, #4]
 800ac0c:	bf04      	itt	eq
 800ac0e:	1852      	addeq	r2, r2, r1
 800ac10:	6022      	streq	r2, [r4, #0]
 800ac12:	602c      	str	r4, [r5, #0]
 800ac14:	e7ec      	b.n	800abf0 <_free_r+0x28>
 800ac16:	461a      	mov	r2, r3
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	b10b      	cbz	r3, 800ac20 <_free_r+0x58>
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	d9fa      	bls.n	800ac16 <_free_r+0x4e>
 800ac20:	6811      	ldr	r1, [r2, #0]
 800ac22:	1855      	adds	r5, r2, r1
 800ac24:	42a5      	cmp	r5, r4
 800ac26:	d10b      	bne.n	800ac40 <_free_r+0x78>
 800ac28:	6824      	ldr	r4, [r4, #0]
 800ac2a:	4421      	add	r1, r4
 800ac2c:	1854      	adds	r4, r2, r1
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	6011      	str	r1, [r2, #0]
 800ac32:	d1dd      	bne.n	800abf0 <_free_r+0x28>
 800ac34:	681c      	ldr	r4, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	6053      	str	r3, [r2, #4]
 800ac3a:	4421      	add	r1, r4
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	e7d7      	b.n	800abf0 <_free_r+0x28>
 800ac40:	d902      	bls.n	800ac48 <_free_r+0x80>
 800ac42:	230c      	movs	r3, #12
 800ac44:	6003      	str	r3, [r0, #0]
 800ac46:	e7d3      	b.n	800abf0 <_free_r+0x28>
 800ac48:	6825      	ldr	r5, [r4, #0]
 800ac4a:	1961      	adds	r1, r4, r5
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf04      	itt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	6063      	str	r3, [r4, #4]
 800ac56:	bf04      	itt	eq
 800ac58:	1949      	addeq	r1, r1, r5
 800ac5a:	6021      	streq	r1, [r4, #0]
 800ac5c:	6054      	str	r4, [r2, #4]
 800ac5e:	e7c7      	b.n	800abf0 <_free_r+0x28>
 800ac60:	b003      	add	sp, #12
 800ac62:	bd30      	pop	{r4, r5, pc}
 800ac64:	20000364 	.word	0x20000364

0800ac68 <_malloc_r>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	1ccd      	adds	r5, r1, #3
 800ac6c:	f025 0503 	bic.w	r5, r5, #3
 800ac70:	3508      	adds	r5, #8
 800ac72:	2d0c      	cmp	r5, #12
 800ac74:	bf38      	it	cc
 800ac76:	250c      	movcc	r5, #12
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	db01      	blt.n	800ac82 <_malloc_r+0x1a>
 800ac7e:	42a9      	cmp	r1, r5
 800ac80:	d903      	bls.n	800ac8a <_malloc_r+0x22>
 800ac82:	230c      	movs	r3, #12
 800ac84:	6033      	str	r3, [r6, #0]
 800ac86:	2000      	movs	r0, #0
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac8a:	f000 f87d 	bl	800ad88 <__malloc_lock>
 800ac8e:	4921      	ldr	r1, [pc, #132]	; (800ad14 <_malloc_r+0xac>)
 800ac90:	680a      	ldr	r2, [r1, #0]
 800ac92:	4614      	mov	r4, r2
 800ac94:	b99c      	cbnz	r4, 800acbe <_malloc_r+0x56>
 800ac96:	4f20      	ldr	r7, [pc, #128]	; (800ad18 <_malloc_r+0xb0>)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	b923      	cbnz	r3, 800aca6 <_malloc_r+0x3e>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f000 f862 	bl	800ad68 <_sbrk_r>
 800aca4:	6038      	str	r0, [r7, #0]
 800aca6:	4629      	mov	r1, r5
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 f85d 	bl	800ad68 <_sbrk_r>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	d123      	bne.n	800acfa <_malloc_r+0x92>
 800acb2:	230c      	movs	r3, #12
 800acb4:	6033      	str	r3, [r6, #0]
 800acb6:	4630      	mov	r0, r6
 800acb8:	f000 f86c 	bl	800ad94 <__malloc_unlock>
 800acbc:	e7e3      	b.n	800ac86 <_malloc_r+0x1e>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	1b5b      	subs	r3, r3, r5
 800acc2:	d417      	bmi.n	800acf4 <_malloc_r+0x8c>
 800acc4:	2b0b      	cmp	r3, #11
 800acc6:	d903      	bls.n	800acd0 <_malloc_r+0x68>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	441c      	add	r4, r3
 800accc:	6025      	str	r5, [r4, #0]
 800acce:	e004      	b.n	800acda <_malloc_r+0x72>
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	42a2      	cmp	r2, r4
 800acd4:	bf0c      	ite	eq
 800acd6:	600b      	streq	r3, [r1, #0]
 800acd8:	6053      	strne	r3, [r2, #4]
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 f85a 	bl	800ad94 <__malloc_unlock>
 800ace0:	f104 000b 	add.w	r0, r4, #11
 800ace4:	1d23      	adds	r3, r4, #4
 800ace6:	f020 0007 	bic.w	r0, r0, #7
 800acea:	1ac2      	subs	r2, r0, r3
 800acec:	d0cc      	beq.n	800ac88 <_malloc_r+0x20>
 800acee:	1a1b      	subs	r3, r3, r0
 800acf0:	50a3      	str	r3, [r4, r2]
 800acf2:	e7c9      	b.n	800ac88 <_malloc_r+0x20>
 800acf4:	4622      	mov	r2, r4
 800acf6:	6864      	ldr	r4, [r4, #4]
 800acf8:	e7cc      	b.n	800ac94 <_malloc_r+0x2c>
 800acfa:	1cc4      	adds	r4, r0, #3
 800acfc:	f024 0403 	bic.w	r4, r4, #3
 800ad00:	42a0      	cmp	r0, r4
 800ad02:	d0e3      	beq.n	800accc <_malloc_r+0x64>
 800ad04:	1a21      	subs	r1, r4, r0
 800ad06:	4630      	mov	r0, r6
 800ad08:	f000 f82e 	bl	800ad68 <_sbrk_r>
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d1dd      	bne.n	800accc <_malloc_r+0x64>
 800ad10:	e7cf      	b.n	800acb2 <_malloc_r+0x4a>
 800ad12:	bf00      	nop
 800ad14:	20000364 	.word	0x20000364
 800ad18:	20000368 	.word	0x20000368

0800ad1c <_realloc_r>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	4607      	mov	r7, r0
 800ad20:	4614      	mov	r4, r2
 800ad22:	460e      	mov	r6, r1
 800ad24:	b921      	cbnz	r1, 800ad30 <_realloc_r+0x14>
 800ad26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	f7ff bf9c 	b.w	800ac68 <_malloc_r>
 800ad30:	b922      	cbnz	r2, 800ad3c <_realloc_r+0x20>
 800ad32:	f7ff ff49 	bl	800abc8 <_free_r>
 800ad36:	4625      	mov	r5, r4
 800ad38:	4628      	mov	r0, r5
 800ad3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad3c:	f000 f830 	bl	800ada0 <_malloc_usable_size_r>
 800ad40:	42a0      	cmp	r0, r4
 800ad42:	d20f      	bcs.n	800ad64 <_realloc_r+0x48>
 800ad44:	4621      	mov	r1, r4
 800ad46:	4638      	mov	r0, r7
 800ad48:	f7ff ff8e 	bl	800ac68 <_malloc_r>
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d0f2      	beq.n	800ad38 <_realloc_r+0x1c>
 800ad52:	4631      	mov	r1, r6
 800ad54:	4622      	mov	r2, r4
 800ad56:	f7ff fbe3 	bl	800a520 <memcpy>
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ff33 	bl	800abc8 <_free_r>
 800ad62:	e7e9      	b.n	800ad38 <_realloc_r+0x1c>
 800ad64:	4635      	mov	r5, r6
 800ad66:	e7e7      	b.n	800ad38 <_realloc_r+0x1c>

0800ad68 <_sbrk_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d06      	ldr	r5, [pc, #24]	; (800ad84 <_sbrk_r+0x1c>)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	f7f6 ff46 	bl	8001c04 <_sbrk>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_sbrk_r+0x1a>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_sbrk_r+0x1a>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20000690 	.word	0x20000690

0800ad88 <__malloc_lock>:
 800ad88:	4801      	ldr	r0, [pc, #4]	; (800ad90 <__malloc_lock+0x8>)
 800ad8a:	f000 b811 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800ad8e:	bf00      	nop
 800ad90:	20000698 	.word	0x20000698

0800ad94 <__malloc_unlock>:
 800ad94:	4801      	ldr	r0, [pc, #4]	; (800ad9c <__malloc_unlock+0x8>)
 800ad96:	f000 b80c 	b.w	800adb2 <__retarget_lock_release_recursive>
 800ad9a:	bf00      	nop
 800ad9c:	20000698 	.word	0x20000698

0800ada0 <_malloc_usable_size_r>:
 800ada0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada4:	1f18      	subs	r0, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bfbc      	itt	lt
 800adaa:	580b      	ldrlt	r3, [r1, r0]
 800adac:	18c0      	addlt	r0, r0, r3
 800adae:	4770      	bx	lr

0800adb0 <__retarget_lock_acquire_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_release_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <_init>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr

0800adc0 <_fini>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr
