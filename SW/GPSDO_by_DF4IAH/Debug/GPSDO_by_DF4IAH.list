
GPSDO_by_DF4IAH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800b830  0800b830  0001b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c05c  0800c05c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c05c  0800c05c  0001c05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c064  0800c064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c064  0800c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c068  0800c068  0001c068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000070  0800c0dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  0800c0dc  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024534  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d3  00000000  00000000  000445d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  000489a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  0004a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026071  00000000  00000000  0004be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000213c7  00000000  00000000  00071f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6541  00000000  00000000  000932d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000772c  00000000  00000000  00179864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b818 	.word	0x0800b818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800b818 	.word	0x0800b818

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800057c:	f043 0204 	orr.w	r2, r3, #4
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d101      	bne.n	80005a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	463b      	mov	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ce:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005d0:	4a46      	ldr	r2, [pc, #280]	; (80006ec <MX_ADC1_Init+0x134>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ee:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f4:	4b3c      	ldr	r3, [pc, #240]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <MX_ADC1_Init+0x130>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000602:	2203      	movs	r2, #3
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060e:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000610:	2200      	movs	r2, #0
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000616:	2200      	movs	r2, #0
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <MX_ADC1_Init+0x130>)
 800061c:	2201      	movs	r2, #1
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000624:	2200      	movs	r2, #0
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000628:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <MX_ADC1_Init+0x130>)
 800062a:	2201      	movs	r2, #1
 800062c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000632:	220c      	movs	r2, #12
 8000634:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000638:	2200      	movs	r2, #0
 800063a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800063c:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_ADC1_Init+0x130>)
 800063e:	2200      	movs	r2, #0
 8000640:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000644:	2201      	movs	r2, #1
 8000646:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4827      	ldr	r0, [pc, #156]	; (80006e8 <MX_ADC1_Init+0x130>)
 800064a:	f003 fbd9 	bl	8003e00 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000654:	f001 fa5a 	bl	8001b0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_ADC1_Init+0x138>)
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2306      	movs	r3, #6
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000660:	2303      	movs	r3, #3
 8000662:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000664:	237f      	movs	r3, #127	; 0x7f
 8000666:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000668:	2304      	movs	r3, #4
 800066a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	481c      	ldr	r0, [pc, #112]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000676:	f003 ff35 	bl	80044e4 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000680:	f001 fa44 	bl	8001b0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_ADC1_Init+0x13c>)
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000688:	230c      	movs	r3, #12
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4815      	ldr	r0, [pc, #84]	; (80006e8 <MX_ADC1_Init+0x130>)
 8000692:	f003 ff27 	bl	80044e4 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800069c:	f001 fa36 	bl	8001b0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x140>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006a4:	2312      	movs	r3, #18
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_ADC1_Init+0x130>)
 80006ae:	f003 ff19 	bl	80044e4 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80006b8:	f001 fa28 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  adcChConfig.Channel		= sConfig.Channel;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <MX_ADC1_Init+0x144>)
 80006c0:	6013      	str	r3, [r2, #0]
  adcChConfig.Rank			= sConfig.Rank;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <MX_ADC1_Init+0x144>)
 80006c6:	6053      	str	r3, [r2, #4]
  adcChConfig.SamplingTime	= sConfig.SamplingTime;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <MX_ADC1_Init+0x144>)
 80006cc:	6093      	str	r3, [r2, #8]
  adcChConfig.SingleDiff	= sConfig.SingleDiff;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <MX_ADC1_Init+0x144>)
 80006d2:	60d3      	str	r3, [r2, #12]
  adcChConfig.OffsetNumber	= sConfig.OffsetNumber;
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <MX_ADC1_Init+0x144>)
 80006d8:	6113      	str	r3, [r2, #16]
  adcChConfig.Offset		= sConfig.Offset;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <MX_ADC1_Init+0x144>)
 80006de:	6153      	str	r3, [r2, #20]

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000364 	.word	0x20000364
 80006ec:	50040000 	.word	0x50040000
 80006f0:	25b00200 	.word	0x25b00200
 80006f4:	2a000400 	.word	0x2a000400
 80006f8:	43210000 	.word	0x43210000
 80006fc:	2000008c 	.word	0x2000008c

08000700 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0a0      	sub	sp, #128	; 0x80
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	2254      	movs	r2, #84	; 0x54
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f00a fc3d 	bl	800afa0 <memset>
  if(adcHandle->Instance==ADC1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a43      	ldr	r2, [pc, #268]	; (8000838 <HAL_ADC_MspInit+0x138>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d17f      	bne.n	8000830 <HAL_ADC_MspInit+0x130>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000734:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000736:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800073a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4618      	mov	r0, r3
 8000742:	f007 ffa1 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800074c:	f001 f9de 	bl	8001b0c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <HAL_ADC_MspInit+0x13c>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000754:	4a39      	ldr	r2, [pc, #228]	; (800083c <HAL_ADC_MspInit+0x13c>)
 8000756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <HAL_ADC_MspInit+0x13c>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <HAL_ADC_MspInit+0x13c>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	4a33      	ldr	r2, [pc, #204]	; (800083c <HAL_ADC_MspInit+0x13c>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <HAL_ADC_MspInit+0x13c>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <HAL_ADC_MspInit+0x13c>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <HAL_ADC_MspInit+0x13c>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <HAL_ADC_MspInit+0x13c>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = A3_V_OCXO_ADC1_IN9_Pin|A4_V_HOLD_ADC1_IN10_Pin;
 8000798:	2330      	movs	r3, #48	; 0x30
 800079a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800079c:	230b      	movs	r3, #11
 800079e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f005 f8ed 	bl	800598c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D6_V_DCF77_DEMOD_ADC1_IN16_Pin;
 80007b2:	2302      	movs	r3, #2
 80007b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007b6:	230b      	movs	r3, #11
 80007b8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(D6_V_DCF77_DEMOD_ADC1_IN16_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c2:	4619      	mov	r1, r3
 80007c4:	481e      	ldr	r0, [pc, #120]	; (8000840 <HAL_ADC_MspInit+0x140>)
 80007c6:	f005 f8e1 	bl	800598c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_ADC_MspInit+0x148>)
 80007ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_ADC_MspInit+0x144>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_ADC_MspInit+0x144>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <HAL_ADC_MspInit+0x144>)
 8000806:	f004 fe3d 	bl	8005484 <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000810:	f001 f97c 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <HAL_ADC_MspInit+0x144>)
 8000818:	64da      	str	r2, [r3, #76]	; 0x4c
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_ADC_MspInit+0x144>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2012      	movs	r0, #18
 8000826:	f004 fdf5 	bl	8005414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800082a:	2012      	movs	r0, #18
 800082c:	f004 fe0e 	bl	800544c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000830:	bf00      	nop
 8000832:	3780      	adds	r7, #128	; 0x80
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	50040000 	.word	0x50040000
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400
 8000844:	200003c8 	.word	0x200003c8
 8000848:	40020008 	.word	0x40020008

0800084c <DF4IAH_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef DF4IAH_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe97 	bl	8000590 <LL_ADC_REG_IsConversionOngoing>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d16c      	bne.n	8000942 <DF4IAH_ADC_Start_DMA+0xf6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <DF4IAH_ADC_Start_DMA+0x2a>
 8000872:	2302      	movs	r3, #2
 8000874:	e068      	b.n	8000948 <DF4IAH_ADC_Start_DMA+0xfc>
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2201      	movs	r2, #1
 800087a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f004 fad8 	bl	8004e34 <ADC_Enable>
 8000884:	4603      	mov	r3, r0
 8000886:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000888:	7dfb      	ldrb	r3, [r7, #23]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d154      	bne.n	8000938 <DF4IAH_ADC_Start_DMA+0xec>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000896:	f023 0301 	bic.w	r3, r3, #1
 800089a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <DF4IAH_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f023 0206 	bic.w	r2, r3, #6
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	659a      	str	r2, [r3, #88]	; 0x58
 80008ba:	e002      	b.n	80008c2 <DF4IAH_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2200      	movs	r2, #0
 80008c0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a22      	ldr	r2, [pc, #136]	; (8000950 <DF4IAH_ADC_Start_DMA+0x104>)
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a21      	ldr	r2, [pc, #132]	; (8000954 <DF4IAH_ADC_Start_DMA+0x108>)
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a20      	ldr	r2, [pc, #128]	; (8000958 <DF4IAH_ADC_Start_DMA+0x10c>)
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	221c      	movs	r2, #28
 80008e0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f042 0210 	orr.w	r2, r2, #16
 80008f8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f042 0201 	orr.w	r2, r2, #1
 8000908:	60da      	str	r2, [r3, #12]

        /* DF4IAH: Re-Init the DMA Channel 1 */
        HAL_DMA_Init(hadc->DMA_Handle);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fdb8 	bl	8005484 <HAL_DMA_Init>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3340      	adds	r3, #64	; 0x40
 800091e:	4619      	mov	r1, r3
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f004 fe66 	bl	80055f4 <HAL_DMA_Start_IT>
 8000928:	4603      	mov	r3, r0
 800092a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe19 	bl	8000568 <LL_ADC_REG_StartConversion>
 8000936:	e006      	b.n	8000946 <DF4IAH_ADC_Start_DMA+0xfa>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000940:	e001      	b.n	8000946 <DF4IAH_ADC_Start_DMA+0xfa>

    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000942:	2302      	movs	r3, #2
 8000944:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000946:	7dfb      	ldrb	r3, [r7, #23]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08004fb7 	.word	0x08004fb7
 8000954:	0800508f 	.word	0x0800508f
 8000958:	080050ab 	.word	0x080050ab

0800095c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_GetState(hadc) & HAL_ADC_STATE_REG_EOC) {
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f004 f99d 	bl	8004ca4 <HAL_ADC_GetState>
 800096a:	4603      	mov	r3, r0
 800096c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000970:	2b00      	cmp	r3, #0
 8000972:	d024      	beq.n	80009be <HAL_ADC_ConvCpltCallback+0x62>
		uint32_t status = READ_REG(hadc->Instance->ISR);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]
		if (status & ADC_FLAG_EOS) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	2b00      	cmp	r3, #0
 8000984:	d01b      	beq.n	80009be <HAL_ADC_ConvCpltCallback+0x62>
			/* Sequence has finished */
			__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2208      	movs	r2, #8
 800098c:	601a      	str	r2, [r3, #0]

			/* Copy from DMA out region to global variables */
			if (!adcCh9_lck) {
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <HAL_ADC_ConvCpltCallback+0x42>
				/* Get the converted value of regular channel */
				adcCh9_val = adc_dma_buf[0];
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_ADC_ConvCpltCallback+0x70>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_ADC_ConvCpltCallback+0x74>)
 800099c:	801a      	strh	r2, [r3, #0]
			}

			if (!adcCh10_lck) {
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_ADC_ConvCpltCallback+0x78>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <HAL_ADC_ConvCpltCallback+0x52>
				/* Get the converted value of regular channel */
				adcCh10_val = adc_dma_buf[1];
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_ADC_ConvCpltCallback+0x70>)
 80009a8:	885a      	ldrh	r2, [r3, #2]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_ADC_ConvCpltCallback+0x7c>)
 80009ac:	801a      	strh	r2, [r3, #0]
			}

			if (!adcCh16_lck) {
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_ADC_ConvCpltCallback+0x80>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <HAL_ADC_ConvCpltCallback+0x62>
				/* Get the converted value of regular channel */
				adcCh16_val = adc_dma_buf[2];
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_ADC_ConvCpltCallback+0x70>)
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_ADC_ConvCpltCallback+0x84>)
 80009bc:	801a      	strh	r2, [r3, #0]

	if (status & ADC_FLAG_OVR) {
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
	}
#endif
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000a4 	.word	0x200000a4
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	200000a6 	.word	0x200000a6
 80009d4:	200000a8 	.word	0x200000a8
 80009d8:	200000aa 	.word	0x200000aa
 80009dc:	200000ac 	.word	0x200000ac
 80009e0:	200000ae 	.word	0x200000ae

080009e4 <HAL_ADC_ErrorCallback>:
{
}
#endif

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	static uint32_t ctr = 0UL;
	++ctr;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_ADC_ErrorCallback+0x20>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_ADC_ErrorCallback+0x20>)
 80009f4:	6013      	str	r3, [r2, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000b8 	.word	0x200000b8

08000a08 <ADC_init>:


void ADC_init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8000a0c:	217f      	movs	r1, #127	; 0x7f
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <ADC_init+0x1c>)
 8000a10:	f004 fb92 	bl	8005138 <HAL_ADCEx_Calibration_Start>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <ADC_init+0x16>
	{
		Error_Handler();
 8000a1a:	f001 f877 	bl	8001b0c <Error_Handler>
	}
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000364 	.word	0x20000364

08000a28 <ADC_start>:

void ADC_start(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	if (HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) {
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <ADC_start+0x30>)
 8000a2e:	f004 f939 	bl	8004ca4 <HAL_ADC_GetState>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00a      	beq.n	8000a52 <ADC_start+0x2a>
		if (DF4IAH_ADC_Start_DMA(&hadc1, (uint32_t*) adc_dma_buf, ADC_DMA_Buf_Len) != HAL_OK) {
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4906      	ldr	r1, [pc, #24]	; (8000a5c <ADC_start+0x34>)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <ADC_start+0x30>)
 8000a44:	f7ff ff02 	bl	800084c <DF4IAH_ADC_Start_DMA>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <ADC_start+0x2a>
			Error_Handler();
 8000a4e:	f001 f85d 	bl	8001b0c <Error_Handler>
		}
	}
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000364 	.word	0x20000364
 8000a5c:	200000b0 	.word	0x200000b0

08000a60 <ADC_stop>:

void ADC_stop(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_READY) == 0) {
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <ADC_stop+0x38>)
 8000a66:	f004 f91d 	bl	8004ca4 <HAL_ADC_GetState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d103      	bne.n	8000a7c <ADC_stop+0x1c>
		HAL_ADC_Stop_DMA(&hadc1);
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <ADC_stop+0x38>)
 8000a76:	f003 fb0b 	bl	8004090 <HAL_ADC_Stop_DMA>
	else {
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
		}
	}
}
 8000a7a:	e00a      	b.n	8000a92 <ADC_stop+0x32>
		if (__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOS)) {
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <ADC_stop+0x38>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d103      	bne.n	8000a92 <ADC_stop+0x32>
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOS);
 8000a8a:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <ADC_stop+0x38>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2208      	movs	r2, #8
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000364 	.word	0x20000364

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_DMA_Init+0x38>)
 8000aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <MX_DMA_Init+0x38>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6493      	str	r3, [r2, #72]	; 0x48
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_DMA_Init+0x38>)
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	200b      	movs	r0, #11
 8000ac0:	f004 fca8 	bl	8005414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac4:	200b      	movs	r0, #11
 8000ac6:	f004 fcc1 	bl	800544c <HAL_NVIC_EnableIRQ>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b4f      	ldr	r3, [pc, #316]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a4b      	ldr	r2, [pc, #300]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b46      	ldr	r3, [pc, #280]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a45      	ldr	r2, [pc, #276]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_OCXO_LCKD_GPIO_O_GPIO_Port, D2_OCXO_LCKD_GPIO_O_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f005 f964 	bl	8005e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000b62:	f005 f95f 	bl	8005e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2120      	movs	r1, #32
 8000b6a:	4834      	ldr	r0, [pc, #208]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000b6c:	f005 f95a 	bl	8005e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A0_OCXO_RCC_CK_IN_NC_Pin;
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A0_OCXO_RCC_CK_IN_NC_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f004 ff01 	bl	800598c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_DCF77_DEMOD_GPIO_EXTI0_Pin;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_GPIO_Init+0x168>)
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D3_DCF77_DEMOD_GPIO_EXTI0_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4827      	ldr	r0, [pc, #156]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000b9e:	f004 fef5 	bl	800598c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = D9_FRCD_HOLD_GPIO_I_Pin|D10_PLL_LCKD_GPIO_I_Pin;
 8000ba2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f004 fee7 	bl	800598c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_OCXO_LCKD_GPIO_O_Pin;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_OCXO_LCKD_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f004 fed7 	bl	800598c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D12_HoRelay_GPIO_O_Pin;
 8000bde:	2310      	movs	r3, #16
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_HoRelay_GPIO_O_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000bf6:	f004 fec9 	bl	800598c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D11_ONEWIRE_GPIO_IO_Pin;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bfe:	2311      	movs	r3, #17
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D11_ONEWIRE_GPIO_IO_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000c12:	f004 febb 	bl	800598c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NoJ1J2_BOOT0_GPIO_I_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NoJ1J2_BOOT0_GPIO_I_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x16c>)
 8000c2a:	f004 feaf 	bl	800598c <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	10110000 	.word	0x10110000
 8000c44:	48001c00 	.word	0x48001c00

08000c48 <onewireMasterWr_bit>:
	return crc;
}


static void onewireMasterWr_bit(uint8_t bit)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2120      	movs	r1, #32
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <onewireMasterWr_bit+0x64>)
 8000c58:	f005 f8e4 	bl	8005e24 <HAL_GPIO_WritePin>
	uDelay(2);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f000 fc53 	bl	8001508 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2120      	movs	r1, #32
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <onewireMasterWr_bit+0x64>)
 8000c68:	f005 f8dc 	bl	8005e24 <HAL_GPIO_WritePin>

	if (bit) {
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <onewireMasterWr_bit+0x42>
		/* Writing a One */
		uDelay(2);
 8000c72:	2002      	movs	r0, #2
 8000c74:	f000 fc48 	bl	8001508 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <onewireMasterWr_bit+0x64>)
 8000c7e:	f005 f8d1 	bl	8005e24 <HAL_GPIO_WritePin>
		uDelay(88);
 8000c82:	2058      	movs	r0, #88	; 0x58
 8000c84:	f000 fc40 	bl	8001508 <uDelay>
 8000c88:	e007      	b.n	8000c9a <onewireMasterWr_bit+0x52>
	}
	else {
		/* Writing a Zero */
		uDelay(90);
 8000c8a:	205a      	movs	r0, #90	; 0x5a
 8000c8c:	f000 fc3c 	bl	8001508 <uDelay>
		HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2120      	movs	r1, #32
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <onewireMasterWr_bit+0x64>)
 8000c96:	f005 f8c5 	bl	8005e24 <HAL_GPIO_WritePin>
	}

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <onewireMasterWr_bit+0x64>)
 8000ca0:	f005 f8c0 	bl	8005e24 <HAL_GPIO_WritePin>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	48000400 	.word	0x48000400

08000cb0 <onewireMasterWr_byte>:

static void onewireMasterWr_byte(uint8_t byte)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e00d      	b.n	8000cdc <onewireMasterWr_byte+0x2c>
		onewireMasterWr_bit((byte >> idx) & 0x01U);
 8000cc0:	79fa      	ldrb	r2, [r7, #7]
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	fa42 f303 	asr.w	r3, r2, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffb9 	bl	8000c48 <onewireMasterWr_bit>
	for (uint8_t idx = 0; idx < 8; ++idx) {
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d9ee      	bls.n	8000cc0 <onewireMasterWr_byte+0x10>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <onewireMasterWr_romCode>:

static void onewireMasterWr_romCode(uint8_t* romCode)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d124      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d11f      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3302      	adds	r3, #2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11a      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3303      	adds	r3, #3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d115      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d110      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3305      	adds	r3, #5
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10b      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3306      	adds	r3, #6
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d106      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3307      	adds	r3, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <onewireMasterWr_romCode+0x5a>
		romCode = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
	}
	if (!romCode) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d010      	beq.n	8000d6e <onewireMasterWr_romCode+0x82>
		return;
	}

	for (uint8_t len = 8; len; --len) {
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e009      	b.n	8000d66 <onewireMasterWr_romCode+0x7a>
		onewireMasterWr_byte(*(romCode++));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa8 	bl	8000cb0 <onewireMasterWr_byte>
	for (uint8_t len = 8; len; --len) {
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f2      	bne.n	8000d52 <onewireMasterWr_romCode+0x66>
 8000d6c:	e000      	b.n	8000d70 <onewireMasterWr_romCode+0x84>
		return;
 8000d6e:	bf00      	nop
	}
}
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <onewireMasterRd_bit>:

static uint8_t onewireMasterRd_bit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	/* Ensure relaxation */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	4817      	ldr	r0, [pc, #92]	; (8000de0 <onewireMasterRd_bit+0x68>)
 8000d84:	f005 f84e 	bl	8005e24 <HAL_GPIO_WritePin>
	uDelay(2);
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f000 fbbd 	bl	8001508 <uDelay>

	/* TimeSlot starts */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <onewireMasterRd_bit+0x68>)
 8000d94:	f005 f846 	bl	8005e24 <HAL_GPIO_WritePin>
	uDelay(2);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f000 fbb5 	bl	8001508 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2120      	movs	r1, #32
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <onewireMasterRd_bit+0x68>)
 8000da4:	f005 f83e 	bl	8005e24 <HAL_GPIO_WritePin>

	/* Get read bit of slave */
	uDelay(13);
 8000da8:	200d      	movs	r0, #13
 8000daa:	f000 fbad 	bl	8001508 <uDelay>
	GPIO_PinState pinstate = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8000dae:	2120      	movs	r1, #32
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <onewireMasterRd_bit+0x68>)
 8000db2:	f005 f81f 	bl	8005df4 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	uDelay(75);
 8000dba:	204b      	movs	r0, #75	; 0x4b
 8000dbc:	f000 fba4 	bl	8001508 <uDelay>

	/* Enter relaxation state */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <onewireMasterRd_bit+0x68>)
 8000dc6:	f005 f82d 	bl	8005e24 <HAL_GPIO_WritePin>

	return (pinstate == GPIO_PIN_SET);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000400 	.word	0x48000400

08000de4 <onewireMasterRd_field>:

static uint32_t onewireMasterRd_field(uint8_t bitCnt)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	uint32_t rdVal = 0UL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]

	/* Paramter check */
	if (bitCnt > 32) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	d902      	bls.n	8000dfe <onewireMasterRd_field+0x1a>
		return 0xffffffffUL;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	e016      	b.n	8000e2c <onewireMasterRd_field+0x48>
	}

	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8000dfe:	2300      	movs	r3, #0
 8000e00:	72fb      	strb	r3, [r7, #11]
 8000e02:	e00e      	b.n	8000e22 <onewireMasterRd_field+0x3e>
		if (onewireMasterRd_bit()) {
 8000e04:	f7ff ffb8 	bl	8000d78 <onewireMasterRd_bit>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <onewireMasterRd_field+0x38>
			rdVal |= (1UL << idx);
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	2201      	movs	r2, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
	for (uint8_t idx = 0U; idx < bitCnt; ++idx) {
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	72fb      	strb	r3, [r7, #11]
 8000e22:	7afa      	ldrb	r2, [r7, #11]
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d3ec      	bcc.n	8000e04 <onewireMasterRd_field+0x20>
		}
	}

	return rdVal;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <onewireMasterCheck_presence>:

GPIO_PinState onewireMasterCheck_presence(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	/* Ensure the bus is inactive */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4813      	ldr	r0, [pc, #76]	; (8000e8c <onewireMasterCheck_presence+0x58>)
 8000e40:	f004 fff0 	bl	8005e24 <HAL_GPIO_WritePin>
	uDelay(2000);
 8000e44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e48:	f000 fb5e 	bl	8001508 <uDelay>

	/* 1w: Reset */
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2120      	movs	r1, #32
 8000e50:	480e      	ldr	r0, [pc, #56]	; (8000e8c <onewireMasterCheck_presence+0x58>)
 8000e52:	f004 ffe7 	bl	8005e24 <HAL_GPIO_WritePin>
	uDelay(550);
 8000e56:	f240 2026 	movw	r0, #550	; 0x226
 8000e5a:	f000 fb55 	bl	8001508 <uDelay>
	HAL_GPIO_WritePin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2120      	movs	r1, #32
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <onewireMasterCheck_presence+0x58>)
 8000e64:	f004 ffde 	bl	8005e24 <HAL_GPIO_WritePin>

	/* Read back Presence */
	uDelay(90);
 8000e68:	205a      	movs	r0, #90	; 0x5a
 8000e6a:	f000 fb4d 	bl	8001508 <uDelay>
	GPIO_PinState presence = HAL_GPIO_ReadPin(D11_ONEWIRE_GPIO_IO_GPIO_Port, D11_ONEWIRE_GPIO_IO_Pin);
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <onewireMasterCheck_presence+0x58>)
 8000e72:	f004 ffbf 	bl	8005df4 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	uDelay(550);
 8000e7a:	f240 2026 	movw	r0, #550	; 0x226
 8000e7e:	f000 fb43 	bl	8001508 <uDelay>

	return presence;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	48000400 	.word	0x48000400

08000e90 <onewireMasterTree_search>:

uint8_t onewireMasterTree_search(uint8_t searchAlarms, uint8_t devicesMax, uint8_t onewireDevices[][8])
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	603a      	str	r2, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	71bb      	strb	r3, [r7, #6]
	uint8_t devicesCnt		= 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	77fb      	strb	r3, [r7, #31]
	uint8_t bitIdxNow		= 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	77bb      	strb	r3, [r7, #30]
	uint8_t bitIdxLastZero	= 0xffU;
 8000ea8:	23ff      	movs	r3, #255	; 0xff
 8000eaa:	777b      	strb	r3, [r7, #29]
	uint8_t discrepancyLast	= 0xffU;
 8000eac:	23ff      	movs	r3, #255	; 0xff
 8000eae:	75fb      	strb	r3, [r7, #23]
	uint8_t lastDeviceFlag	= 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	773b      	strb	r3, [r7, #28]
	uint8_t masterMind[8] 	= { 0 };
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]

	while (1) {
		/* Any devices present? */
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8000ebc:	f7ff ffba 	bl	8000e34 <onewireMasterCheck_presence>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <onewireMasterTree_search+0x3a>
			/* No devices */
			return 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e0c0      	b.n	800104c <onewireMasterTree_search+0x1bc>
		}

		/* End of tree */
		if (lastDeviceFlag) {
 8000eca:	7f3b      	ldrb	r3, [r7, #28]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f040 80b9 	bne.w	8001044 <onewireMasterTree_search+0x1b4>
			break;
		}

		if (searchAlarms) {
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <onewireMasterTree_search+0x50>
			/* ALARM Search cmd */
			onewireMasterWr_byte(0xecU);
 8000ed8:	20ec      	movs	r0, #236	; 0xec
 8000eda:	f7ff fee9 	bl	8000cb0 <onewireMasterWr_byte>
 8000ede:	e08b      	b.n	8000ff8 <onewireMasterTree_search+0x168>
		}
		else {
			/* Search ROM cmd */
			onewireMasterWr_byte(0xf0U);
 8000ee0:	20f0      	movs	r0, #240	; 0xf0
 8000ee2:	f7ff fee5 	bl	8000cb0 <onewireMasterWr_byte>
		}

		while (bitIdxNow < 64) {
 8000ee6:	e087      	b.n	8000ff8 <onewireMasterTree_search+0x168>
			uint8_t bitNow = 0x01U & (masterMind[bitIdxNow >> 3] >> (bitIdxNow & 0x07U));
 8000ee8:	7fbb      	ldrb	r3, [r7, #30]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f107 0220 	add.w	r2, r7, #32
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7fbb      	ldrb	r3, [r7, #30]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	75bb      	strb	r3, [r7, #22]

			uint8_t b_pos = onewireMasterRd_bit();
 8000f0c:	f7ff ff34 	bl	8000d78 <onewireMasterRd_bit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	757b      	strb	r3, [r7, #21]
			uint8_t b_neg = onewireMasterRd_bit();
 8000f14:	f7ff ff30 	bl	8000d78 <onewireMasterRd_bit>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	753b      	strb	r3, [r7, #20]

			if (!b_pos && b_neg) {
 8000f1c:	7d7b      	ldrb	r3, [r7, #21]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <onewireMasterTree_search+0xa0>
 8000f22:	7d3b      	ldrb	r3, [r7, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <onewireMasterTree_search+0xa0>
				/* Only '0' */
				onewireMasterWr_bit(0);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fe8d 	bl	8000c48 <onewireMasterWr_bit>
 8000f2e:	e060      	b.n	8000ff2 <onewireMasterTree_search+0x162>
			}
			else if (b_pos && !b_neg) {
 8000f30:	7d7b      	ldrb	r3, [r7, #21]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01f      	beq.n	8000f76 <onewireMasterTree_search+0xe6>
 8000f36:	7d3b      	ldrb	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d11c      	bne.n	8000f76 <onewireMasterTree_search+0xe6>
				/* Only '1' */
				onewireMasterWr_bit(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff fe83 	bl	8000c48 <onewireMasterWr_bit>
				masterMind[bitIdxNow >> 3] |= 1U << (bitIdxNow & 0x07U);
 8000f42:	7fbb      	ldrb	r3, [r7, #30]
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f107 0220 	add.w	r2, r7, #32
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000f52:	7fbb      	ldrb	r3, [r7, #30]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	7fb9      	ldrb	r1, [r7, #30]
 8000f62:	08c9      	lsrs	r1, r1, #3
 8000f64:	b2c9      	uxtb	r1, r1
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	440b      	add	r3, r1
 8000f70:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000f74:	e03d      	b.n	8000ff2 <onewireMasterTree_search+0x162>
			}
			else if (!b_pos && !b_neg) {
 8000f76:	7d7b      	ldrb	r3, [r7, #21]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d132      	bne.n	8000fe2 <onewireMasterTree_search+0x152>
 8000f7c:	7d3b      	ldrb	r3, [r7, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d12f      	bne.n	8000fe2 <onewireMasterTree_search+0x152>
				/* Discrepancy */
				if (bitIdxNow == bitIdxLastZero) {
 8000f82:	7fba      	ldrb	r2, [r7, #30]
 8000f84:	7f7b      	ldrb	r3, [r7, #29]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d11c      	bne.n	8000fc4 <onewireMasterTree_search+0x134>
					/* Select the 1 branch */
					onewireMasterWr_bit(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff fe5c 	bl	8000c48 <onewireMasterWr_bit>
					masterMind[bitIdxNow >> 3] |= 1U << (bitIdxNow & 0x07U);
 8000f90:	7fbb      	ldrb	r3, [r7, #30]
 8000f92:	08db      	lsrs	r3, r3, #3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f107 0220 	add.w	r2, r7, #32
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8000fa0:	7fbb      	ldrb	r3, [r7, #30]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	7fb9      	ldrb	r1, [r7, #30]
 8000fb0:	08c9      	lsrs	r1, r1, #3
 8000fb2:	b2c9      	uxtb	r1, r1
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f803 2c14 	strb.w	r2, [r3, #-20]
				if (bitIdxNow == bitIdxLastZero) {
 8000fc2:	e016      	b.n	8000ff2 <onewireMasterTree_search+0x162>
				}
				else if (bitIdxNow < bitIdxLastZero) {
 8000fc4:	7fba      	ldrb	r2, [r7, #30]
 8000fc6:	7f7b      	ldrb	r3, [r7, #29]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d204      	bcs.n	8000fd6 <onewireMasterTree_search+0x146>
					/* Follow last trace */
					onewireMasterWr_bit(bitNow);
 8000fcc:	7dbb      	ldrb	r3, [r7, #22]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe3a 	bl	8000c48 <onewireMasterWr_bit>
				if (bitIdxNow == bitIdxLastZero) {
 8000fd4:	e00d      	b.n	8000ff2 <onewireMasterTree_search+0x162>
				}
				else {
					/* Select the 0 branch */
					onewireMasterWr_bit(0);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fe36 	bl	8000c48 <onewireMasterWr_bit>
					bitIdxLastZero = bitIdxNow;
 8000fdc:	7fbb      	ldrb	r3, [r7, #30]
 8000fde:	777b      	strb	r3, [r7, #29]
				if (bitIdxNow == bitIdxLastZero) {
 8000fe0:	e007      	b.n	8000ff2 <onewireMasterTree_search+0x162>
				}
			}
			else if (b_pos && b_neg) {
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <onewireMasterTree_search+0x162>
 8000fe8:	7d3b      	ldrb	r3, [r7, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <onewireMasterTree_search+0x162>
				/* No devices anymore */
				return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e02c      	b.n	800104c <onewireMasterTree_search+0x1bc>
			}
			++bitIdxNow;
 8000ff2:	7fbb      	ldrb	r3, [r7, #30]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77bb      	strb	r3, [r7, #30]
		while (bitIdxNow < 64) {
 8000ff8:	7fbb      	ldrb	r3, [r7, #30]
 8000ffa:	2b3f      	cmp	r3, #63	; 0x3f
 8000ffc:	f67f af74 	bls.w	8000ee8 <onewireMasterTree_search+0x58>
		}  // while (bitIdxNow < 64)

		discrepancyLast = bitIdxLastZero;
 8001000:	7f7b      	ldrb	r3, [r7, #29]
 8001002:	75fb      	strb	r3, [r7, #23]

		/* Copy over one valid device */
		for (int idx = 0; idx < 8; ++idx) {
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	e00f      	b.n	800102a <onewireMasterTree_search+0x19a>
			onewireDevices[devicesCnt][idx] = masterMind[idx];
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	441a      	add	r2, r3
 8001012:	f107 010c 	add.w	r1, r7, #12
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	440b      	add	r3, r1
 800101a:	7819      	ldrb	r1, [r3, #0]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	4413      	add	r3, r2
 8001020:	460a      	mov	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
		for (int idx = 0; idx < 8; ++idx) {
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	3301      	adds	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b07      	cmp	r3, #7
 800102e:	ddec      	ble.n	800100a <onewireMasterTree_search+0x17a>
		}
		++devicesCnt;
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	3301      	adds	r3, #1
 8001034:	77fb      	strb	r3, [r7, #31]

		if (discrepancyLast == 0xffU) {
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2bff      	cmp	r3, #255	; 0xff
 800103a:	f47f af3f 	bne.w	8000ebc <onewireMasterTree_search+0x2c>
			lastDeviceFlag = 1U;
 800103e:	2301      	movs	r3, #1
 8001040:	773b      	strb	r3, [r7, #28]
		if (GPIO_PIN_SET == onewireMasterCheck_presence()) {
 8001042:	e73b      	b.n	8000ebc <onewireMasterTree_search+0x2c>
			break;
 8001044:	bf00      	nop
		}
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001046:	f7ff fef5 	bl	8000e34 <onewireMasterCheck_presence>

	return devicesCnt;
 800104a:	7ffb      	ldrb	r3, [r7, #31]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <onewireDS18B20_setAdcWidth>:
	/* Issue a reset */
	onewireMasterCheck_presence();
}

void onewireDS18B20_setAdcWidth(uint8_t width, int8_t tempAlarmHi, int8_t tempAlarmLo, uint8_t* romCode)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	460b      	mov	r3, r1
 8001062:	71bb      	strb	r3, [r7, #6]
 8001064:	4613      	mov	r3, r2
 8001066:	717b      	strb	r3, [r7, #5]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d124      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11f      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3302      	adds	r3, #2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11a      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3303      	adds	r3, #3
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d115      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3304      	adds	r3, #4
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d110      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3305      	adds	r3, #5
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3306      	adds	r3, #6
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d106      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3307      	adds	r3, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <onewireDS18B20_setAdcWidth+0x66>
		romCode = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
	}

	uint8_t reg_Ctrl = 0b00011111;
 80010ba:	231f      	movs	r3, #31
 80010bc:	73fb      	strb	r3, [r7, #15]

	switch (width) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b0b      	cmp	r3, #11
 80010c2:	d00a      	beq.n	80010da <onewireDS18B20_setAdcWidth+0x86>
 80010c4:	2b0b      	cmp	r3, #11
 80010c6:	dc0d      	bgt.n	80010e4 <onewireDS18B20_setAdcWidth+0x90>
 80010c8:	2b09      	cmp	r3, #9
 80010ca:	d010      	beq.n	80010ee <onewireDS18B20_setAdcWidth+0x9a>
 80010cc:	2b0a      	cmp	r3, #10
 80010ce:	d109      	bne.n	80010e4 <onewireDS18B20_setAdcWidth+0x90>
	case 9:
		break;

	case 10:
		reg_Ctrl |= (0b01 << 5);
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	73fb      	strb	r3, [r7, #15]
		break;
 80010d8:	e00a      	b.n	80010f0 <onewireDS18B20_setAdcWidth+0x9c>

	case 11:
		reg_Ctrl |= (0b10 << 5);
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e0:	73fb      	strb	r3, [r7, #15]
		break;
 80010e2:	e005      	b.n	80010f0 <onewireDS18B20_setAdcWidth+0x9c>

	case 12:
	default:
		reg_Ctrl |= (0b11 << 5);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010ea:	73fb      	strb	r3, [r7, #15]
		break;
 80010ec:	e000      	b.n	80010f0 <onewireDS18B20_setAdcWidth+0x9c>
		break;
 80010ee:	bf00      	nop
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 80010f0:	f7ff fea0 	bl	8000e34 <onewireMasterCheck_presence>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d11b      	bne.n	8001132 <onewireDS18B20_setAdcWidth+0xde>
		if (!romCode) {
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <onewireDS18B20_setAdcWidth+0xb4>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 8001100:	20cc      	movs	r0, #204	; 0xcc
 8001102:	f7ff fdd5 	bl	8000cb0 <onewireMasterWr_byte>
 8001106:	e005      	b.n	8001114 <onewireDS18B20_setAdcWidth+0xc0>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 8001108:	2055      	movs	r0, #85	; 0x55
 800110a:	f7ff fdd1 	bl	8000cb0 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff fdec 	bl	8000cec <onewireMasterWr_romCode>
		}

		/* Write Scratchpad */
		onewireMasterWr_byte(0x4eU);
 8001114:	204e      	movs	r0, #78	; 0x4e
 8001116:	f7ff fdcb 	bl	8000cb0 <onewireMasterWr_byte>

		/* Alarm temperature high */
		onewireMasterWr_byte((uint8_t)tempAlarmHi);
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fdc7 	bl	8000cb0 <onewireMasterWr_byte>

		/* Alarm temperature low */
		onewireMasterWr_byte((uint8_t)tempAlarmLo);
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fdc3 	bl	8000cb0 <onewireMasterWr_byte>

		/* Configuration byte */
		onewireMasterWr_byte(reg_Ctrl);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fdbf 	bl	8000cb0 <onewireMasterWr_byte>
	}

	/* Issue a reset */
	onewireMasterCheck_presence();
 8001132:	f7ff fe7f 	bl	8000e34 <onewireMasterCheck_presence>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <onewireDS18B20_tempReq>:

uint32_t onewireDS18B20_tempReq(uint8_t* romCode)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d124      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d11f      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d11a      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3303      	adds	r3, #3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d115      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3304      	adds	r3, #4
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d110      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3305      	adds	r3, #5
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10b      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3306      	adds	r3, #6
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3307      	adds	r3, #7
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <onewireDS18B20_tempReq+0x5a>
		romCode = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
	}

	/* At least one device is present */
	if (GPIO_PIN_RESET == onewireMasterCheck_presence()) {
 8001198:	f7ff fe4c 	bl	8000e34 <onewireMasterCheck_presence>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d11b      	bne.n	80011da <onewireDS18B20_tempReq+0x9c>
		if (!romCode) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <onewireDS18B20_tempReq+0x72>
			/* Skip ROM cmd */
			onewireMasterWr_byte(0xccU);
 80011a8:	20cc      	movs	r0, #204	; 0xcc
 80011aa:	f7ff fd81 	bl	8000cb0 <onewireMasterWr_byte>
 80011ae:	e005      	b.n	80011bc <onewireDS18B20_tempReq+0x7e>
		}
		else {
			/* Match ROM cmd */
			onewireMasterWr_byte(0x55U);
 80011b0:	2055      	movs	r0, #85	; 0x55
 80011b2:	f7ff fd7d 	bl	8000cb0 <onewireMasterWr_byte>
			onewireMasterWr_romCode(romCode);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fd98 	bl	8000cec <onewireMasterWr_romCode>
		}

		/* Convert-T cmd */
		onewireMasterWr_byte(0x44U);
 80011bc:	2044      	movs	r0, #68	; 0x44
 80011be:	f7ff fd77 	bl	8000cb0 <onewireMasterWr_byte>
		uint32_t bfPushPull  = bfOpenDrain & (~D11_ONEWIRE_GPIO_IO_Pin);
		D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfPushPull;
#endif

		/* End time */
		uint32_t waitTime_ms = 760UL;
 80011c2:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80011c6:	60fb      	str	r3, [r7, #12]
#if   defined(ONEWIRE_DS18B20_ADC_12B)
		waitTime_ms = 760UL;
 80011c8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80011cc:	60fb      	str	r3, [r7, #12]
#elif defined(ONEWIRE_DS18B20_ADC_10B)
		waitTime_ms = 188UL;
#elif defined(ONEWIRE_DS18B20_ADC_09B)
		waitTime_ms =  94UL;
#endif
		return HAL_GetTick() + waitTime_ms;
 80011ce:	f002 fbd3 	bl	8003978 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	e000      	b.n	80011dc <onewireDS18B20_tempReq+0x9e>
	}

	/* No device present */
	return 0UL;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <onewireDS18B20_tempRead>:

int16_t onewireDS18B20_tempRead(uint32_t waitUntil, uint8_t* romCode)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	if (!romCode[0] && !romCode[1] && !romCode[2] && !romCode[3] && !romCode[4] && !romCode[5] && !romCode[6] && !romCode[7]) {
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d124      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11f      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3302      	adds	r3, #2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11a      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3303      	adds	r3, #3
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d115      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3304      	adds	r3, #4
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d110      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3305      	adds	r3, #5
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10b      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3306      	adds	r3, #6
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d106      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3307      	adds	r3, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <onewireDS18B20_tempRead+0x5c>
		romCode = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	603b      	str	r3, [r7, #0]
	}

	/* wait until ADC is ready */
	uint32_t t_now = HAL_GetTick();
 8001240:	f002 fb9a 	bl	8003978 <HAL_GetTick>
 8001244:	6178      	str	r0, [r7, #20]
	if (t_now < waitUntil) {
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	d205      	bcs.n	800125a <onewireDS18B20_tempRead+0x76>
		HAL_Delay(waitUntil - t_now);
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fb9b 	bl	8003990 <HAL_Delay>
	}

	/* Revert to Open-Drain mode */
	uint32_t bfPushPull		= D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <onewireDS18B20_tempRead+0xc0>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	613b      	str	r3, [r7, #16]
	uint32_t bfOpenDrain  	= bfPushPull | D11_ONEWIRE_GPIO_IO_Pin;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	60fb      	str	r3, [r7, #12]
	D11_ONEWIRE_GPIO_IO_GPIO_Port->OTYPER = bfOpenDrain;
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <onewireDS18B20_tempRead+0xc0>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6053      	str	r3, [r2, #4]

	/* 1w: Reset */
	onewireMasterCheck_presence();
 800126e:	f7ff fde1 	bl	8000e34 <onewireMasterCheck_presence>

	if (!romCode) {
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d103      	bne.n	8001280 <onewireDS18B20_tempRead+0x9c>
		/* Skip ROM cmd */
		onewireMasterWr_byte(0xccU);
 8001278:	20cc      	movs	r0, #204	; 0xcc
 800127a:	f7ff fd19 	bl	8000cb0 <onewireMasterWr_byte>
 800127e:	e005      	b.n	800128c <onewireDS18B20_tempRead+0xa8>
	}
	else {
		/* Match ROM cmd */
		onewireMasterWr_byte(0x55U);
 8001280:	2055      	movs	r0, #85	; 0x55
 8001282:	f7ff fd15 	bl	8000cb0 <onewireMasterWr_byte>
		onewireMasterWr_romCode(romCode);
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff fd30 	bl	8000cec <onewireMasterWr_romCode>
	}

	/* Read scratchpad */
	onewireMasterWr_byte(0xbeU);
 800128c:	20be      	movs	r0, #190	; 0xbe
 800128e:	f7ff fd0f 	bl	8000cb0 <onewireMasterWr_byte>
	return (int16_t) onewireMasterRd_field(16);
 8001292:	2010      	movs	r0, #16
 8001294:	f7ff fda6 	bl	8000de4 <onewireMasterRd_field>
 8001298:	4603      	mov	r3, r0
 800129a:	b21b      	sxth	r3, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000400 	.word	0x48000400

080012a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_I2C1_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_I2C1_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_I2C1_Init+0x74>)
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <MX_I2C1_Init+0x7c>)
 80012b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_I2C1_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_I2C1_Init+0x74>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_I2C1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_I2C1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e2:	480e      	ldr	r0, [pc, #56]	; (800131c <MX_I2C1_Init+0x74>)
 80012e4:	f004 fdb6 	bl	8005e54 <HAL_I2C_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ee:	f000 fc0d 	bl	8001b0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <MX_I2C1_Init+0x74>)
 80012f6:	f006 fa63 	bl	80077c0 <HAL_I2CEx_ConfigAnalogFilter>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001300:	f000 fc04 	bl	8001b0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_I2C1_Init+0x74>)
 8001308:	f006 faa5 	bl	8007856 <HAL_I2CEx_ConfigDigitalFilter>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 fbfb 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000410 	.word	0x20000410
 8001320:	40005400 	.word	0x40005400
 8001324:	00303d5b 	.word	0x00303d5b

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b09e      	sub	sp, #120	; 0x78
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2254      	movs	r2, #84	; 0x54
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f009 fe29 	bl	800afa0 <memset>
  if(i2cHandle->Instance==I2C1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_I2C_MspInit+0xc8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d146      	bne.n	80013e6 <HAL_I2C_MspInit+0xbe>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001358:	2340      	movs	r3, #64	; 0x40
 800135a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4618      	mov	r0, r3
 8001368:	f007 f98e 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001372:	f000 fbcb 	bl	8001b0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_I2C_MspInit+0xcc>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_I2C_MspInit+0xcc>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_I2C_MspInit+0xcc>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = D5_I2C1_SCL_Pin|D4_I2C1_SDA_Pin;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2302      	movs	r3, #2
 800139c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139e:	2304      	movs	r3, #4
 80013a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a6:	4619      	mov	r1, r3
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <HAL_I2C_MspInit+0xd0>)
 80013aa:	f004 faef 	bl	800598c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_I2C_MspInit+0xcc>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_I2C_MspInit+0xcc>)
 80013b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_I2C_MspInit+0xcc>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	201f      	movs	r0, #31
 80013cc:	f004 f822 	bl	8005414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013d0:	201f      	movs	r0, #31
 80013d2:	f004 f83b 	bl	800544c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2020      	movs	r0, #32
 80013dc:	f004 f81a 	bl	8005414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013e0:	2020      	movs	r0, #32
 80013e2:	f004 f833 	bl	800544c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013e6:	bf00      	nop
 80013e8:	3778      	adds	r7, #120	; 0x78
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <i2cBusGetDeviceList>:
}

/* USER CODE BEGIN 1 */

uint8_t i2cBusGetDeviceList(uint32_t* i2cDevicesBF)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t i2cBusDeviceCnt = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]

	*i2cDevicesBF = 0UL;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 800140e:	2301      	movs	r3, #1
 8001410:	73bb      	strb	r3, [r7, #14]
 8001412:	e01c      	b.n	800144e <i2cBusGetDeviceList+0x52>
		HAL_StatusTypeDef stat = HAL_I2C_IsDeviceReady(&hi2c1, (i2cDevAddr << 1), 1, 100);
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	b29b      	uxth	r3, r3
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	b299      	uxth	r1, r3
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	2201      	movs	r2, #1
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <i2cBusGetDeviceList+0x64>)
 8001422:	f004 fe17 	bl	8006054 <HAL_I2C_IsDeviceReady>
 8001426:	4603      	mov	r3, r0
 8001428:	737b      	strb	r3, [r7, #13]
		if (stat == HAL_OK) {
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10b      	bne.n	8001448 <i2cBusGetDeviceList+0x4c>
			/* I2C device on the bus */
			++i2cBusDeviceCnt;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]

			switch (i2cDevAddr) {
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	2b60      	cmp	r3, #96	; 0x60
 800143a:	d105      	bne.n	8001448 <i2cBusGetDeviceList+0x4c>
			case 0x60:
				/* DAC */
				*i2cDevicesBF |= 0x01;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]
	for (uint8_t i2cDevAddr = 1; i2cDevAddr < 128U; ++i2cDevAddr) {
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	3301      	adds	r3, #1
 800144c:	73bb      	strb	r3, [r7, #14]
 800144e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001452:	2b00      	cmp	r3, #0
 8001454:	dade      	bge.n	8001414 <i2cBusGetDeviceList+0x18>
			}
		}
	}

	return i2cBusDeviceCnt;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000410 	.word	0x20000410

08001464 <i2cDeviceDacMcp4725_set>:

uint8_t i2cDeviceDacMcp4725_set(uint8_t chipAddr, uint8_t pdMode, uint16_t dac_12b)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	460b      	mov	r3, r1
 8001470:	71bb      	strb	r3, [r7, #6]
 8001472:	4613      	mov	r3, r2
 8001474:	80bb      	strh	r3, [r7, #4]
	uint8_t i2cTxBuf[2] = { 0 };
 8001476:	2300      	movs	r3, #0
 8001478:	813b      	strh	r3, [r7, #8]

	/* A0 address bit and base address */
	chipAddr &= 0x01U;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
	chipAddr |= 0x60U;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001488:	71fb      	strb	r3, [r7, #7]
	chipAddr <<= 1;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	71fb      	strb	r3, [r7, #7]

	/* Power-Down mode */
	uint16_t dacFastWord = ((uint16_t)pdMode & 0x0003U) << 12;
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	b29b      	uxth	r3, r3
 8001494:	031b      	lsls	r3, r3, #12
 8001496:	b29b      	uxth	r3, r3
 8001498:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800149c:	81fb      	strh	r3, [r7, #14]

	/* unsigned 12 bit DAC value */
	dacFastWord |= dac_12b & 0x0fffU;
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	81fb      	strh	r3, [r7, #14]

	/* Fill in data */
	i2cTxBuf[0] = (uint8_t) ((dacFastWord >> 8) & 0xffU);
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	723b      	strb	r3, [r7, #8]
	i2cTxBuf[1] = (uint8_t) ( dacFastWord       & 0xffU);
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	727b      	strb	r3, [r7, #9]

    /* Write data to the DAC chip */
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit_IT(&hi2c1, chipAddr, i2cTxBuf, sizeof(i2cTxBuf));
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	b299      	uxth	r1, r3
 80014c0:	f107 0208 	add.w	r2, r7, #8
 80014c4:	2302      	movs	r3, #2
 80014c6:	480f      	ldr	r0, [pc, #60]	; (8001504 <i2cDeviceDacMcp4725_set+0xa0>)
 80014c8:	f004 fd54 	bl	8005f74 <HAL_I2C_Master_Transmit_IT>
 80014cc:	4603      	mov	r3, r0
 80014ce:	737b      	strb	r3, [r7, #13]
	if (stat != HAL_OK) {
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <i2cDeviceDacMcp4725_set+0x76>
		return 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <i2cDeviceDacMcp4725_set+0x96>
	}

#if 1
	/* Wait until transfer has completed */
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80014da:	bf00      	nop
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <i2cDeviceDacMcp4725_set+0xa0>)
 80014de:	f004 ffa3 	bl	8006428 <HAL_I2C_GetState>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d1f9      	bne.n	80014dc <i2cDeviceDacMcp4725_set+0x78>
    }

	if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <i2cDeviceDacMcp4725_set+0xa0>)
 80014ea:	f004 ffab 	bl	8006444 <HAL_I2C_GetError>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d101      	bne.n	80014f8 <i2cDeviceDacMcp4725_set+0x94>
		return 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	e000      	b.n	80014fa <i2cDeviceDacMcp4725_set+0x96>
	}
#endif
	return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000410 	.word	0x20000410

08001508 <uDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uDelay(uint16_t uDelay)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	uint32_t uCnt = (uDelay * 66UL) / 10;
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	4613      	mov	r3, r2
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	4413      	add	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	461a      	mov	r2, r3
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <uDelay+0x3c>)
 8001520:	fba3 2302 	umull	r2, r3, r3, r2
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	60fb      	str	r3, [r7, #12]

	for (; uCnt; --uCnt) {
 8001528:	e002      	b.n	8001530 <uDelay+0x28>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3b01      	subs	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <uDelay+0x22>
	}
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	cccccccd 	.word	0xcccccccd

08001548 <memclear>:

void memclear(uint8_t* ary, uint16_t len)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
	while (len--) {
 8001554:	e004      	b.n	8001560 <memclear+0x18>
		*(ary++) = 0U;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
	while (len--) {
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	1e5a      	subs	r2, r3, #1
 8001564:	807a      	strh	r2, [r7, #2]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f5      	bne.n	8001556 <memclear+0xe>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b0a6      	sub	sp, #152	; 0x98
 800157c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f002 f9ce 	bl	800391e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 fa51 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f7ff faa7 	bl	8000ad8 <MX_GPIO_Init>
  MX_RTC_Init();
 800158a:	f000 fac5 	bl	8001b18 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800158e:	f000 fe05 	bl	800219c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001592:	f000 fe33 	bl	80021fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001596:	f7ff f80f 	bl	80005b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800159a:	f7ff fe85 	bl	80012a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800159e:	f000 fb13 	bl	8001bc8 <MX_SPI1_Init>
  MX_DMA_Init();
 80015a2:	f7ff fa7b 	bl	8000a9c <MX_DMA_Init>
  MX_TIM2_Init();
 80015a6:	f000 fcd9 	bl	8001f5c <MX_TIM2_Init>
  }
#endif

#if defined(LOGGING)
  {
	uint8_t msg[] = "\r\n\r\n************************\r\n*** sGPSDO by DF4IAH ***\r\n************************\r\n\r\n";
 80015aa:	4acf      	ldr	r2, [pc, #828]	; (80018e8 <main+0x370>)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4611      	mov	r1, r2
 80015b0:	2255      	movs	r2, #85	; 0x55
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 fce6 	bl	800af84 <memcpy>
	HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80015b8:	1d39      	adds	r1, r7, #4
 80015ba:	2319      	movs	r3, #25
 80015bc:	2254      	movs	r2, #84	; 0x54
 80015be:	48cb      	ldr	r0, [pc, #812]	; (80018ec <main+0x374>)
 80015c0:	f008 fa5f 	bl	8009a82 <HAL_UART_Transmit>
  }
#endif

  /* Switching to Hold mode */
  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2110      	movs	r1, #16
 80015c8:	48c9      	ldr	r0, [pc, #804]	; (80018f0 <main+0x378>)
 80015ca:	f004 fc2b 	bl	8005e24 <HAL_GPIO_WritePin>

  /* Prepare the ADC */
  ADC_init();
 80015ce:	f7ff fa1b 	bl	8000a08 <ADC_init>

  /* Get list of all I2C devices */
  uint32_t i2cDevicesBF = 0UL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint8_t i2cBusCnt = i2cBusGetDeviceList(&i2cDevicesBF);
 80015d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff0e 	bl	80013fc <i2cBusGetDeviceList>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

  if (i2cDevicesBF & I2C_DEVICE_DAC_MCP4725_0) {
 80015e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <main+0x84>
	  /* Switch DAC to high impedance (500kR) mode */
	  i2cDeviceDacMcp4725_set(0, 0b11, I2C_DAC_MCP4725_0_VAL);
 80015f0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80015f4:	2103      	movs	r1, #3
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff ff34 	bl	8001464 <i2cDeviceDacMcp4725_set>
  }

#if defined(LOGGING)
  {
	uint8_t msg[32] = { 0 };
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]
	int len;

	len = snprintf((char*)msg, sizeof(msg) - 1, "*** I2C bus scan:\r\n");
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4ab7      	ldr	r2, [pc, #732]	; (80018f4 <main+0x37c>)
 8001618:	211f      	movs	r1, #31
 800161a:	4618      	mov	r0, r3
 800161c:	f009 fcc8 	bl	800afb0 <sniprintf>
 8001620:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8001624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001628:	b29a      	uxth	r2, r3
 800162a:	1d39      	adds	r1, r7, #4
 800162c:	2319      	movs	r3, #25
 800162e:	48af      	ldr	r0, [pc, #700]	; (80018ec <main+0x374>)
 8001630:	f008 fa27 	bl	8009a82 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * %d device(s) found.\r\n", i2cBusCnt);
 8001634:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001638:	1d38      	adds	r0, r7, #4
 800163a:	4aaf      	ldr	r2, [pc, #700]	; (80018f8 <main+0x380>)
 800163c:	211f      	movs	r1, #31
 800163e:	f009 fcb7 	bl	800afb0 <sniprintf>
 8001642:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8001646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800164a:	b29a      	uxth	r2, r3
 800164c:	1d39      	adds	r1, r7, #4
 800164e:	2319      	movs	r3, #25
 8001650:	48a6      	ldr	r0, [pc, #664]	; (80018ec <main+0x374>)
 8001652:	f008 fa16 	bl	8009a82 <HAL_UART_Transmit>

	len = snprintf((char*)msg, sizeof(msg) - 1, "  * bitfield = 0x%08lx\r\n\r\n", i2cDevicesBF);
 8001656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001658:	1d38      	adds	r0, r7, #4
 800165a:	4aa8      	ldr	r2, [pc, #672]	; (80018fc <main+0x384>)
 800165c:	211f      	movs	r1, #31
 800165e:	f009 fca7 	bl	800afb0 <sniprintf>
 8001662:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	HAL_UART_Transmit(&huart2, msg, len, 25);
 8001666:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800166a:	b29a      	uxth	r2, r3
 800166c:	1d39      	adds	r1, r7, #4
 800166e:	2319      	movs	r3, #25
 8001670:	489e      	ldr	r0, [pc, #632]	; (80018ec <main+0x374>)
 8001672:	f008 fa06 	bl	8009a82 <HAL_UART_Transmit>
  }
#endif

  /* Init the temperature sensor DS18B20 */
  {
 8001676:	466b      	mov	r3, sp
 8001678:	461c      	mov	r4, r3
	  const uint8_t OnewireDeviceCountMax 				= 8U;
 800167a:	2308      	movs	r3, #8
 800167c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	  uint8_t onewireDevices[OnewireDeviceCountMax][8];
 8001680:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001684:	3b01      	subs	r3, #1
 8001686:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001688:	f897 0083 	ldrb.w	r0, [r7, #131]	; 0x83
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	018b      	lsls	r3, r1, #6
 800169a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800169e:	0182      	lsls	r2, r0, #6
 80016a0:	f897 0083 	ldrb.w	r0, [r7, #131]	; 0x83
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	018b      	lsls	r3, r1, #6
 80016b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016b6:	0182      	lsls	r2, r0, #6
 80016b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	3307      	adds	r3, #7
 80016c0:	08db      	lsrs	r3, r3, #3
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	ebad 0d03 	sub.w	sp, sp, r3
 80016c8:	ab02      	add	r3, sp, #8
 80016ca:	3300      	adds	r3, #0
 80016cc:	67bb      	str	r3, [r7, #120]	; 0x78
	  memclear((uint8_t*) onewireDevices, sizeof(onewireDevices));
 80016ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016d0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff ff33 	bl	8001548 <memclear>

	  uint8_t onewireDeviceCount = onewireMasterTree_search(0U, OnewireDeviceCountMax, onewireDevices);
 80016e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016e4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80016e8:	4619      	mov	r1, r3
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fbd0 	bl	8000e90 <onewireMasterTree_search>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#if defined(LOGGING)
	  {
		  uint8_t msg[64];
		  int len;

		  len = snprintf(((char*) msg), sizeof(msg), "\r\n*** 1-wire Temperature sensors found: %d\r\n", onewireDeviceCount);
 80016f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016fa:	1d38      	adds	r0, r7, #4
 80016fc:	4a80      	ldr	r2, [pc, #512]	; (8001900 <main+0x388>)
 80016fe:	2140      	movs	r1, #64	; 0x40
 8001700:	f009 fc56 	bl	800afb0 <sniprintf>
 8001704:	6738      	str	r0, [r7, #112]	; 0x70
		  HAL_UART_Transmit(&huart2, msg, len, 25);
 8001706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001708:	b29a      	uxth	r2, r3
 800170a:	1d39      	adds	r1, r7, #4
 800170c:	2319      	movs	r3, #25
 800170e:	4877      	ldr	r0, [pc, #476]	; (80018ec <main+0x374>)
 8001710:	f008 f9b7 	bl	8009a82 <HAL_UART_Transmit>
	  }
#endif

	  /* Set configuration and temp alarm limits */
#if   defined(ONEWIRE_DS18B20_ADC_12B)
	  onewireDS18B20_setAdcWidth(12, ONEWIRE_DS18B20_ALARM_HI, ONEWIRE_DS18B20_ALARM_LO, onewireDevices[0]);
 8001714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001716:	2228      	movs	r2, #40	; 0x28
 8001718:	213c      	movs	r1, #60	; 0x3c
 800171a:	200c      	movs	r0, #12
 800171c:	f7ff fc9a 	bl	8001054 <onewireDS18B20_setAdcWidth>
 8001720:	46a5      	mov	sp, r4
#endif
  }

  /* Turn off many of the NMEA messages */
  //HAL_Delay(2000UL);
  ubloxMsgsTurnOff();
 8001722:	f001 fa15 	bl	8002b50 <ubloxMsgsTurnOff>

  /* Change baudrate of the u-blox */
  ubloxUartSpeedFast();
 8001726:	f000 fef1 	bl	800250c <ubloxUartSpeedFast>

  if (ubloxSetFrequency(F_COMP_HZ)) {
 800172a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172e:	f001 f873 	bl	8002818 <ubloxSetFrequency>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d016      	beq.n	8001766 <main+0x1ee>
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse has not changed - keeping in Hold mode.\r\n";
 8001738:	4b72      	ldr	r3, [pc, #456]	; (8001904 <main+0x38c>)
 800173a:	1d3c      	adds	r4, r7, #4
 800173c:	461d      	mov	r5, r3
 800173e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800174e:	c407      	stmia	r4!, {r0, r1, r2}
 8001750:	8023      	strh	r3, [r4, #0]
 8001752:	3402      	adds	r4, #2
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001758:	1d39      	adds	r1, r7, #4
 800175a:	2319      	movs	r3, #25
 800175c:	223e      	movs	r2, #62	; 0x3e
 800175e:	4863      	ldr	r0, [pc, #396]	; (80018ec <main+0x374>)
 8001760:	f008 f98f 	bl	8009a82 <HAL_UART_Transmit>
 8001764:	e011      	b.n	800178a <main+0x212>
#endif
  }
  else {
#if defined(LOGGING)
	  {
		uint8_t msg[] = "*** u-blox TimePulse modification has worked - switching from Hold to PLL mode.\r\n";
 8001766:	4a68      	ldr	r2, [pc, #416]	; (8001908 <main+0x390>)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4611      	mov	r1, r2
 800176c:	2252      	movs	r2, #82	; 0x52
 800176e:	4618      	mov	r0, r3
 8001770:	f009 fc08 	bl	800af84 <memcpy>
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8001774:	1d39      	adds	r1, r7, #4
 8001776:	2319      	movs	r3, #25
 8001778:	2251      	movs	r2, #81	; 0x51
 800177a:	485c      	ldr	r0, [pc, #368]	; (80018ec <main+0x374>)
 800177c:	f008 f981 	bl	8009a82 <HAL_UART_Transmit>
	  }
#endif
	  HAL_GPIO_WritePin(D12_HoRelay_GPIO_O_GPIO_Port, D12_HoRelay_GPIO_O_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2110      	movs	r1, #16
 8001784:	485a      	ldr	r0, [pc, #360]	; (80018f0 <main+0x378>)
 8001786:	f004 fb4d 	bl	8005e24 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t tempWaitUntil = 0UL;
	  uint32_t now = HAL_GetTick() / 1000UL;  (void) now;
 800178a:	f002 f8f5 	bl	8003978 <HAL_GetTick>
 800178e:	4603      	mov	r3, r0
 8001790:	4a5e      	ldr	r2, [pc, #376]	; (800190c <main+0x394>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	66fb      	str	r3, [r7, #108]	; 0x6c

	  /* Start ADC channel scan */
	  ADC_start();
 800179a:	f7ff f945 	bl	8000a28 <ADC_start>
#endif
	  }
#endif

#if 1
	  if (tempWaitUntil) {
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <main+0x398>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d078      	beq.n	8001898 <main+0x320>
		uint8_t msg[64];

		/* Onewire handling */
		int16_t owDs18b20_Temp = onewireDS18B20_tempRead(tempWaitUntil, onewireDevices[0]);
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <main+0x398>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	495a      	ldr	r1, [pc, #360]	; (8001914 <main+0x39c>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fd19 	bl	80011e4 <onewireDS18B20_tempRead>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

		int16_t t_int		= (owDs18b20_Temp >> 4);
 80017b8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 80017bc:	111b      	asrs	r3, r3, #4
 80017be:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

		uint16_t t_frac		= (owDs18b20_Temp & 0xfU);
 80017c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		if (t_int < 0) {
 80017ce:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da16      	bge.n	8001804 <main+0x28c>
			t_frac = ~t_frac;
 80017d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80017da:	43db      	mvns	r3, r3
 80017dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			++t_frac;
 80017e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80017e4:	3301      	adds	r3, #1
 80017e6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			t_frac %= 1000U;
 80017ea:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <main+0x394>)
 80017f0:	fba2 1203 	umull	r1, r2, r2, r3
 80017f4:	0992      	lsrs	r2, r2, #6
 80017f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017fa:	fb01 f202 	mul.w	r2, r1, r2
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		}

		uint16_t t_fv1000	= 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		if (t_frac & 0b1000) {
 800180a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <main+0x2aa>
			t_fv1000 += 500U;
 8001816:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800181a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800181e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}
		if (t_frac & 0b0100) {
 8001822:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <main+0x2c0>
			t_fv1000 += 250U;
 800182e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001832:	33fa      	adds	r3, #250	; 0xfa
 8001834:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}
		if (t_frac & 0b0010) {
 8001838:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <main+0x2d6>
			t_fv1000 += 125U;
 8001844:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001848:	337d      	adds	r3, #125	; 0x7d
 800184a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}
		if (t_frac & 0b0001) {
 800184e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <main+0x2ec>
			t_fv1000 +=  62U;
 800185a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800185e:	333e      	adds	r3, #62	; 0x3e
 8001860:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}

#if defined(LOGGING)
		int len = snprintf(((char*) msg), sizeof(msg), "*** Temperature: %+02d,%1u degC\r\n", t_int, (t_fv1000 + 50) / 100);
 8001864:	f9b7 1068 	ldrsh.w	r1, [r7, #104]	; 0x68
 8001868:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800186c:	3332      	adds	r3, #50	; 0x32
 800186e:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <main+0x3a0>)
 8001870:	fb82 0203 	smull	r0, r2, r2, r3
 8001874:	1152      	asrs	r2, r2, #5
 8001876:	17db      	asrs	r3, r3, #31
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	1d38      	adds	r0, r7, #4
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	460b      	mov	r3, r1
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <main+0x3a4>)
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	f009 fb94 	bl	800afb0 <sniprintf>
 8001888:	6678      	str	r0, [r7, #100]	; 0x64
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800188a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800188c:	b29a      	uxth	r2, r3
 800188e:	1d39      	adds	r1, r7, #4
 8001890:	2319      	movs	r3, #25
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <main+0x374>)
 8001894:	f008 f8f5 	bl	8009a82 <HAL_UART_Transmit>
#endif
	  }
#endif

	  /* Request next temperature value */
	  tempWaitUntil = onewireDS18B20_tempReq(onewireDevices[0]);
 8001898:	481e      	ldr	r0, [pc, #120]	; (8001914 <main+0x39c>)
 800189a:	f7ff fc50 	bl	800113e <onewireDS18B20_tempReq>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <main+0x398>)
 80018a2:	6013      	str	r3, [r2, #0]

	  /* Blocks until new frame comes in */
	  static uint8_t  sel3 = 0U;

	  ++sel3;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <main+0x3a8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <main+0x3a8>)
 80018ae:	701a      	strb	r2, [r3, #0]
	  sel3 %= 3;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <main+0x3a8>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <main+0x3ac>)
 80018b6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ba:	0859      	lsrs	r1, r3, #1
 80018bc:	460b      	mov	r3, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	440b      	add	r3, r1
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <main+0x3a8>)
 80018c8:	701a      	strb	r2, [r3, #0]
	  switch (sel3) {
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <main+0x3a8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <main+0x366>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d02c      	beq.n	8001930 <main+0x3b8>
	  case 0:
	  default:
		  ublox_NavClock_get(&ubloxNavClock);
 80018d6:	4814      	ldr	r0, [pc, #80]	; (8001928 <main+0x3b0>)
 80018d8:	f001 fbc4 	bl	8003064 <ublox_NavClock_get>
		  break;
 80018dc:	e02c      	b.n	8001938 <main+0x3c0>

	  case 1:
		  ublox_NavDop_get(&ubloxNavDop);
 80018de:	4813      	ldr	r0, [pc, #76]	; (800192c <main+0x3b4>)
 80018e0:	f001 f95c 	bl	8002b9c <ublox_NavDop_get>
		  break;
 80018e4:	e028      	b.n	8001938 <main+0x3c0>
 80018e6:	bf00      	nop
 80018e8:	0800b96c 	.word	0x0800b96c
 80018ec:	20000600 	.word	0x20000600
 80018f0:	48000400 	.word	0x48000400
 80018f4:	0800b830 	.word	0x0800b830
 80018f8:	0800b844 	.word	0x0800b844
 80018fc:	0800b860 	.word	0x0800b860
 8001900:	0800b87c 	.word	0x0800b87c
 8001904:	0800b9c4 	.word	0x0800b9c4
 8001908:	0800ba04 	.word	0x0800ba04
 800190c:	10624dd3 	.word	0x10624dd3
 8001910:	2000024c 	.word	0x2000024c
 8001914:	2000020c 	.word	0x2000020c
 8001918:	51eb851f 	.word	0x51eb851f
 800191c:	0800b8ac 	.word	0x0800b8ac
 8001920:	20000250 	.word	0x20000250
 8001924:	aaaaaaab 	.word	0xaaaaaaab
 8001928:	200000d0 	.word	0x200000d0
 800192c:	200000bc 	.word	0x200000bc

	  case 2:
		  ublox_NavSvinfo_get(&UbloxNavSvinfo);
 8001930:	4831      	ldr	r0, [pc, #196]	; (80019f8 <main+0x480>)
 8001932:	f001 fd0d 	bl	8003350 <ublox_NavSvinfo_get>
		  break;
 8001936:	bf00      	nop
		  }
	  }
#endif

	  /* Stop ADC in case something still runs */
	  ADC_stop();
 8001938:	f7ff f892 	bl	8000a60 <ADC_stop>

#if defined(LOGGING)
	  /* Show ADC values */
	  adcCh9_lck = 1U; adcCh10_lck = 1U; adcCh16_lck = 1U;
 800193c:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <main+0x484>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <main+0x488>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <main+0x48c>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
	  {
		uint8_t msg[64];
		int len;

		len = snprintf(((char*) msg), sizeof(msg), "*** ADDc values:\r\n");
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4a2d      	ldr	r2, [pc, #180]	; (8001a08 <main+0x490>)
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	4618      	mov	r0, r3
 8001956:	f009 fb2b 	bl	800afb0 <sniprintf>
 800195a:	6638      	str	r0, [r7, #96]	; 0x60
		HAL_UART_Transmit(&huart2, msg, len, 25);
 800195c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800195e:	b29a      	uxth	r2, r3
 8001960:	1d39      	adds	r1, r7, #4
 8001962:	2319      	movs	r3, #25
 8001964:	4829      	ldr	r0, [pc, #164]	; (8001a0c <main+0x494>)
 8001966:	f008 f88c 	bl	8009a82 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * (Ch09) V_OCXO        = 0x%04x = %05d\r\n",
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <main+0x498>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <main+0x498>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	1d38      	adds	r0, r7, #4
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <main+0x49c>)
 800197c:	2140      	movs	r1, #64	; 0x40
 800197e:	f009 fb17 	bl	800afb0 <sniprintf>
 8001982:	6638      	str	r0, [r7, #96]	; 0x60
				adcCh9_val,
				adcCh9_val);
		HAL_UART_Transmit(&huart2, msg, len, 25);
 8001984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001986:	b29a      	uxth	r2, r3
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	2319      	movs	r3, #25
 800198c:	481f      	ldr	r0, [pc, #124]	; (8001a0c <main+0x494>)
 800198e:	f008 f878 	bl	8009a82 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * (Ch10) V_HOLD        = 0x%04x = %05d\r\n",
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <main+0x4a0>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <main+0x4a0>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	1d38      	adds	r0, r7, #4
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <main+0x4a4>)
 80019a4:	2140      	movs	r1, #64	; 0x40
 80019a6:	f009 fb03 	bl	800afb0 <sniprintf>
 80019aa:	6638      	str	r0, [r7, #96]	; 0x60
				adcCh10_val,
				adcCh10_val);
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80019ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	1d39      	adds	r1, r7, #4
 80019b2:	2319      	movs	r3, #25
 80019b4:	4815      	ldr	r0, [pc, #84]	; (8001a0c <main+0x494>)
 80019b6:	f008 f864 	bl	8009a82 <HAL_UART_Transmit>

		len = snprintf(((char*) msg), sizeof(msg), "  * (Ch16) V_DCF77_DEMOD = 0x%04x = %05d\r\n\r\n",
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <main+0x4a8>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <main+0x4a8>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	1d38      	adds	r0, r7, #4
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <main+0x4ac>)
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	f009 faef 	bl	800afb0 <sniprintf>
 80019d2:	6638      	str	r0, [r7, #96]	; 0x60
				adcCh16_val,
				adcCh16_val);
		HAL_UART_Transmit(&huart2, msg, len, 25);
 80019d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	1d39      	adds	r1, r7, #4
 80019da:	2319      	movs	r3, #25
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <main+0x494>)
 80019de:	f008 f850 	bl	8009a82 <HAL_UART_Transmit>
	  }
	  adcCh9_lck = 0U; adcCh10_lck = 0U; adcCh16_lck = 0U;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <main+0x484>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <main+0x488>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <main+0x48c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
  {
 80019f4:	e6c9      	b.n	800178a <main+0x212>
 80019f6:	bf00      	nop
 80019f8:	200000e4 	.word	0x200000e4
 80019fc:	200000a4 	.word	0x200000a4
 8001a00:	200000a8 	.word	0x200000a8
 8001a04:	200000ac 	.word	0x200000ac
 8001a08:	0800b8d0 	.word	0x0800b8d0
 8001a0c:	20000600 	.word	0x20000600
 8001a10:	200000a6 	.word	0x200000a6
 8001a14:	0800b8e4 	.word	0x0800b8e4
 8001a18:	200000aa 	.word	0x200000aa
 8001a1c:	0800b910 	.word	0x0800b910
 8001a20:	200000ae 	.word	0x200000ae
 8001a24:	0800b93c 	.word	0x0800b93c

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b096      	sub	sp, #88	; 0x58
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2244      	movs	r2, #68	; 0x44
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f009 fab2 	bl	800afa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a4e:	f005 ff6d 	bl	800792c <HAL_PWREx_ControlVoltageScaling>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a58:	f000 f858 	bl	8001b0c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a5c:	f005 ff48 	bl	80078f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <SystemClock_Config+0xbc>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <SystemClock_Config+0xbc>)
 8001a68:	f023 0318 	bic.w	r3, r3, #24
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001a70:	2306      	movs	r3, #6
 8001a72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a82:	2302      	movs	r3, #2
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a86:	2302      	movs	r3, #2
 8001a88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a92:	2307      	movs	r3, #7
 8001a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 ff98 	bl	80079d8 <HAL_RCC_OscConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001aae:	f000 f82d 	bl	8001b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2103      	movs	r1, #3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f006 fba4 	bl	8008218 <HAL_RCC_ClockConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001ad6:	f000 f819 	bl	8001b0c <Error_Handler>
  }
}
 8001ada:	bf00      	nop
 8001adc:	3758      	adds	r7, #88	; 0x58
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001afa:	f001 ff29 	bl	8003950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40012c00 	.word	0x40012c00

08001b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b10:	b672      	cpsid	i
}
 8001b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <Error_Handler+0x8>
	...

08001b18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <MX_RTC_Init+0x4c>)
 8001b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b2a:	227f      	movs	r2, #127	; 0x7f
 8001b2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b30:	22ff      	movs	r2, #255	; 0xff
 8001b32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_RTC_Init+0x48>)
 8001b4e:	f007 f881 	bl	8008c54 <HAL_RTC_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001b58:	f7ff ffd8 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000045c 	.word	0x2000045c
 8001b64:	40002800 	.word	0x40002800

08001b68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b098      	sub	sp, #96	; 0x60
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2254      	movs	r2, #84	; 0x54
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f009 fa11 	bl	800afa0 <memset>
  if(rtcHandle->Instance==RTC)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_RTC_MspInit+0x58>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d117      	bne.n	8001bb8 <HAL_RTC_MspInit+0x50>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b92:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 fd75 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ba4:	f7ff ffb2 	bl	8001b0c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_RTC_MspInit+0x5c>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_RTC_MspInit+0x5c>)
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3760      	adds	r7, #96	; 0x60
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40002800 	.word	0x40002800
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <MX_SPI1_Init+0x78>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001be2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c16:	2207      	movs	r2, #7
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c22:	2208      	movs	r2, #8
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c28:	f007 f926 	bl	8008e78 <HAL_SPI_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f7ff ff6b 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000480 	.word	0x20000480
 8001c40:	40013000 	.word	0x40013000

08001c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_SPI_MspInit+0x7c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d128      	bne.n	8001cb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_SPI_MspInit+0x80>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = A1_SPI1_SCK_Pin|A5_SPI1_MISO_Pin|A6_SPI1_MOSI_Pin;
 8001c96:	23c2      	movs	r3, #194	; 0xc2
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f003 fe6a 	bl	800598c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40013000 	.word	0x40013000
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_MspInit+0x44>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_MspInit+0x44>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_MspInit+0x44>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_MspInit+0x44>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000

08001d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	2019      	movs	r0, #25
 8001d26:	f003 fb75 	bl	8005414 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d2a:	2019      	movs	r0, #25
 8001d2c:	f003 fb8e 	bl	800544c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_InitTick+0x9c>)
 8001d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_InitTick+0x9c>)
 8001d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_InitTick+0x9c>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d48:	f107 0210 	add.w	r2, r7, #16
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f006 fc06 	bl	8008564 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d58:	f006 fbee 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 8001d5c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0c9b      	lsrs	r3, r3, #18
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d8c:	4809      	ldr	r0, [pc, #36]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d8e:	f007 f916 	bl	8008fbe <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d98:	4806      	ldr	r0, [pc, #24]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d9a:	f007 f971 	bl	8009080 <HAL_TIM_Base_Start_IT>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3730      	adds	r7, #48	; 0x30
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	200004e4 	.word	0x200004e4
 8001db8:	40012c00 	.word	0x40012c00

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <DMA1_Channel1_IRQHandler+0x10>)
 8001e1a:	f003 fcca 	bl	80057b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200003c8 	.word	0x200003c8

08001e28 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <ADC1_IRQHandler+0x10>)
 8001e2e:	f002 f990 	bl	8004152 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000364 	.word	0x20000364

08001e3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e42:	f007 f9c8 	bl	80091d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200004e4 	.word	0x200004e4

08001e50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <I2C1_EV_IRQHandler+0x10>)
 8001e56:	f004 fa04 	bl	8006262 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000410 	.word	0x20000410

08001e64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <I2C1_ER_IRQHandler+0x10>)
 8001e6a:	f004 fa14 	bl	8006296 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000410 	.word	0x20000410

08001e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART1_IRQHandler+0x10>)
 8001e7e:	f008 f80d 	bl	8009e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000057c 	.word	0x2000057c

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f009 f838 	bl	800af30 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000c000 	.word	0x2000c000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000254 	.word	0x20000254
 8001ef4:	20000698 	.word	0x20000698

08001ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <SystemInit+0x5c>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <SystemInit+0x5c>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <SystemInit+0x60>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <SystemInit+0x60>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <SystemInit+0x60>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <SystemInit+0x60>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <SystemInit+0x60>)
 8001f24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <SystemInit+0x60>)
 8001f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <SystemInit+0x60>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <SystemInit+0x60>)
 8001f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SystemInit+0x60>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	40021000 	.word	0x40021000

08001f5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001fa2:	481c      	ldr	r0, [pc, #112]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001fa4:	f007 f8c0 	bl	8009128 <HAL_TIM_IC_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fae:	f7ff fdad 	bl	8001b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4814      	ldr	r0, [pc, #80]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001fc2:	f007 fc53 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001fcc:	f7ff fd9e 	bl	8001b0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001fe8:	f007 fa14 	bl	8009414 <HAL_TIM_IC_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ff2:	f7ff fd8b 	bl	8001b0c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_TIM2_Init+0xb8>)
 8001ffe:	f007 fa09 	bl	8009414 <HAL_TIM_IC_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002008:	f7ff fd80 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000530 	.word	0x20000530

08002018 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002038:	d144      	bne.n	80020c4 <HAL_TIM_IC_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a23      	ldr	r2, [pc, #140]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_TIM_IC_MspInit+0xb4>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A2_DCF77_CAR_TIM2_CH4_Pin;
 8002082:	2308      	movs	r3, #8
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002092:	2301      	movs	r3, #1
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_DCF77_CAR_TIM2_CH4_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f003 fc74 	bl	800598c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D13_GPS_PPS_TIM2_CH2_Pin;
 80020a4:	2308      	movs	r3, #8
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b4:	2301      	movs	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(D13_GPS_PPS_TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <HAL_TIM_IC_MspInit+0xb8>)
 80020c0:	f003 fc64 	bl	800598c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000400 	.word	0x48000400

080020d4 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1TxReady = SET;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_UART_TxCpltCallback+0x1c>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000358 	.word	0x20000358

080020f4 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  gUart1RxReady = SET;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_UART_RxCpltCallback+0x1c>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000359 	.word	0x20000359

08002114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	 *	#define  HAL_UART_ERROR_FE               (0x00000004U)    !< Frame error
	 *	#define  HAL_UART_ERROR_ORE              (0x00000008U)    !< Overrun error
	 *	#define  HAL_UART_ERROR_DMA              (0x00000010U)    !< DMA transfer error
	 *	#define  HAL_UART_ERROR_RTO              (0x00000020U)    !< Receiver Timeout error
	 */
	__IO uint32_t err = UartHandle->ErrorCode;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002122:	60fb      	str	r3, [r7, #12]

	if (UartHandle == &huart1) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1a      	ldr	r2, [pc, #104]	; (8002190 <HAL_UART_ErrorCallback+0x7c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d127      	bne.n	800217c <HAL_UART_ErrorCallback+0x68>
		if (err & HAL_UART_ERROR_RTO) {
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_UART_ErrorCallback+0x2a>
			/* Stop transfer */
			gUart1RxReady = SET;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_UART_ErrorCallback+0x80>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
		}
	}
	else if (UartHandle == &huart2) {
		Error_Handler();
	}
}
 800213c:	e024      	b.n	8002188 <HAL_UART_ErrorCallback+0x74>
				err & HAL_UART_ERROR_PE ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0301 	and.w	r3, r3, #1
		else if (
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_NE ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0302 	and.w	r3, r3, #2
				err & HAL_UART_ERROR_PE ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <HAL_UART_ErrorCallback+0x48>
				err & HAL_UART_ERROR_FE) {
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0304 	and.w	r3, r3, #4
				err & HAL_UART_ERROR_NE ||
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_UART_ErrorCallback+0x50>
			gUart1RxReady = SET;
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_UART_ErrorCallback+0x80>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	e011      	b.n	8002188 <HAL_UART_ErrorCallback+0x74>
		else if (err & HAL_UART_ERROR_ORE) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_UART_ErrorCallback+0x62>
			gUart1RxReady = SET;
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_UART_ErrorCallback+0x80>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
}
 8002174:	e008      	b.n	8002188 <HAL_UART_ErrorCallback+0x74>
			Error_Handler();
 8002176:	f7ff fcc9 	bl	8001b0c <Error_Handler>
}
 800217a:	e005      	b.n	8002188 <HAL_UART_ErrorCallback+0x74>
	else if (UartHandle == &huart2) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_UART_ErrorCallback+0x84>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_UART_ErrorCallback+0x74>
		Error_Handler();
 8002184:	f7ff fcc2 	bl	8001b0c <Error_Handler>
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000057c 	.word	0x2000057c
 8002194:	20000359 	.word	0x20000359
 8002198:	20000600 	.word	0x20000600

0800219c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021a2:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <MX_USART1_UART_Init+0x5c>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_USART1_UART_Init+0x58>)
 80021e0:	f007 fbc8 	bl	8009974 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021ea:	f7ff fc8f 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000057c 	.word	0x2000057c
 80021f8:	40013800 	.word	0x40013800

080021fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <MX_USART2_UART_Init+0x5c>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USART2_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USART2_UART_Init+0x58>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART2_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USART2_UART_Init+0x58>)
 8002240:	f007 fb98 	bl	8009974 <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800224a:	f7ff fc5f 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000600 	.word	0x20000600
 8002258:	40004400 	.word	0x40004400

0800225c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0a0      	sub	sp, #128	; 0x80
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	f107 0318 	add.w	r3, r7, #24
 8002278:	2254      	movs	r2, #84	; 0x54
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f008 fe8f 	bl	800afa0 <memset>
  if(uartHandle->Instance==USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a54      	ldr	r2, [pc, #336]	; (80023d8 <HAL_UART_MspInit+0x17c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d152      	bne.n	8002332 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800228c:	2301      	movs	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002290:	2302      	movs	r3, #2
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	4618      	mov	r0, r3
 800229a:	f006 f9f5 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a4:	f7ff fc32 	bl	8001b0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_UART_MspInit+0x180>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	4a4b      	ldr	r2, [pc, #300]	; (80023dc <HAL_UART_MspInit+0x180>)
 80022ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b2:	6613      	str	r3, [r2, #96]	; 0x60
 80022b4:	4b49      	ldr	r3, [pc, #292]	; (80023dc <HAL_UART_MspInit+0x180>)
 80022b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_UART_MspInit+0x180>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	4a45      	ldr	r2, [pc, #276]	; (80023dc <HAL_UART_MspInit+0x180>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_UART_MspInit+0x180>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = D1_UBLOX_USART1_TX_Pin;
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ea:	2307      	movs	r3, #7
 80022ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D1_UBLOX_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022f2:	4619      	mov	r1, r3
 80022f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f8:	f003 fb48 	bl	800598c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = D0_UBLOX_USART1_RX_Pin;
 80022fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002300:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002306:	2301      	movs	r3, #1
 8002308:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800230e:	2307      	movs	r3, #7
 8002310:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(D0_UBLOX_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231c:	f003 fb36 	bl	800598c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2025      	movs	r0, #37	; 0x25
 8002326:	f003 f875 	bl	8005414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800232a:	2025      	movs	r0, #37	; 0x25
 800232c:	f003 f88e 	bl	800544c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002330:	e04d      	b.n	80023ce <HAL_UART_MspInit+0x172>
  else if(uartHandle->Instance==USART2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_UART_MspInit+0x184>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d148      	bne.n	80023ce <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002340:	2308      	movs	r3, #8
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	4618      	mov	r0, r3
 800234a:	f006 f99d 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8002354:	f7ff fbda 	bl	8001b0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_UART_MspInit+0x180>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_UART_MspInit+0x180>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002362:	6593      	str	r3, [r2, #88]	; 0x58
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_UART_MspInit+0x180>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_UART_MspInit+0x180>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x180>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_UART_MspInit+0x180>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NoA7_TERMINAL_USART2_TX_Pin;
 8002388:	2304      	movs	r3, #4
 800238a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002394:	2301      	movs	r3, #1
 8002396:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002398:	2307      	movs	r3, #7
 800239a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoA7_TERMINAL_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023a0:	4619      	mov	r1, r3
 80023a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a6:	f003 faf1 	bl	800598c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NoJ1J2_TERMINAL_USART2_RX_Pin;
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023b8:	2301      	movs	r3, #1
 80023ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80023bc:	2303      	movs	r3, #3
 80023be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(NoJ1J2_TERMINAL_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ca:	f003 fadf 	bl	800598c <HAL_GPIO_Init>
}
 80023ce:	bf00      	nop
 80023d0:	3780      	adds	r7, #128	; 0x80
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40004400 	.word	0x40004400

080023e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_UART_MspDeInit+0x5c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10f      	bne.n	8002416 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_UART_MspDeInit+0x60>)
 80023f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_UART_MspDeInit+0x60>)
 80023fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002400:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, D1_UBLOX_USART1_TX_Pin|D0_UBLOX_USART1_RX_Pin);
 8002402:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f003 fc29 	bl	8005c60 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800240e:	2025      	movs	r0, #37	; 0x25
 8002410:	f003 f82a 	bl	8005468 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002414:	e010      	b.n	8002438 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_UART_MspDeInit+0x64>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d10b      	bne.n	8002438 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_UART_MspDeInit+0x60>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_UART_MspDeInit+0x60>)
 8002426:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, NoA7_TERMINAL_USART2_TX_Pin|NoJ1J2_TERMINAL_USART2_RX_Pin);
 800242c:	f248 0104 	movw	r1, #32772	; 0x8004
 8002430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002434:	f003 fc14 	bl	8005c60 <HAL_GPIO_DeInit>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013800 	.word	0x40013800
 8002444:	40021000 	.word	0x40021000
 8002448:	40004400 	.word	0x40004400

0800244c <MX_USART1_UART_Init_38400baud>:


/* EXTRA INITS */

void MX_USART1_UART_Init_38400baud(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <MX_USART1_UART_Init_38400baud+0x5c>)
 8002454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002458:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800245c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART1_UART_Init_38400baud+0x58>)
 8002490:	f007 fa70 	bl	8009974 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART1_UART_Init_38400baud+0x52>
  {
    Error_Handler();
 800249a:	f7ff fb37 	bl	8001b0c <Error_Handler>
  }

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000057c 	.word	0x2000057c
 80024a8:	40013800 	.word	0x40013800

080024ac <calcChecksumRFC1145>:


/* UBLOX COMMUNICATION */

void calcChecksumRFC1145(uint8_t* ubxMsg, uint8_t ubxSize)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
	uint8_t ck_a = 0U, ck_b = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	2300      	movs	r3, #0
 80024be:	73bb      	strb	r3, [r7, #14]

	/* Forward to checking region */
	ubxMsg += 2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3302      	adds	r3, #2
 80024c4:	607b      	str	r3, [r7, #4]

	/* Calc checksums */
	for (int i = ubxSize - 4; i; --i) {
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	3b04      	subs	r3, #4
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	e00d      	b.n	80024ea <calcChecksumRFC1145+0x3e>
		ck_a = 0xffU & (ck_a + *(ubxMsg++));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4413      	add	r3, r2
 80024da:	73fb      	strb	r3, [r7, #15]
		ck_b = 0xffU & (ck_b + ck_a);
 80024dc:	7bba      	ldrb	r2, [r7, #14]
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	4413      	add	r3, r2
 80024e2:	73bb      	strb	r3, [r7, #14]
	for (int i = ubxSize - 4; i; --i) {
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ee      	bne.n	80024ce <calcChecksumRFC1145+0x22>
	}

	/* Fill in checksums */
	*(ubxMsg++) = ck_a;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	701a      	strb	r2, [r3, #0]
	*ubxMsg 	= ck_b;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7bba      	ldrb	r2, [r7, #14]
 80024fe:	701a      	strb	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <ubloxUartSpeedFast>:


void ubloxUartSpeedFast(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b0ae      	sub	sp, #184	; 0xb8
 8002510:	af00      	add	r7, sp, #0
	const uint32_t baudrate = 38400UL;
 8002512:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t cfg_Port1_Req[]		= {
 800251a:	4ab5      	ldr	r2, [pc, #724]	; (80027f0 <ubloxUartSpeedFast+0x2e4>)
 800251c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002520:	ca07      	ldmia	r2, {r0, r1, r2}
 8002522:	c303      	stmia	r3!, {r0, r1}
 8002524:	701a      	strb	r2, [r3, #0]
			0x06,	0x00,
			0x01,	0x00,
			0x01,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_Port1_Req, sizeof(cfg_Port1_Req));
 8002526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800252a:	2109      	movs	r1, #9
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ffbd 	bl	80024ac <calcChecksumRFC1145>

	uint8_t cfg_Port1_Set[28] 	= { 0 };
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002538:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]

	/* Preparation for little endian */
	uint8_t buf[4];
	buf[0] = (baudrate & 0x000000ffUL)      ;
 800254a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	buf[1] = (baudrate & 0x0000ff00UL) >>  8;
 8002554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	buf[2] = (baudrate & 0x00ff0000UL) >> 16;
 8002560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	buf[3] = (baudrate & 0xff000000UL) >> 24;
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002570:	0e1b      	lsrs	r3, r3, #24
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	int cnt = 3;
 8002578:	2303      	movs	r3, #3
 800257a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 800257e:	e113      	b.n	80027a8 <ubloxUartSpeedFast+0x29c>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** CFG-PORT: TX --> RX --> ";
 8002580:	4b9c      	ldr	r3, [pc, #624]	; (80027f4 <ubloxUartSpeedFast+0x2e8>)
 8002582:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002586:	461d      	mov	r5, r3
 8002588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002590:	c407      	stmia	r4!, {r0, r1, r2}
 8002592:	8023      	strh	r3, [r4, #0]
 8002594:	3402      	adds	r4, #2
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800259a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800259e:	2319      	movs	r3, #25
 80025a0:	221e      	movs	r2, #30
 80025a2:	4895      	ldr	r0, [pc, #596]	; (80027f8 <ubloxUartSpeedFast+0x2ec>)
 80025a4:	f007 fa6d 	bl	8009a82 <HAL_UART_Transmit>
		}
#endif

		/* Send CFG-PORT request */
		gUart1TxReady = RESET;
 80025a8:	4b94      	ldr	r3, [pc, #592]	; (80027fc <ubloxUartSpeedFast+0x2f0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, cfg_Port1_Req, sizeof(cfg_Port1_Req));
 80025ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b2:	2209      	movs	r2, #9
 80025b4:	4619      	mov	r1, r3
 80025b6:	4892      	ldr	r0, [pc, #584]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80025b8:	f007 faf8 	bl	8009bac <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80025bc:	bf00      	nop
 80025be:	4b8f      	ldr	r3, [pc, #572]	; (80027fc <ubloxUartSpeedFast+0x2f0>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d1fa      	bne.n	80025be <ubloxUartSpeedFast+0xb2>
		}

		gUart1RxReady = RESET;
 80025c8:	4b8e      	ldr	r3, [pc, #568]	; (8002804 <ubloxUartSpeedFast+0x2f8>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80025ce:	488c      	ldr	r0, [pc, #560]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80025d0:	f007 fbe2 	bl	8009d98 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80025d4:	488a      	ldr	r0, [pc, #552]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80025d6:	f007 fe83 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80025da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025de:	498a      	ldr	r1, [pc, #552]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 80025e0:	4887      	ldr	r0, [pc, #540]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80025e2:	f007 fb3f 	bl	8009c64 <HAL_UART_Receive_IT>
		int i = 11;
 80025e6:	230b      	movs	r3, #11
 80025e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80025ec:	e007      	b.n	80025fe <ubloxUartSpeedFast+0xf2>
			HAL_Delay(100);
 80025ee:	2064      	movs	r0, #100	; 0x64
 80025f0:	f001 f9ce 	bl	8003990 <HAL_Delay>
			--i;
 80025f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025f8:	3b01      	subs	r3, #1
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (i && (gUart1RxReady != SET)) {
 80025fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <ubloxUartSpeedFast+0x104>
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <ubloxUartSpeedFast+0x2f8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d1ee      	bne.n	80025ee <ubloxUartSpeedFast+0xe2>
		}

		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002610:	4b7d      	ldr	r3, [pc, #500]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2bb5      	cmp	r3, #181	; 0xb5
 8002616:	f040 80bf 	bne.w	8002798 <ubloxUartSpeedFast+0x28c>
 800261a:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	2b62      	cmp	r3, #98	; 0x62
 8002620:	f040 80ba 	bne.w	8002798 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 8002624:	4b78      	ldr	r3, [pc, #480]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002626:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002628:	2b06      	cmp	r3, #6
 800262a:	f040 80b5 	bne.w	8002798 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 80b0 	bne.w	8002798 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8002638:	4b73      	ldr	r3, [pc, #460]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 800263a:	791b      	ldrb	r3, [r3, #4]
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x00) &&
 800263c:	2b14      	cmp	r3, #20
 800263e:	f040 80ab 	bne.w	8002798 <ubloxUartSpeedFast+0x28c>
				(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8002642:	4b71      	ldr	r3, [pc, #452]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002644:	795b      	ldrb	r3, [r3, #5]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 80a6 	bne.w	8002798 <ubloxUartSpeedFast+0x28c>

			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002652:	e010      	b.n	8002676 <ubloxUartSpeedFast+0x16a>
				cfg_Port1_Set[i] = ublox_Response[i];
 8002654:	4a6c      	ldr	r2, [pc, #432]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800265a:	4413      	add	r3, r2
 800265c:	7819      	ldrb	r1, [r3, #0]
 800265e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002666:	4413      	add	r3, r2
 8002668:	460a      	mov	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_Port1_Set); ++i) {
 800266c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002670:	3301      	adds	r3, #1
 8002672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800267a:	2b1b      	cmp	r3, #27
 800267c:	d9ea      	bls.n	8002654 <ubloxUartSpeedFast+0x148>
			}

			/* Set new baudrate */
			cfg_Port1_Set[6 +  8] = buf[0];
 800267e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002682:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_Port1_Set[6 +  9] = buf[1];
 8002686:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800268a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_Port1_Set[6 + 10] = buf[2];
 800268e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002692:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_Port1_Set[6 + 11] = buf[3];
 8002696:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800269a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_Port1_Set, sizeof(cfg_Port1_Set));
 800269e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026a2:	211c      	movs	r1, #28
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff01 	bl	80024ac <calcChecksumRFC1145>

			/* Send CFG-PORT for COM1 */
			gUart1TxReady = RESET;
 80026aa:	4b54      	ldr	r3, [pc, #336]	; (80027fc <ubloxUartSpeedFast+0x2f0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, cfg_Port1_Set, sizeof(cfg_Port1_Set));
 80026b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026b4:	221c      	movs	r2, #28
 80026b6:	4619      	mov	r1, r3
 80026b8:	4851      	ldr	r0, [pc, #324]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80026ba:	f007 fa77 	bl	8009bac <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 80026be:	bf00      	nop
 80026c0:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <ubloxUartSpeedFast+0x2f0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d1fa      	bne.n	80026c0 <ubloxUartSpeedFast+0x1b4>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 80026ca:	484d      	ldr	r0, [pc, #308]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80026cc:	f007 fb0e 	bl	8009cec <HAL_UART_AbortTransmit_IT>

			/* Change baudrate */
			HAL_UART_DeInit(&huart1);
 80026d0:	484b      	ldr	r0, [pc, #300]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80026d2:	f007 f99d 	bl	8009a10 <HAL_UART_DeInit>
			MX_USART1_UART_Init_38400baud();
 80026d6:	f7ff feb9 	bl	800244c <MX_USART1_UART_Init_38400baud>

			/* Receive CFG-PORT status */
			gUart1RxReady = RESET;
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <ubloxUartSpeedFast+0x2f8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart1);
 80026e0:	4847      	ldr	r0, [pc, #284]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80026e2:	f007 fb59 	bl	8009d98 <HAL_UART_AbortReceive_IT>
			HAL_UART_EnableReceiverTimeout(&huart1);
 80026e6:	4846      	ldr	r0, [pc, #280]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80026e8:	f007 fdfa 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80026ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f0:	4945      	ldr	r1, [pc, #276]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 80026f2:	4843      	ldr	r0, [pc, #268]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80026f4:	f007 fab6 	bl	8009c64 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 80026f8:	bf00      	nop
 80026fa:	4b42      	ldr	r3, [pc, #264]	; (8002804 <ubloxUartSpeedFast+0x2f8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d1fa      	bne.n	80026fa <ubloxUartSpeedFast+0x1ee>
			}

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2bb5      	cmp	r3, #181	; 0xb5
 800270a:	d130      	bne.n	800276e <ubloxUartSpeedFast+0x262>
 800270c:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	2b62      	cmp	r3, #98	; 0x62
 8002712:	d12c      	bne.n	800276e <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002714:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002716:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002718:	2b05      	cmp	r3, #5
 800271a:	d128      	bne.n	800276e <ubloxUartSpeedFast+0x262>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d124      	bne.n	800276e <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002726:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002728:	2b02      	cmp	r3, #2
 800272a:	d120      	bne.n	800276e <ubloxUartSpeedFast+0x262>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 800272e:	795b      	ldrb	r3, [r3, #5]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11c      	bne.n	800276e <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 8002736:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002738:	2b06      	cmp	r3, #6
 800273a:	d118      	bne.n	800276e <ubloxUartSpeedFast+0x262>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x00)) {
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <ubloxUartSpeedFast+0x2fc>)
 800273e:	79db      	ldrb	r3, [r3, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d114      	bne.n	800276e <ubloxUartSpeedFast+0x262>
				/* ACK-ACK for CFG-PORT received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <ubloxUartSpeedFast+0x300>)
 8002746:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800274a:	461d      	mov	r5, r3
 800274c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002754:	c407      	stmia	r4!, {r0, r1, r2}
 8002756:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002758:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800275c:	2319      	movs	r3, #25
 800275e:	221c      	movs	r2, #28
 8002760:	4825      	ldr	r0, [pc, #148]	; (80027f8 <ubloxUartSpeedFast+0x2ec>)
 8002762:	f007 f98e 	bl	8009a82 <HAL_UART_Transmit>
					HAL_Delay(100);
 8002766:	2064      	movs	r0, #100	; 0x64
 8002768:	f001 f912 	bl	8003990 <HAL_Delay>
				{
 800276c:	e03d      	b.n	80027ea <ubloxUartSpeedFast+0x2de>
#endif
			}
			else {
#if defined(LOGGING)
				{
					uint8_t msg[] = "no ACK-ACK received --> silently drop and accept.\r\n";
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <ubloxUartSpeedFast+0x304>)
 8002770:	1d3c      	adds	r4, r7, #4
 8002772:	461d      	mov	r5, r3
 8002774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800277c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002784:	1d39      	adds	r1, r7, #4
 8002786:	2319      	movs	r3, #25
 8002788:	2233      	movs	r2, #51	; 0x33
 800278a:	481b      	ldr	r0, [pc, #108]	; (80027f8 <ubloxUartSpeedFast+0x2ec>)
 800278c:	f007 f979 	bl	8009a82 <HAL_UART_Transmit>
					HAL_Delay(100);
 8002790:	2064      	movs	r0, #100	; 0x64
 8002792:	f001 f8fd 	bl	8003990 <HAL_Delay>
				}
#endif
			}
			return;
 8002796:	e028      	b.n	80027ea <ubloxUartSpeedFast+0x2de>
		}
		else {
			/* Failure in transmissions */
			HAL_Delay(200);
 8002798:	20c8      	movs	r0, #200	; 0xc8
 800279a:	f001 f8f9 	bl	8003990 <HAL_Delay>
			--cnt;
 800279e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (cnt) {
 80027a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f aee7 	bne.w	8002580 <ubloxUartSpeedFast+0x74>
		}
	}  // while (cnt)

	/* Change baudrate */
	HAL_UART_DeInit(&huart1);
 80027b2:	4813      	ldr	r0, [pc, #76]	; (8002800 <ubloxUartSpeedFast+0x2f4>)
 80027b4:	f007 f92c 	bl	8009a10 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80027b8:	f7ff fe48 	bl	800244c <MX_USART1_UART_Init_38400baud>

#if defined(LOGGING)
	{
		uint8_t msg[] = "no result, already fast? Turning local bitrate up.\r\n";
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <ubloxUartSpeedFast+0x308>)
 80027be:	1d3c      	adds	r4, r7, #4
 80027c0:	461d      	mov	r5, r3
 80027c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027d2:	6020      	str	r0, [r4, #0]
 80027d4:	3404      	adds	r4, #4
 80027d6:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80027d8:	1d39      	adds	r1, r7, #4
 80027da:	2319      	movs	r3, #25
 80027dc:	2234      	movs	r2, #52	; 0x34
 80027de:	4806      	ldr	r0, [pc, #24]	; (80027f8 <ubloxUartSpeedFast+0x2ec>)
 80027e0:	f007 f94f 	bl	8009a82 <HAL_UART_Transmit>
		HAL_Delay(100);
 80027e4:	2064      	movs	r0, #100	; 0x64
 80027e6:	f001 f8d3 	bl	8003990 <HAL_Delay>
	}
#endif
}
 80027ea:	37b8      	adds	r7, #184	; 0xb8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bdb0      	pop	{r4, r5, r7, pc}
 80027f0:	0800ba58 	.word	0x0800ba58
 80027f4:	0800ba64 	.word	0x0800ba64
 80027f8:	20000600 	.word	0x20000600
 80027fc:	20000358 	.word	0x20000358
 8002800:	2000057c 	.word	0x2000057c
 8002804:	20000359 	.word	0x20000359
 8002808:	20000258 	.word	0x20000258
 800280c:	0800ba84 	.word	0x0800ba84
 8002810:	0800baa4 	.word	0x0800baa4
 8002814:	0800bad8 	.word	0x0800bad8

08002818 <ubloxSetFrequency>:

	HAL_UART_AbortReceive_IT(&huart1);
}

uint8_t ubloxSetFrequency(uint16_t frequency)
{
 8002818:	b5b0      	push	{r4, r5, r7, lr}
 800281a:	b0ac      	sub	sp, #176	; 0xb0
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
	uint8_t cfg_tp5_Set[40] 	= { 0 };
 8002822:	2300      	movs	r3, #0
 8002824:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002826:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800282a:	2224      	movs	r2, #36	; 0x24
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f008 fbb6 	bl	800afa0 <memset>
	uint8_t buf[4];

	/* Preparation for little endian */
	buf[0] = (frequency & 0x000000ffUL)      ;
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	buf[1] = (frequency & 0x0000ff00UL) >>  8;
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29b      	uxth	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	buf[2] = (frequency & 0x00ff0000UL) >> 16;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	buf[3] = (frequency & 0xff000000UL) >> 24;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	/* Generate the configuration string for the TimePulse with given frequency */
	uint8_t cfg_tp5_Req[] 		= {
 8002854:	4ab4      	ldr	r2, [pc, #720]	; (8002b28 <ubloxSetFrequency+0x310>)
 8002856:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800285a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800285e:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x06,	0x31,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(cfg_tp5_Req, sizeof(cfg_tp5_Req));
 8002862:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002866:	2108      	movs	r1, #8
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe1f 	bl	80024ac <calcChecksumRFC1145>

	/* First get current CFG-TP5 settings for channel TIMEPULSE */
	uint8_t tryCtr = 3;
 800286e:	2303      	movs	r3, #3
 8002870:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	while (tryCtr) {
 8002874:	e14e      	b.n	8002b14 <ubloxSetFrequency+0x2fc>
#if defined(LOGGING)
		{
			uint8_t msg[] = "\r\n*** ubloxSetFrequency() --> requesting TimePulse Parameters --> ";
 8002876:	4aad      	ldr	r2, [pc, #692]	; (8002b2c <ubloxSetFrequency+0x314>)
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	4611      	mov	r1, r2
 800287e:	2243      	movs	r2, #67	; 0x43
 8002880:	4618      	mov	r0, r3
 8002882:	f008 fb7f 	bl	800af84 <memcpy>
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002886:	f107 010c 	add.w	r1, r7, #12
 800288a:	2319      	movs	r3, #25
 800288c:	2242      	movs	r2, #66	; 0x42
 800288e:	48a8      	ldr	r0, [pc, #672]	; (8002b30 <ubloxSetFrequency+0x318>)
 8002890:	f007 f8f7 	bl	8009a82 <HAL_UART_Transmit>
			HAL_Delay(100);
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	f001 f87b 	bl	8003990 <HAL_Delay>
		}
#endif

		/* Prepare for answer */
		gUart1RxReady = RESET;
 800289a:	4ba6      	ldr	r3, [pc, #664]	; (8002b34 <ubloxSetFrequency+0x31c>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart1);
 80028a0:	48a5      	ldr	r0, [pc, #660]	; (8002b38 <ubloxSetFrequency+0x320>)
 80028a2:	f007 fa79 	bl	8009d98 <HAL_UART_AbortReceive_IT>
		HAL_UART_EnableReceiverTimeout(&huart1);
 80028a6:	48a4      	ldr	r0, [pc, #656]	; (8002b38 <ubloxSetFrequency+0x320>)
 80028a8:	f007 fd1a 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
		HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80028ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b0:	49a2      	ldr	r1, [pc, #648]	; (8002b3c <ubloxSetFrequency+0x324>)
 80028b2:	48a1      	ldr	r0, [pc, #644]	; (8002b38 <ubloxSetFrequency+0x320>)
 80028b4:	f007 f9d6 	bl	8009c64 <HAL_UART_Receive_IT>

		/* Send CFG-TP5 request */
		gUart1TxReady = RESET;
 80028b8:	4ba1      	ldr	r3, [pc, #644]	; (8002b40 <ubloxSetFrequency+0x328>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
		//HAL_UART_AbortTransmit_IT(&huart1);
		HAL_UART_Transmit_IT(&huart1, cfg_tp5_Req, sizeof(cfg_tp5_Req));
 80028be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028c2:	2208      	movs	r2, #8
 80028c4:	4619      	mov	r1, r3
 80028c6:	489c      	ldr	r0, [pc, #624]	; (8002b38 <ubloxSetFrequency+0x320>)
 80028c8:	f007 f970 	bl	8009bac <HAL_UART_Transmit_IT>
		while (gUart1TxReady != SET) {
 80028cc:	bf00      	nop
 80028ce:	4b9c      	ldr	r3, [pc, #624]	; (8002b40 <ubloxSetFrequency+0x328>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d1fa      	bne.n	80028ce <ubloxSetFrequency+0xb6>
		}

		/* Wait for the response */
		int i = 11;
 80028d8:	230b      	movs	r3, #11
 80028da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80028de:	e007      	b.n	80028f0 <ubloxSetFrequency+0xd8>
			HAL_Delay(100);
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	f001 f855 	bl	8003990 <HAL_Delay>
			--i;
 80028e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		while (i && (gUart1RxReady != SET)) {
 80028f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <ubloxSetFrequency+0xea>
 80028f8:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <ubloxSetFrequency+0x31c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d1ee      	bne.n	80028e0 <ubloxSetFrequency+0xc8>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "TX --> RX --> check ReqAnswer --> ";
 8002902:	4b90      	ldr	r3, [pc, #576]	; (8002b44 <ubloxSetFrequency+0x32c>)
 8002904:	f107 040c 	add.w	r4, r7, #12
 8002908:	461d      	mov	r5, r3
 800290a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	8022      	strh	r2, [r4, #0]
 8002918:	3402      	adds	r4, #2
 800291a:	0c1b      	lsrs	r3, r3, #16
 800291c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800291e:	f107 010c 	add.w	r1, r7, #12
 8002922:	2319      	movs	r3, #25
 8002924:	2222      	movs	r2, #34	; 0x22
 8002926:	4882      	ldr	r0, [pc, #520]	; (8002b30 <ubloxSetFrequency+0x318>)
 8002928:	f007 f8ab 	bl	8009a82 <HAL_UART_Transmit>
			HAL_Delay(100);
 800292c:	2064      	movs	r0, #100	; 0x64
 800292e:	f001 f82f 	bl	8003990 <HAL_Delay>
		}
#endif

		/* Response to our request? */
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002932:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2bb5      	cmp	r3, #181	; 0xb5
 8002938:	f040 80ca 	bne.w	8002ad0 <ubloxSetFrequency+0x2b8>
 800293c:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <ubloxSetFrequency+0x324>)
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	2b62      	cmp	r3, #98	; 0x62
 8002942:	f040 80c5 	bne.w	8002ad0 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8002946:	4b7d      	ldr	r3, [pc, #500]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002948:	789b      	ldrb	r3, [r3, #2]
		if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800294a:	2b06      	cmp	r3, #6
 800294c:	f040 80c0 	bne.w	8002ad0 <ubloxSetFrequency+0x2b8>
				(ublox_Response[2] == 0x06) && (ublox_Response[3] == 0x31)) {
 8002950:	4b7a      	ldr	r3, [pc, #488]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002952:	78db      	ldrb	r3, [r3, #3]
 8002954:	2b31      	cmp	r3, #49	; 0x31
 8002956:	f040 80bb 	bne.w	8002ad0 <ubloxSetFrequency+0x2b8>
			/* Copy template */
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002960:	e010      	b.n	8002984 <ubloxSetFrequency+0x16c>
				cfg_tp5_Set[i] = ublox_Response[i];
 8002962:	4a76      	ldr	r2, [pc, #472]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002964:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002968:	4413      	add	r3, r2
 800296a:	7819      	ldrb	r1, [r3, #0]
 800296c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002974:	4413      	add	r3, r2
 8002976:	460a      	mov	r2, r1
 8002978:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(cfg_tp5_Set); ++i) {
 800297a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800297e:	3301      	adds	r3, #1
 8002980:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002984:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002988:	2b27      	cmp	r3, #39	; 0x27
 800298a:	d9ea      	bls.n	8002962 <ubloxSetFrequency+0x14a>
			}

			/* Fill in Period Time for when not Locked */
			cfg_tp5_Set[6 +  8] = buf[0];
 800298c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002990:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			cfg_tp5_Set[6 +  9] = buf[1];
 8002994:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002998:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			cfg_tp5_Set[6 + 10] = buf[2];
 800299c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80029a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			cfg_tp5_Set[6 + 11] = buf[3];
 80029a4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80029a8:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			/* Fill in Period Time for when Locked */
			cfg_tp5_Set[6 + 12] = buf[0];
 80029ac:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80029b0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			cfg_tp5_Set[6 + 13] = buf[1];
 80029b4:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80029b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			cfg_tp5_Set[6 + 14] = buf[2];
 80029bc:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80029c0:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			cfg_tp5_Set[6 + 15] = buf[3];
 80029c4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80029c8:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

			/* Fill in 50% ratio when not Locked */
			cfg_tp5_Set[6 + 16] = 0x00;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			cfg_tp5_Set[6 + 17] = 0x00;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			cfg_tp5_Set[6 + 18] = 0x00;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			cfg_tp5_Set[6 + 19] = 0x80;
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

			/* Fill in 50% ratio when Locked */
			cfg_tp5_Set[6 + 20] = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			cfg_tp5_Set[6 + 21] = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cfg_tp5_Set[6 + 22] = 0x00;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			cfg_tp5_Set[6 + 23] = 0x80;
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			/* bit 3: 1 = use fields as frequencies and not period times */
			/* bit 4: 0 = use pulse ratios instead of duration in microseconds */
			/* bit 5: 0 = frequencies not multiple of 1 sec so bit 'alignToTow' has to be cleared */
			/* bit 6: 1 = positive polarity */
			/* bit 7: 1 = timegrid is GPS (not UTC) */
			cfg_tp5_Set[6 + 28] = 0b11001111;
 80029fc:	23cf      	movs	r3, #207	; 0xcf
 80029fe:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

			/* Recalculate checksum */
			calcChecksumRFC1145(cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8002a02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a06:	2128      	movs	r1, #40	; 0x28
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fd4f 	bl	80024ac <calcChecksumRFC1145>

			/* Send TimePule Parameters for new frequency */
			gUart1TxReady = RESET;
 8002a0e:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <ubloxSetFrequency+0x328>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortTransmit_IT(&huart1);
 8002a14:	4848      	ldr	r0, [pc, #288]	; (8002b38 <ubloxSetFrequency+0x320>)
 8002a16:	f007 f969 	bl	8009cec <HAL_UART_AbortTransmit_IT>
			HAL_UART_Transmit_IT(&huart1, cfg_tp5_Set, sizeof(cfg_tp5_Set));
 8002a1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a1e:	2228      	movs	r2, #40	; 0x28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4845      	ldr	r0, [pc, #276]	; (8002b38 <ubloxSetFrequency+0x320>)
 8002a24:	f007 f8c2 	bl	8009bac <HAL_UART_Transmit_IT>
			while (gUart1TxReady != SET) {
 8002a28:	bf00      	nop
 8002a2a:	4b45      	ldr	r3, [pc, #276]	; (8002b40 <ubloxSetFrequency+0x328>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d1fa      	bne.n	8002a2a <ubloxSetFrequency+0x212>
			}
			HAL_UART_AbortTransmit_IT(&huart1);
 8002a34:	4840      	ldr	r0, [pc, #256]	; (8002b38 <ubloxSetFrequency+0x320>)
 8002a36:	f007 f959 	bl	8009cec <HAL_UART_AbortTransmit_IT>

			/* Receive CFG-TP5 status */
			gUart1RxReady = RESET;
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <ubloxSetFrequency+0x31c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			HAL_UART_EnableReceiverTimeout(&huart1);
 8002a40:	483d      	ldr	r0, [pc, #244]	; (8002b38 <ubloxSetFrequency+0x320>)
 8002a42:	f007 fc4d 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
			HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4a:	493c      	ldr	r1, [pc, #240]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a4c:	483a      	ldr	r0, [pc, #232]	; (8002b38 <ubloxSetFrequency+0x320>)
 8002a4e:	f007 f909 	bl	8009c64 <HAL_UART_Receive_IT>
			while (gUart1RxReady != SET) {
 8002a52:	bf00      	nop
 8002a54:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <ubloxSetFrequency+0x31c>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d1fa      	bne.n	8002a54 <ubloxSetFrequency+0x23c>
			}
			HAL_UART_AbortReceive_IT(&huart1);
 8002a5e:	4836      	ldr	r0, [pc, #216]	; (8002b38 <ubloxSetFrequency+0x320>)
 8002a60:	f007 f99a 	bl	8009d98 <HAL_UART_AbortReceive_IT>

			/* Check for CFG-TP5 ACK-ACK */
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2bb5      	cmp	r3, #181	; 0xb5
 8002a6a:	d131      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2b62      	cmp	r3, #98	; 0x62
 8002a72:	d12d      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a76:	789b      	ldrb	r3, [r3, #2]
			if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d129      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a7e:	78db      	ldrb	r3, [r3, #3]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d125      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a86:	791b      	ldrb	r3, [r3, #4]
					(ublox_Response[2] == 0x05) && (ublox_Response[3] == 0x01) &&
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d121      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a8e:	795b      	ldrb	r3, [r3, #5]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11d      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a96:	799b      	ldrb	r3, [r3, #6]
					(ublox_Response[4] == 0x02) && (ublox_Response[5] == 0x00) &&
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d119      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
					(ublox_Response[6] == 0x06) && (ublox_Response[7] == 0x31)) {
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <ubloxSetFrequency+0x324>)
 8002a9e:	79db      	ldrb	r3, [r3, #7]
 8002aa0:	2b31      	cmp	r3, #49	; 0x31
 8002aa2:	d115      	bne.n	8002ad0 <ubloxSetFrequency+0x2b8>
				/* ACK-ACK for CFG-TP5 received */
#if defined(LOGGING)
				{
					uint8_t msg[] = "ACK-ACK received --> done.\r\n";
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <ubloxSetFrequency+0x330>)
 8002aa6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002aaa:	461d      	mov	r5, r3
 8002aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ab0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ab4:	c407      	stmia	r4!, {r0, r1, r2}
 8002ab6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002ab8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002abc:	2319      	movs	r3, #25
 8002abe:	221c      	movs	r2, #28
 8002ac0:	481b      	ldr	r0, [pc, #108]	; (8002b30 <ubloxSetFrequency+0x318>)
 8002ac2:	f006 ffde 	bl	8009a82 <HAL_UART_Transmit>
					HAL_Delay(100);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f000 ff62 	bl	8003990 <HAL_Delay>
				}
#endif
				return 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e027      	b.n	8002b20 <ubloxSetFrequency+0x308>
			}
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "not relating ACK-ACK received, try again ...\r\n";
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <ubloxSetFrequency+0x334>)
 8002ad2:	f107 040c 	add.w	r4, r7, #12
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ae4:	c407      	stmia	r4!, {r0, r1, r2}
 8002ae6:	8023      	strh	r3, [r4, #0]
 8002ae8:	3402      	adds	r4, #2
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002aee:	f107 010c 	add.w	r1, r7, #12
 8002af2:	2319      	movs	r3, #25
 8002af4:	222e      	movs	r2, #46	; 0x2e
 8002af6:	480e      	ldr	r0, [pc, #56]	; (8002b30 <ubloxSetFrequency+0x318>)
 8002af8:	f006 ffc3 	bl	8009a82 <HAL_UART_Transmit>
			HAL_Delay(100);
 8002afc:	2064      	movs	r0, #100	; 0x64
 8002afe:	f000 ff47 	bl	8003990 <HAL_Delay>
		}
#endif

		/* Next round to come ... */
		--tryCtr;
 8002b02:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_Delay(1500);
 8002b0c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b10:	f000 ff3e 	bl	8003990 <HAL_Delay>
	while (tryCtr) {
 8002b14:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f aeac 	bne.w	8002876 <ubloxSetFrequency+0x5e>
	}

	return 1;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	37b0      	adds	r7, #176	; 0xb0
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}
 8002b28:	0800bb10 	.word	0x0800bb10
 8002b2c:	0800bb18 	.word	0x0800bb18
 8002b30:	20000600 	.word	0x20000600
 8002b34:	20000359 	.word	0x20000359
 8002b38:	2000057c 	.word	0x2000057c
 8002b3c:	20000258 	.word	0x20000258
 8002b40:	20000358 	.word	0x20000358
 8002b44:	0800bb5c 	.word	0x0800bb5c
 8002b48:	0800ba84 	.word	0x0800ba84
 8002b4c:	0800bb80 	.word	0x0800bb80

08002b50 <ubloxMsgsTurnOff>:

void ubloxMsgsTurnOff(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0ac      	sub	sp, #176	; 0xb0
 8002b54:	af00      	add	r7, sp, #0
	uint8_t msg[] = "$PUBX,40,RMC,0,0,0,0,0,0*47\r\n" \
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <ubloxMsgsTurnOff+0x40>)
 8002b58:	463b      	mov	r3, r7
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	22af      	movs	r2, #175	; 0xaf
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f008 fa10 	bl	800af84 <memcpy>
					"$PUBX,40,GSA,0,0,0,0,0,0*4E\r\n" \
					"$PUBX,40,GLL,0,0,0,0,0,0*5C\r\n" \
					"$PUBX,40,GSV,0,0,0,0,0,0*59\r\n";

	/* Turn off these messages */
	gUart1TxReady = RESET;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <ubloxMsgsTurnOff+0x44>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, msg, sizeof(msg));
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	22af      	movs	r2, #175	; 0xaf
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4809      	ldr	r0, [pc, #36]	; (8002b98 <ubloxMsgsTurnOff+0x48>)
 8002b72:	f007 f81b 	bl	8009bac <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8002b76:	bf00      	nop
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <ubloxMsgsTurnOff+0x44>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d1fa      	bne.n	8002b78 <ubloxMsgsTurnOff+0x28>
	}
	HAL_UART_AbortTransmit_IT(&huart1);
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <ubloxMsgsTurnOff+0x48>)
 8002b84:	f007 f8b2 	bl	8009cec <HAL_UART_AbortTransmit_IT>
}
 8002b88:	bf00      	nop
 8002b8a:	37b0      	adds	r7, #176	; 0xb0
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800bbb0 	.word	0x0800bbb0
 8002b94:	20000358 	.word	0x20000358
 8002b98:	2000057c 	.word	0x2000057c

08002b9c <ublox_NavDop_get>:

void ublox_NavDop_get(UbloxNavDop_t* dop)
{
 8002b9c:	b5b0      	push	{r4, r5, r7, lr}
 8002b9e:	b0a8      	sub	sp, #160	; 0xa0
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	6078      	str	r0, [r7, #4]
	uint8_t nav_Dop_Req[] 		= {
 8002ba4:	4aaf      	ldr	r2, [pc, #700]	; (8002e64 <ublox_NavDop_get+0x2c8>)
 8002ba6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bae:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x04,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Dop_Req, sizeof(nav_Dop_Req));
 8002bb2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002bb6:	2108      	movs	r1, #8
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fc77 	bl	80024ac <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-DOP: TX --> RX --> ";
 8002bbe:	4baa      	ldr	r3, [pc, #680]	; (8002e68 <ublox_NavDop_get+0x2cc>)
 8002bc0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bce:	c407      	stmia	r4!, {r0, r1, r2}
 8002bd0:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002bd2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002bd6:	2319      	movs	r3, #25
 8002bd8:	221d      	movs	r2, #29
 8002bda:	48a4      	ldr	r0, [pc, #656]	; (8002e6c <ublox_NavDop_get+0x2d0>)
 8002bdc:	f006 ff51 	bl	8009a82 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8002be0:	48a3      	ldr	r0, [pc, #652]	; (8002e70 <ublox_NavDop_get+0x2d4>)
 8002be2:	f006 ff15 	bl	8009a10 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 8002be6:	f7ff fc31 	bl	800244c <MX_USART1_UART_Init_38400baud>

	/* Send NAV-DOP request */
	gUart1TxReady = RESET;
 8002bea:	4ba2      	ldr	r3, [pc, #648]	; (8002e74 <ublox_NavDop_get+0x2d8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Dop_Req, sizeof(nav_Dop_Req));
 8002bf0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	489d      	ldr	r0, [pc, #628]	; (8002e70 <ublox_NavDop_get+0x2d4>)
 8002bfa:	f006 ffd7 	bl	8009bac <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 8002bfe:	bf00      	nop
 8002c00:	4b9c      	ldr	r3, [pc, #624]	; (8002e74 <ublox_NavDop_get+0x2d8>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d1fa      	bne.n	8002c00 <ublox_NavDop_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 8002c0a:	4b9b      	ldr	r3, [pc, #620]	; (8002e78 <ublox_NavDop_get+0x2dc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 8002c10:	4897      	ldr	r0, [pc, #604]	; (8002e70 <ublox_NavDop_get+0x2d4>)
 8002c12:	f007 fb65 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 8002c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1a:	4998      	ldr	r1, [pc, #608]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c1c:	4894      	ldr	r0, [pc, #592]	; (8002e70 <ublox_NavDop_get+0x2d4>)
 8002c1e:	f007 f821 	bl	8009c64 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 8002c22:	bf00      	nop
 8002c24:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <ublox_NavDop_get+0x2dc>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d1fa      	bne.n	8002c24 <ublox_NavDop_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002c2e:	4b93      	ldr	r3, [pc, #588]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2bb5      	cmp	r3, #181	; 0xb5
 8002c34:	f040 81d9 	bne.w	8002fea <ublox_NavDop_get+0x44e>
 8002c38:	4b90      	ldr	r3, [pc, #576]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	2b62      	cmp	r3, #98	; 0x62
 8002c3e:	f040 81d4 	bne.w	8002fea <ublox_NavDop_get+0x44e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8002c42:	4b8e      	ldr	r3, [pc, #568]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c44:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	f040 81cf 	bne.w	8002fea <ublox_NavDop_get+0x44e>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8002c4c:	4b8b      	ldr	r3, [pc, #556]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c4e:	78db      	ldrb	r3, [r3, #3]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	f040 81ca 	bne.w	8002fea <ublox_NavDop_get+0x44e>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8002c56:	4b89      	ldr	r3, [pc, #548]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c58:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x04) &&
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	f040 81c5 	bne.w	8002fea <ublox_NavDop_get+0x44e>
			(ublox_Response[4] == 0x12) && (ublox_Response[5] == 0x00)) {
 8002c60:	4b86      	ldr	r3, [pc, #536]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c62:	795b      	ldrb	r3, [r3, #5]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 81c0 	bne.w	8002fea <ublox_NavDop_get+0x44e>
		dop->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8002c6a:	4b84      	ldr	r3, [pc, #528]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c6c:	799b      	ldrb	r3, [r3, #6]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b82      	ldr	r3, [pc, #520]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c72:	79db      	ldrb	r3, [r3, #7]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	431a      	orrs	r2, r3
 8002c78:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c7a:	7a1b      	ldrb	r3, [r3, #8]
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	4b7e      	ldr	r3, [pc, #504]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c82:	7a5b      	ldrb	r3, [r3, #9]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	4313      	orrs	r3, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
		dop->gDOP		= ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8);
 8002c8e:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c90:	7a9b      	ldrb	r3, [r3, #10]
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	4b79      	ldr	r3, [pc, #484]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002c96:	7adb      	ldrb	r3, [r3, #11]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 8002ca6:	4b75      	ldr	r3, [pc, #468]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002ca8:	7b1b      	ldrb	r3, [r3, #12]
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	4b73      	ldr	r3, [pc, #460]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cae:	7b5b      	ldrb	r3, [r3, #13]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8);
 8002cbe:	4b6f      	ldr	r3, [pc, #444]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cc0:	7b9b      	ldrb	r3, [r3, #14]
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cc6:	7bdb      	ldrb	r3, [r3, #15]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= ublox_Response[6 + 10] | (ublox_Response[6 + 11] << 8);
 8002cd6:	4b69      	ldr	r3, [pc, #420]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cd8:	7c1b      	ldrb	r3, [r3, #16]
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	4b67      	ldr	r3, [pc, #412]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cde:	7c5b      	ldrb	r3, [r3, #17]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8);
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cf0:	7c9b      	ldrb	r3, [r3, #18]
 8002cf2:	b21a      	sxth	r2, r3
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002cf6:	7cdb      	ldrb	r3, [r3, #19]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	b21b      	sxth	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= ublox_Response[6 + 14] | (ublox_Response[6 + 15] << 8);
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002d08:	7d1b      	ldrb	r3, [r3, #20]
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002d0e:	7d5b      	ldrb	r3, [r3, #21]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8);
 8002d1e:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002d20:	7d9b      	ldrb	r3, [r3, #22]
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <ublox_NavDop_get+0x2e0>)
 8002d26:	7ddb      	ldrb	r3, [r3, #23]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <ublox_NavDop_get+0x2e4>)
 8002d38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d3e:	c303      	stmia	r3!, {r0, r1}
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	3302      	adds	r3, #2
 8002d44:	0c12      	lsrs	r2, r2, #16
 8002d46:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002d48:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	220a      	movs	r2, #10
 8002d50:	4846      	ldr	r0, [pc, #280]	; (8002e6c <ublox_NavDop_get+0x2d0>)
 8002d52:	f006 fe96 	bl	8009a82 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", dop->iTOW);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f107 0008 	add.w	r0, r7, #8
 8002d5e:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <ublox_NavDop_get+0x2e8>)
 8002d60:	2140      	movs	r1, #64	; 0x40
 8002d62:	f008 f925 	bl	800afb0 <sniprintf>
 8002d66:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	f107 0108 	add.w	r1, r7, #8
 8002d74:	2319      	movs	r3, #25
 8002d76:	483d      	ldr	r0, [pc, #244]	; (8002e6c <ublox_NavDop_get+0x2d0>)
 8002d78:	f006 fe83 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Geometric  DOP: %d.%02d\r\n", (dop->gDOP / 100), (dop->gDOP % 100));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	889b      	ldrh	r3, [r3, #4]
 8002d80:	4a41      	ldr	r2, [pc, #260]	; (8002e88 <ublox_NavDop_get+0x2ec>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	889b      	ldrh	r3, [r3, #4]
 8002d90:	4a3d      	ldr	r2, [pc, #244]	; (8002e88 <ublox_NavDop_get+0x2ec>)
 8002d92:	fba2 1203 	umull	r1, r2, r2, r3
 8002d96:	0952      	lsrs	r2, r2, #5
 8002d98:	2164      	movs	r1, #100	; 0x64
 8002d9a:	fb01 f202 	mul.w	r2, r1, r2
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f107 0008 	add.w	r0, r7, #8
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4623      	mov	r3, r4
 8002daa:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <ublox_NavDop_get+0x2f0>)
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	f008 f8ff 	bl	800afb0 <sniprintf>
 8002db2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f107 0108 	add.w	r1, r7, #8
 8002dc0:	2319      	movs	r3, #25
 8002dc2:	482a      	ldr	r0, [pc, #168]	; (8002e6c <ublox_NavDop_get+0x2d0>)
 8002dc4:	f006 fe5d 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Position   DOP: %d.%02d\r\n", (dop->pDOP / 100), (dop->pDOP % 100));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	88db      	ldrh	r3, [r3, #6]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <ublox_NavDop_get+0x2ec>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461c      	mov	r4, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	88db      	ldrh	r3, [r3, #6]
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <ublox_NavDop_get+0x2ec>)
 8002dde:	fba2 1203 	umull	r1, r2, r2, r3
 8002de2:	0952      	lsrs	r2, r2, #5
 8002de4:	2164      	movs	r1, #100	; 0x64
 8002de6:	fb01 f202 	mul.w	r2, r1, r2
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f107 0008 	add.w	r0, r7, #8
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	4623      	mov	r3, r4
 8002df6:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <ublox_NavDop_get+0x2f4>)
 8002df8:	2140      	movs	r1, #64	; 0x40
 8002dfa:	f008 f8d9 	bl	800afb0 <sniprintf>
 8002dfe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	f107 0108 	add.w	r1, r7, #8
 8002e0c:	2319      	movs	r3, #25
 8002e0e:	4817      	ldr	r0, [pc, #92]	; (8002e6c <ublox_NavDop_get+0x2d0>)
 8002e10:	f006 fe37 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Time       DOP: %d.%02d\r\n", (dop->tDOP / 100), (dop->tDOP % 100));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	891b      	ldrh	r3, [r3, #8]
 8002e18:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <ublox_NavDop_get+0x2ec>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461c      	mov	r4, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	891b      	ldrh	r3, [r3, #8]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <ublox_NavDop_get+0x2ec>)
 8002e2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002e2e:	0952      	lsrs	r2, r2, #5
 8002e30:	2164      	movs	r1, #100	; 0x64
 8002e32:	fb01 f202 	mul.w	r2, r1, r2
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f107 0008 	add.w	r0, r7, #8
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4623      	mov	r3, r4
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <ublox_NavDop_get+0x2f8>)
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	f008 f8b3 	bl	800afb0 <sniprintf>
 8002e4a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	f107 0108 	add.w	r1, r7, #8
 8002e58:	2319      	movs	r3, #25
 8002e5a:	4804      	ldr	r0, [pc, #16]	; (8002e6c <ublox_NavDop_get+0x2d0>)
 8002e5c:	f006 fe11 	bl	8009a82 <HAL_UART_Transmit>
 8002e60:	e01a      	b.n	8002e98 <ublox_NavDop_get+0x2fc>
 8002e62:	bf00      	nop
 8002e64:	0800bd68 	.word	0x0800bd68
 8002e68:	0800bd70 	.word	0x0800bd70
 8002e6c:	20000600 	.word	0x20000600
 8002e70:	2000057c 	.word	0x2000057c
 8002e74:	20000358 	.word	0x20000358
 8002e78:	20000359 	.word	0x20000359
 8002e7c:	20000258 	.word	0x20000258
 8002e80:	0800bd90 	.word	0x0800bd90
 8002e84:	0800bc60 	.word	0x0800bc60
 8002e88:	51eb851f 	.word	0x51eb851f
 8002e8c:	0800bc88 	.word	0x0800bc88
 8002e90:	0800bca8 	.word	0x0800bca8
 8002e94:	0800bcc8 	.word	0x0800bcc8

			len = snprintf(((char*) msg), sizeof(msg), "  * Vertical   DOP: %d.%02d\r\n", (dop->vDOP / 100), (dop->vDOP % 100));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	895b      	ldrh	r3, [r3, #10]
 8002e9c:	4a69      	ldr	r2, [pc, #420]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461c      	mov	r4, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	895b      	ldrh	r3, [r3, #10]
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002eae:	fba2 1203 	umull	r1, r2, r2, r3
 8002eb2:	0952      	lsrs	r2, r2, #5
 8002eb4:	2164      	movs	r1, #100	; 0x64
 8002eb6:	fb01 f202 	mul.w	r2, r1, r2
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f107 0008 	add.w	r0, r7, #8
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	4a60      	ldr	r2, [pc, #384]	; (8003048 <ublox_NavDop_get+0x4ac>)
 8002ec8:	2140      	movs	r1, #64	; 0x40
 8002eca:	f008 f871 	bl	800afb0 <sniprintf>
 8002ece:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	f107 0108 	add.w	r1, r7, #8
 8002edc:	2319      	movs	r3, #25
 8002ede:	485b      	ldr	r0, [pc, #364]	; (800304c <ublox_NavDop_get+0x4b0>)
 8002ee0:	f006 fdcf 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Horizontal DOP: %d.%02d\r\n", (dop->hDOP / 100), (dop->hDOP % 100));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	899b      	ldrh	r3, [r3, #12]
 8002ee8:	4a56      	ldr	r2, [pc, #344]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	899b      	ldrh	r3, [r3, #12]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002efa:	fba2 1203 	umull	r1, r2, r2, r3
 8002efe:	0952      	lsrs	r2, r2, #5
 8002f00:	2164      	movs	r1, #100	; 0x64
 8002f02:	fb01 f202 	mul.w	r2, r1, r2
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f107 0008 	add.w	r0, r7, #8
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4623      	mov	r3, r4
 8002f12:	4a4f      	ldr	r2, [pc, #316]	; (8003050 <ublox_NavDop_get+0x4b4>)
 8002f14:	2140      	movs	r1, #64	; 0x40
 8002f16:	f008 f84b 	bl	800afb0 <sniprintf>
 8002f1a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	f107 0108 	add.w	r1, r7, #8
 8002f28:	2319      	movs	r3, #25
 8002f2a:	4848      	ldr	r0, [pc, #288]	; (800304c <ublox_NavDop_get+0x4b0>)
 8002f2c:	f006 fda9 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Northing   DOP: %d.%02d\r\n", (dop->nDOP / 100), (dop->nDOP % 100));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	89db      	ldrh	r3, [r3, #14]
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461c      	mov	r4, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	89db      	ldrh	r3, [r3, #14]
 8002f44:	4a3f      	ldr	r2, [pc, #252]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002f46:	fba2 1203 	umull	r1, r2, r2, r3
 8002f4a:	0952      	lsrs	r2, r2, #5
 8002f4c:	2164      	movs	r1, #100	; 0x64
 8002f4e:	fb01 f202 	mul.w	r2, r1, r2
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f107 0008 	add.w	r0, r7, #8
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	4a3d      	ldr	r2, [pc, #244]	; (8003054 <ublox_NavDop_get+0x4b8>)
 8002f60:	2140      	movs	r1, #64	; 0x40
 8002f62:	f008 f825 	bl	800afb0 <sniprintf>
 8002f66:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002f6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f107 0108 	add.w	r1, r7, #8
 8002f74:	2319      	movs	r3, #25
 8002f76:	4835      	ldr	r0, [pc, #212]	; (800304c <ublox_NavDop_get+0x4b0>)
 8002f78:	f006 fd83 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Easting    DOP: %d.%02d\r\n", (dop->eDOP / 100), (dop->eDOP % 100));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8a1b      	ldrh	r3, [r3, #16]
 8002f80:	4a30      	ldr	r2, [pc, #192]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461c      	mov	r4, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8a1b      	ldrh	r3, [r3, #16]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <ublox_NavDop_get+0x4a8>)
 8002f92:	fba2 1203 	umull	r1, r2, r2, r3
 8002f96:	0952      	lsrs	r2, r2, #5
 8002f98:	2164      	movs	r1, #100	; 0x64
 8002f9a:	fb01 f202 	mul.w	r2, r1, r2
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f107 0008 	add.w	r0, r7, #8
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4623      	mov	r3, r4
 8002faa:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <ublox_NavDop_get+0x4bc>)
 8002fac:	2140      	movs	r1, #64	; 0x40
 8002fae:	f007 ffff 	bl	800afb0 <sniprintf>
 8002fb2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8002fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	f107 0108 	add.w	r1, r7, #8
 8002fc0:	2319      	movs	r3, #25
 8002fc2:	4822      	ldr	r0, [pc, #136]	; (800304c <ublox_NavDop_get+0x4b0>)
 8002fc4:	f006 fd5d 	bl	8009a82 <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <ublox_NavDop_get+0x4c0>)
 8002fca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	8019      	strh	r1, [r3, #0]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	0c12      	lsrs	r2, r2, #16
 8002fd8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8002fda:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002fde:	2319      	movs	r3, #25
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	481a      	ldr	r0, [pc, #104]	; (800304c <ublox_NavDop_get+0x4b0>)
 8002fe4:	f006 fd4d 	bl	8009a82 <HAL_UART_Transmit>
		{
 8002fe8:	e027      	b.n	800303a <ublox_NavDop_get+0x49e>
		}
#endif
	}
	else {
		dop->iTOW		= 0UL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
		dop->gDOP		= 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	809a      	strh	r2, [r3, #4]
		dop->pDOP		= 0U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	80da      	strh	r2, [r3, #6]
		dop->tDOP		= 0U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	811a      	strh	r2, [r3, #8]
		dop->vDOP		= 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	815a      	strh	r2, [r3, #10]
		dop->hDOP		= 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	819a      	strh	r2, [r3, #12]
		dop->nDOP		= 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	81da      	strh	r2, [r3, #14]
		dop->eDOP		= 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	821a      	strh	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <ublox_NavDop_get+0x4c4>)
 800301c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003020:	461d      	mov	r5, r3
 8003022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003026:	682b      	ldr	r3, [r5, #0]
 8003028:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800302a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800302e:	2319      	movs	r3, #25
 8003030:	2210      	movs	r2, #16
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <ublox_NavDop_get+0x4b0>)
 8003034:	f006 fd25 	bl	8009a82 <HAL_UART_Transmit>
		}
#endif
	}
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3798      	adds	r7, #152	; 0x98
 800303e:	46bd      	mov	sp, r7
 8003040:	bdb0      	pop	{r4, r5, r7, pc}
 8003042:	bf00      	nop
 8003044:	51eb851f 	.word	0x51eb851f
 8003048:	0800bce8 	.word	0x0800bce8
 800304c:	20000600 	.word	0x20000600
 8003050:	0800bd08 	.word	0x0800bd08
 8003054:	0800bd28 	.word	0x0800bd28
 8003058:	0800bd48 	.word	0x0800bd48
 800305c:	0800bd9c 	.word	0x0800bd9c
 8003060:	0800bda0 	.word	0x0800bda0

08003064 <ublox_NavClock_get>:

void ublox_NavClock_get(UbloxNavClock_t* ubloxNavClock)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b09e      	sub	sp, #120	; 0x78
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	uint8_t nav_Clock_Req[] 		= {
 800306c:	4aa9      	ldr	r2, [pc, #676]	; (8003314 <ublox_NavClock_get+0x2b0>)
 800306e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003076:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x22,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Clock_Req, sizeof(nav_Clock_Req));
 800307a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800307e:	2108      	movs	r1, #8
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fa13 	bl	80024ac <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-CLOCK: TX --> RX --> ";
 8003086:	4ba4      	ldr	r3, [pc, #656]	; (8003318 <ublox_NavClock_get+0x2b4>)
 8003088:	f107 0408 	add.w	r4, r7, #8
 800308c:	461d      	mov	r5, r3
 800308e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003092:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 800309a:	f107 0108 	add.w	r1, r7, #8
 800309e:	2319      	movs	r3, #25
 80030a0:	221f      	movs	r2, #31
 80030a2:	489e      	ldr	r0, [pc, #632]	; (800331c <ublox_NavClock_get+0x2b8>)
 80030a4:	f006 fced 	bl	8009a82 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 80030a8:	489d      	ldr	r0, [pc, #628]	; (8003320 <ublox_NavClock_get+0x2bc>)
 80030aa:	f006 fcb1 	bl	8009a10 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 80030ae:	f7ff f9cd 	bl	800244c <MX_USART1_UART_Init_38400baud>

	/* Send NAV-CLOCK request */
	gUart1TxReady = RESET;
 80030b2:	4b9c      	ldr	r3, [pc, #624]	; (8003324 <ublox_NavClock_get+0x2c0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart1, nav_Clock_Req, sizeof(nav_Clock_Req));
 80030b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030bc:	2208      	movs	r2, #8
 80030be:	4619      	mov	r1, r3
 80030c0:	4897      	ldr	r0, [pc, #604]	; (8003320 <ublox_NavClock_get+0x2bc>)
 80030c2:	f006 fd73 	bl	8009bac <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80030c6:	bf00      	nop
 80030c8:	4b96      	ldr	r3, [pc, #600]	; (8003324 <ublox_NavClock_get+0x2c0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d1fa      	bne.n	80030c8 <ublox_NavClock_get+0x64>
	}
	//HAL_UART_AbortTransmit_IT(&huart1);

	gUart1RxReady = RESET;
 80030d2:	4b95      	ldr	r3, [pc, #596]	; (8003328 <ublox_NavClock_get+0x2c4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_EnableReceiverTimeout(&huart1);
 80030d8:	4891      	ldr	r0, [pc, #580]	; (8003320 <ublox_NavClock_get+0x2bc>)
 80030da:	f007 f901 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80030de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e2:	4992      	ldr	r1, [pc, #584]	; (800332c <ublox_NavClock_get+0x2c8>)
 80030e4:	488e      	ldr	r0, [pc, #568]	; (8003320 <ublox_NavClock_get+0x2bc>)
 80030e6:	f006 fdbd 	bl	8009c64 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 80030ea:	bf00      	nop
 80030ec:	4b8e      	ldr	r3, [pc, #568]	; (8003328 <ublox_NavClock_get+0x2c4>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d1fa      	bne.n	80030ec <ublox_NavClock_get+0x88>
	}
	//HAL_UART_AbortReceive_IT(&huart1);

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 80030f6:	4b8d      	ldr	r3, [pc, #564]	; (800332c <ublox_NavClock_get+0x2c8>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2bb5      	cmp	r3, #181	; 0xb5
 80030fc:	f040 80e7 	bne.w	80032ce <ublox_NavClock_get+0x26a>
 8003100:	4b8a      	ldr	r3, [pc, #552]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	2b62      	cmp	r3, #98	; 0x62
 8003106:	f040 80e2 	bne.w	80032ce <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <ublox_NavClock_get+0x2c8>)
 800310c:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800310e:	2b01      	cmp	r3, #1
 8003110:	f040 80dd 	bne.w	80032ce <ublox_NavClock_get+0x26a>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8003114:	4b85      	ldr	r3, [pc, #532]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003116:	78db      	ldrb	r3, [r3, #3]
 8003118:	2b22      	cmp	r3, #34	; 0x22
 800311a:	f040 80d8 	bne.w	80032ce <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 800311e:	4b83      	ldr	r3, [pc, #524]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003120:	791b      	ldrb	r3, [r3, #4]
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x22) &&
 8003122:	2b14      	cmp	r3, #20
 8003124:	f040 80d3 	bne.w	80032ce <ublox_NavClock_get+0x26a>
			(ublox_Response[4] == 0x14) && (ublox_Response[5] == 0x00)) {
 8003128:	4b80      	ldr	r3, [pc, #512]	; (800332c <ublox_NavClock_get+0x2c8>)
 800312a:	795b      	ldrb	r3, [r3, #5]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 80ce 	bne.w	80032ce <ublox_NavClock_get+0x26a>
		ubloxNavClock->iTOW	=            ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8003132:	4b7e      	ldr	r3, [pc, #504]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003134:	799b      	ldrb	r3, [r3, #6]
 8003136:	461a      	mov	r2, r3
 8003138:	4b7c      	ldr	r3, [pc, #496]	; (800332c <ublox_NavClock_get+0x2c8>)
 800313a:	79db      	ldrb	r3, [r3, #7]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	431a      	orrs	r2, r3
 8003140:	4b7a      	ldr	r3, [pc, #488]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003142:	7a1b      	ldrb	r3, [r3, #8]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431a      	orrs	r2, r3
 8003148:	4b78      	ldr	r3, [pc, #480]	; (800332c <ublox_NavClock_get+0x2c8>)
 800314a:	7a5b      	ldrb	r3, [r3, #9]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	4313      	orrs	r3, r2
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= (int32_t) (ublox_Response[6 +  4] | (ublox_Response[6 +  5] << 8) | (ublox_Response[6 +  6] << 16) | (ublox_Response[6 +  7] << 24));
 8003156:	4b75      	ldr	r3, [pc, #468]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003158:	7a9b      	ldrb	r3, [r3, #10]
 800315a:	461a      	mov	r2, r3
 800315c:	4b73      	ldr	r3, [pc, #460]	; (800332c <ublox_NavClock_get+0x2c8>)
 800315e:	7adb      	ldrb	r3, [r3, #11]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	431a      	orrs	r2, r3
 8003164:	4b71      	ldr	r3, [pc, #452]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003166:	7b1b      	ldrb	r3, [r3, #12]
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <ublox_NavClock_get+0x2c8>)
 800316e:	7b5b      	ldrb	r3, [r3, #13]
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= (int32_t) (ublox_Response[6 +  8] | (ublox_Response[6 +  9] << 8) | (ublox_Response[6 + 10] << 16) | (ublox_Response[6 + 11] << 24));
 8003178:	4b6c      	ldr	r3, [pc, #432]	; (800332c <ublox_NavClock_get+0x2c8>)
 800317a:	7b9b      	ldrb	r3, [r3, #14]
 800317c:	461a      	mov	r2, r3
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003180:	7bdb      	ldrb	r3, [r3, #15]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	431a      	orrs	r2, r3
 8003186:	4b69      	ldr	r3, [pc, #420]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003188:	7c1b      	ldrb	r3, [r3, #16]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	431a      	orrs	r2, r3
 800318e:	4b67      	ldr	r3, [pc, #412]	; (800332c <ublox_NavClock_get+0x2c8>)
 8003190:	7c5b      	ldrb	r3, [r3, #17]
 8003192:	061b      	lsls	r3, r3, #24
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	=            ublox_Response[6 + 12] | (ublox_Response[6 + 13] << 8) | (ublox_Response[6 + 14] << 16) | (ublox_Response[6 + 15] << 24);
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <ublox_NavClock_get+0x2c8>)
 800319c:	7c9b      	ldrb	r3, [r3, #18]
 800319e:	461a      	mov	r2, r3
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031a2:	7cdb      	ldrb	r3, [r3, #19]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	431a      	orrs	r2, r3
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031aa:	7d1b      	ldrb	r3, [r3, #20]
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031b2:	7d5b      	ldrb	r3, [r3, #21]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	4313      	orrs	r3, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	=            ublox_Response[6 + 16] | (ublox_Response[6 + 17] << 8) | (ublox_Response[6 + 18] << 16) | (ublox_Response[6 + 19] << 24);
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031c0:	7d9b      	ldrb	r3, [r3, #22]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031c6:	7ddb      	ldrb	r3, [r3, #23]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	431a      	orrs	r2, r3
 80031cc:	4b57      	ldr	r3, [pc, #348]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031ce:	7e1b      	ldrb	r3, [r3, #24]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	4b55      	ldr	r3, [pc, #340]	; (800332c <ublox_NavClock_get+0x2c8>)
 80031d6:	7e5b      	ldrb	r3, [r3, #25]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	4313      	orrs	r3, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 80031e2:	4a53      	ldr	r2, [pc, #332]	; (8003330 <ublox_NavClock_get+0x2cc>)
 80031e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80031e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ea:	c303      	stmia	r3!, {r0, r1}
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	3302      	adds	r3, #2
 80031f0:	0c12      	lsrs	r2, r2, #16
 80031f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80031f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80031f8:	2319      	movs	r3, #25
 80031fa:	220a      	movs	r2, #10
 80031fc:	4847      	ldr	r0, [pc, #284]	; (800331c <ublox_NavClock_get+0x2b8>)
 80031fe:	f006 fc40 	bl	8009a82 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavClock->iTOW);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f107 0008 	add.w	r0, r7, #8
 800320a:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <ublox_NavClock_get+0x2d0>)
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	f007 fecf 	bl	800afb0 <sniprintf>
 8003212:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003216:	b29a      	uxth	r2, r3
 8003218:	f107 0108 	add.w	r1, r7, #8
 800321c:	2319      	movs	r3, #25
 800321e:	483f      	ldr	r0, [pc, #252]	; (800331c <ublox_NavClock_get+0x2b8>)
 8003220:	f006 fc2f 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Clock bias    : %+ld ns\r\n",   		ubloxNavClock->clkB);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f107 0008 	add.w	r0, r7, #8
 800322c:	4a42      	ldr	r2, [pc, #264]	; (8003338 <ublox_NavClock_get+0x2d4>)
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	f007 febe 	bl	800afb0 <sniprintf>
 8003234:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003238:	b29a      	uxth	r2, r3
 800323a:	f107 0108 	add.w	r1, r7, #8
 800323e:	2319      	movs	r3, #25
 8003240:	4836      	ldr	r0, [pc, #216]	; (800331c <ublox_NavClock_get+0x2b8>)
 8003242:	f006 fc1e 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Clock drift   : %+ld ns/s\r\n", 		ubloxNavClock->clkD);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f107 0008 	add.w	r0, r7, #8
 800324e:	4a3b      	ldr	r2, [pc, #236]	; (800333c <ublox_NavClock_get+0x2d8>)
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	f007 fead 	bl	800afb0 <sniprintf>
 8003256:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325a:	b29a      	uxth	r2, r3
 800325c:	f107 0108 	add.w	r1, r7, #8
 8003260:	2319      	movs	r3, #25
 8003262:	482e      	ldr	r0, [pc, #184]	; (800331c <ublox_NavClock_get+0x2b8>)
 8003264:	f006 fc0d 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Time Acc Est. : %lu ns\r\n", 			ubloxNavClock->tAcc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f107 0008 	add.w	r0, r7, #8
 8003270:	4a33      	ldr	r2, [pc, #204]	; (8003340 <ublox_NavClock_get+0x2dc>)
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	f007 fe9c 	bl	800afb0 <sniprintf>
 8003278:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800327a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327c:	b29a      	uxth	r2, r3
 800327e:	f107 0108 	add.w	r1, r7, #8
 8003282:	2319      	movs	r3, #25
 8003284:	4825      	ldr	r0, [pc, #148]	; (800331c <ublox_NavClock_get+0x2b8>)
 8003286:	f006 fbfc 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Freq Acc Est. : %lu ps/s\r\n", 			ubloxNavClock->fAcc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f107 0008 	add.w	r0, r7, #8
 8003292:	4a2c      	ldr	r2, [pc, #176]	; (8003344 <ublox_NavClock_get+0x2e0>)
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	f007 fe8b 	bl	800afb0 <sniprintf>
 800329a:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 800329c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f107 0108 	add.w	r1, r7, #8
 80032a4:	2319      	movs	r3, #25
 80032a6:	481d      	ldr	r0, [pc, #116]	; (800331c <ublox_NavClock_get+0x2b8>)
 80032a8:	f006 fbeb 	bl	8009a82 <HAL_UART_Transmit>
		}

		{
			uint8_t msg[] = "\r\n";
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <ublox_NavClock_get+0x2e4>)
 80032ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4611      	mov	r1, r2
 80032b6:	8019      	strh	r1, [r3, #0]
 80032b8:	3302      	adds	r3, #2
 80032ba:	0c12      	lsrs	r2, r2, #16
 80032bc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80032be:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80032c2:	2319      	movs	r3, #25
 80032c4:	2202      	movs	r2, #2
 80032c6:	4815      	ldr	r0, [pc, #84]	; (800331c <ublox_NavClock_get+0x2b8>)
 80032c8:	f006 fbdb 	bl	8009a82 <HAL_UART_Transmit>
		{
 80032cc:	e01e      	b.n	800330c <ublox_NavClock_get+0x2a8>
		}
#endif
	}
	else {
		ubloxNavClock->iTOW	= 0UL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
		ubloxNavClock->clkB	= 0UL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
		ubloxNavClock->clkD	= 0UL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
		ubloxNavClock->tAcc	= 0UL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
		ubloxNavClock->fAcc	= 0UL;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]

#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <ublox_NavClock_get+0x2e8>)
 80032ee:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80032f2:	461d      	mov	r5, r3
 80032f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 80032fc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003300:	2319      	movs	r3, #25
 8003302:	2210      	movs	r2, #16
 8003304:	4805      	ldr	r0, [pc, #20]	; (800331c <ublox_NavClock_get+0x2b8>)
 8003306:	f006 fbbc 	bl	8009a82 <HAL_UART_Transmit>
		}
#endif
	}
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	3778      	adds	r7, #120	; 0x78
 8003310:	46bd      	mov	sp, r7
 8003312:	bdb0      	pop	{r4, r5, r7, pc}
 8003314:	0800be34 	.word	0x0800be34
 8003318:	0800be3c 	.word	0x0800be3c
 800331c:	20000600 	.word	0x20000600
 8003320:	2000057c 	.word	0x2000057c
 8003324:	20000358 	.word	0x20000358
 8003328:	20000359 	.word	0x20000359
 800332c:	20000258 	.word	0x20000258
 8003330:	0800bd90 	.word	0x0800bd90
 8003334:	0800bc60 	.word	0x0800bc60
 8003338:	0800bdb4 	.word	0x0800bdb4
 800333c:	0800bdd4 	.word	0x0800bdd4
 8003340:	0800bdf4 	.word	0x0800bdf4
 8003344:	0800be14 	.word	0x0800be14
 8003348:	0800bd9c 	.word	0x0800bd9c
 800334c:	0800bda0 	.word	0x0800bda0

08003350 <ublox_NavSvinfo_get>:

void ublox_NavSvinfo_get(UbloxNavSvinfo_t* ubloxNavSvinfo)
{
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b0a4      	sub	sp, #144	; 0x90
 8003354:	af02      	add	r7, sp, #8
 8003356:	6078      	str	r0, [r7, #4]
	uint8_t nav_Svinfo_Req[] 		= {
 8003358:	4a53      	ldr	r2, [pc, #332]	; (80034a8 <ublox_NavSvinfo_get+0x158>)
 800335a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800335e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003362:	e883 0003 	stmia.w	r3, {r0, r1}
			0xb5,	0x62,
			0x01,	0x30,
			0x00,	0x00,
			0xff,	0xff
	};
	calcChecksumRFC1145(nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 8003366:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800336a:	2108      	movs	r1, #8
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f89d 	bl	80024ac <calcChecksumRFC1145>

#if defined(LOGGING)
	{
		uint8_t msg[] = "\r\n*** NAV-SVINFO: TX --> RX --> ";
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <ublox_NavSvinfo_get+0x15c>)
 8003374:	f107 0408 	add.w	r4, r7, #8
 8003378:	461d      	mov	r5, r3
 800337a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003386:	f107 0108 	add.w	r1, r7, #8
 800338a:	2319      	movs	r3, #25
 800338c:	2220      	movs	r2, #32
 800338e:	4848      	ldr	r0, [pc, #288]	; (80034b0 <ublox_NavSvinfo_get+0x160>)
 8003390:	f006 fb77 	bl	8009a82 <HAL_UART_Transmit>
	}
#endif

	/* Re-init the device */
	HAL_UART_DeInit(&huart1);
 8003394:	4847      	ldr	r0, [pc, #284]	; (80034b4 <ublox_NavSvinfo_get+0x164>)
 8003396:	f006 fb3b 	bl	8009a10 <HAL_UART_DeInit>
	MX_USART1_UART_Init_38400baud();
 800339a:	f7ff f857 	bl	800244c <MX_USART1_UART_Init_38400baud>

	/* Send NAV-SVINFO request */
	gUart1TxReady = RESET;
 800339e:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <ublox_NavSvinfo_get+0x168>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortTransmit_IT(&huart1);
 80033a4:	4843      	ldr	r0, [pc, #268]	; (80034b4 <ublox_NavSvinfo_get+0x164>)
 80033a6:	f006 fca1 	bl	8009cec <HAL_UART_AbortTransmit_IT>
	HAL_UART_Transmit_IT(&huart1, nav_Svinfo_Req, sizeof(nav_Svinfo_Req));
 80033aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033ae:	2208      	movs	r2, #8
 80033b0:	4619      	mov	r1, r3
 80033b2:	4840      	ldr	r0, [pc, #256]	; (80034b4 <ublox_NavSvinfo_get+0x164>)
 80033b4:	f006 fbfa 	bl	8009bac <HAL_UART_Transmit_IT>
	while (gUart1TxReady != SET) {
 80033b8:	bf00      	nop
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <ublox_NavSvinfo_get+0x168>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d1fa      	bne.n	80033ba <ublox_NavSvinfo_get+0x6a>
	}

	/* Wait for the response */
	gUart1RxReady = RESET;
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <ublox_NavSvinfo_get+0x16c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_AbortReceive_IT(&huart1);
 80033ca:	483a      	ldr	r0, [pc, #232]	; (80034b4 <ublox_NavSvinfo_get+0x164>)
 80033cc:	f006 fce4 	bl	8009d98 <HAL_UART_AbortReceive_IT>
	HAL_UART_EnableReceiverTimeout(&huart1);
 80033d0:	4838      	ldr	r0, [pc, #224]	; (80034b4 <ublox_NavSvinfo_get+0x164>)
 80033d2:	f006 ff85 	bl	800a2e0 <HAL_UART_EnableReceiverTimeout>
	HAL_UART_Receive_IT(&huart1, ublox_Response, sizeof(ublox_Response));
 80033d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033da:	4939      	ldr	r1, [pc, #228]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 80033dc:	4835      	ldr	r0, [pc, #212]	; (80034b4 <ublox_NavSvinfo_get+0x164>)
 80033de:	f006 fc41 	bl	8009c64 <HAL_UART_Receive_IT>
	while (gUart1RxReady != SET) {
 80033e2:	bf00      	nop
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <ublox_NavSvinfo_get+0x16c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d1fa      	bne.n	80033e4 <ublox_NavSvinfo_get+0x94>
	}

	/* Clear fields */
	{
		uint8_t* ptr = (uint8_t*) ubloxNavSvinfo;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 80033f4:	f44f 7394 	mov.w	r3, #296	; 0x128
 80033f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033fc:	e00b      	b.n	8003416 <ublox_NavSvinfo_get+0xc6>
			*(ptr++) = 0U;
 80033fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
		for (int cnt = sizeof(*ubloxNavSvinfo); cnt; --cnt) {
 800340c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003410:	3b01      	subs	r3, #1
 8003412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ef      	bne.n	80033fe <ublox_NavSvinfo_get+0xae>
		}
	}

	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2bb5      	cmp	r3, #181	; 0xb5
 8003424:	f040 8226 	bne.w	8003874 <ublox_NavSvinfo_get+0x524>
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b62      	cmp	r3, #98	; 0x62
 800342e:	f040 8221 	bne.w	8003874 <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 8003434:	789b      	ldrb	r3, [r3, #2]
	if (	(ublox_Response[0] == 0xb5) && (ublox_Response[1] == 0x62) &&
 8003436:	2b01      	cmp	r3, #1
 8003438:	f040 821c 	bne.w	8003874 <ublox_NavSvinfo_get+0x524>
			(ublox_Response[2] == 0x01) && (ublox_Response[3] == 0x30)) {
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 800343e:	78db      	ldrb	r3, [r3, #3]
 8003440:	2b30      	cmp	r3, #48	; 0x30
 8003442:	f040 8217 	bne.w	8003874 <ublox_NavSvinfo_get+0x524>
		ubloxNavSvinfo->iTOW		= ublox_Response[6 +  0] | (ublox_Response[6 +  1] << 8) | (ublox_Response[6 +  2] << 16) | (ublox_Response[6 +  3] << 24);
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 8003448:	799b      	ldrb	r3, [r3, #6]
 800344a:	461a      	mov	r2, r3
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 800344e:	79db      	ldrb	r3, [r3, #7]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	431a      	orrs	r2, r3
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 8003456:	7a1b      	ldrb	r3, [r3, #8]
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	431a      	orrs	r2, r3
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 800345e:	7a5b      	ldrb	r3, [r3, #9]
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	4313      	orrs	r3, r2
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
		ubloxNavSvinfo->numCh		= ublox_Response[6 +  4];
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 800346c:	7a9a      	ldrb	r2, [r3, #10]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	711a      	strb	r2, [r3, #4]
		ubloxNavSvinfo->globalFlags	= ublox_Response[6 +  5];
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 8003474:	7ada      	ldrb	r2, [r3, #11]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	715a      	strb	r2, [r3, #5]
		ubloxNavSvinfo->reserved2	= ublox_Response[6 +  6] | (ublox_Response[6 +  7] << 8);
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 800347c:	7b1b      	ldrb	r3, [r3, #12]
 800347e:	b21a      	sxth	r2, r3
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <ublox_NavSvinfo_get+0x170>)
 8003482:	7b5b      	ldrb	r3, [r3, #13]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	b21b      	sxth	r3, r3
 8003488:	4313      	orrs	r3, r2
 800348a:	b21b      	sxth	r3, r3
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	80da      	strh	r2, [r3, #6]

		if (ubloxNavSvinfo->numCh > UBLOX_MAX_CH) {
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	791b      	ldrb	r3, [r3, #4]
 8003496:	2b18      	cmp	r3, #24
 8003498:	d902      	bls.n	80034a0 <ublox_NavSvinfo_get+0x150>
			ubloxNavSvinfo->numCh = (uint8_t) UBLOX_MAX_CH;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2218      	movs	r2, #24
 800349e:	711a      	strb	r2, [r3, #4]
		}

		/* Read in each space vehicle */
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034a4:	e09d      	b.n	80035e2 <ublox_NavSvinfo_get+0x292>
 80034a6:	bf00      	nop
 80034a8:	0800bfb4 	.word	0x0800bfb4
 80034ac:	0800bfbc 	.word	0x0800bfbc
 80034b0:	20000600 	.word	0x20000600
 80034b4:	2000057c 	.word	0x2000057c
 80034b8:	20000358 	.word	0x20000358
 80034bc:	20000359 	.word	0x20000359
 80034c0:	20000258 	.word	0x20000258
			ubloxNavSvinfo->chn[iChn]		= ublox_Response[6 +  8 + 12 * iChn];
 80034c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	330e      	adds	r3, #14
 80034d0:	4a73      	ldr	r2, [pc, #460]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 80034d2:	5cd1      	ldrb	r1, [r2, r3]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034d8:	4413      	add	r3, r2
 80034da:	3308      	adds	r3, #8
 80034dc:	460a      	mov	r2, r1
 80034de:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->svid[iChn]		= ublox_Response[6 +  9 + 12 * iChn];
 80034e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	330f      	adds	r3, #15
 80034ec:	4a6c      	ldr	r2, [pc, #432]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 80034ee:	5cd1      	ldrb	r1, [r2, r3]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034f4:	4413      	add	r3, r2
 80034f6:	3320      	adds	r3, #32
 80034f8:	460a      	mov	r2, r1
 80034fa:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->flags[iChn]		= ublox_Response[6 + 10 + 12 * iChn];
 80034fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3310      	adds	r3, #16
 8003508:	4a65      	ldr	r2, [pc, #404]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 800350a:	5cd1      	ldrb	r1, [r2, r3]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003510:	4413      	add	r3, r2
 8003512:	3338      	adds	r3, #56	; 0x38
 8003514:	460a      	mov	r2, r1
 8003516:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->quality[iChn]	= ublox_Response[6 + 11 + 12 * iChn];
 8003518:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3311      	adds	r3, #17
 8003524:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 8003526:	5cd1      	ldrb	r1, [r2, r3]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800352c:	4413      	add	r3, r2
 800352e:	3350      	adds	r3, #80	; 0x50
 8003530:	460a      	mov	r2, r1
 8003532:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->cno[iChn]		= ublox_Response[6 + 12 + 12 * iChn];
 8003534:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3312      	adds	r3, #18
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 8003542:	5cd1      	ldrb	r1, [r2, r3]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003548:	4413      	add	r3, r2
 800354a:	3368      	adds	r3, #104	; 0x68
 800354c:	460a      	mov	r2, r1
 800354e:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->elev[iChn]		= (int8_t)  (ublox_Response[6 + 13 + 12 * iChn]);
 8003550:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	3313      	adds	r3, #19
 800355c:	4a50      	ldr	r2, [pc, #320]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 800355e:	5cd3      	ldrb	r3, [r2, r3]
 8003560:	b259      	sxtb	r1, r3
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003566:	4413      	add	r3, r2
 8003568:	3380      	adds	r3, #128	; 0x80
 800356a:	460a      	mov	r2, r1
 800356c:	701a      	strb	r2, [r3, #0]
			ubloxNavSvinfo->azim[iChn]		= (int16_t) ((uint16_t)ublox_Response[6 + 14 + 12 * iChn] | ((uint16_t)ublox_Response[6 + 15 + 12 * iChn] << 8));
 800356e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	3314      	adds	r3, #20
 800357a:	4a49      	ldr	r2, [pc, #292]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 800357c:	5cd3      	ldrb	r3, [r2, r3]
 800357e:	b219      	sxth	r1, r3
 8003580:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	3315      	adds	r3, #21
 800358c:	4a44      	ldr	r2, [pc, #272]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	b21b      	sxth	r3, r3
 8003594:	430b      	orrs	r3, r1
 8003596:	b219      	sxth	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800359c:	324c      	adds	r2, #76	; 0x4c
 800359e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ubloxNavSvinfo->prRes[iChn]		= (int16_t) ((uint32_t)ublox_Response[6 + 16 + 12 * iChn] | ((uint32_t)ublox_Response[6 + 17 + 12 * iChn] << 8)  | ((uint32_t)ublox_Response[6 + 18 + 12 * iChn] << 16)  | ((uint32_t)ublox_Response[6 + 19 + 12 * iChn] << 24));
 80035a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3316      	adds	r3, #22
 80035ae:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	b299      	uxth	r1, r3
 80035b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3317      	adds	r3, #23
 80035c0:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <ublox_NavSvinfo_get+0x350>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	430b      	orrs	r3, r1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035d6:	3232      	adds	r2, #50	; 0x32
 80035d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 80035dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035de:	3301      	adds	r3, #1
 80035e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ea:	4293      	cmp	r3, r2
 80035ec:	f6ff af6a 	blt.w	80034c4 <ublox_NavSvinfo_get+0x174>
		}

#if defined(LOGGING)
		{
			uint8_t msg[] = "data OK:\r\n";
 80035f0:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <ublox_NavSvinfo_get+0x354>)
 80035f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80035f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80035f8:	c303      	stmia	r3!, {r0, r1}
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	3302      	adds	r3, #2
 80035fe:	0c12      	lsrs	r2, r2, #16
 8003600:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003602:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003606:	2319      	movs	r3, #25
 8003608:	220a      	movs	r2, #10
 800360a:	4827      	ldr	r0, [pc, #156]	; (80036a8 <ublox_NavSvinfo_get+0x358>)
 800360c:	f006 fa39 	bl	8009a82 <HAL_UART_Transmit>

		{
			uint8_t msg[64];
			int len;

			len = snprintf(((char*) msg), sizeof(msg), "  * GPS Millisec Time of Week: %ld\r\n", 	ubloxNavSvinfo->iTOW);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f107 0008 	add.w	r0, r7, #8
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <ublox_NavSvinfo_get+0x35c>)
 800361a:	2140      	movs	r1, #64	; 0x40
 800361c:	f007 fcc8 	bl	800afb0 <sniprintf>
 8003620:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003624:	b29a      	uxth	r2, r3
 8003626:	f107 0108 	add.w	r1, r7, #8
 800362a:	2319      	movs	r3, #25
 800362c:	481e      	ldr	r0, [pc, #120]	; (80036a8 <ublox_NavSvinfo_get+0x358>)
 800362e:	f006 fa28 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Number of Chn : %u\r\n",   				ubloxNavSvinfo->numCh);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	791b      	ldrb	r3, [r3, #4]
 8003636:	f107 0008 	add.w	r0, r7, #8
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <ublox_NavSvinfo_get+0x360>)
 800363c:	2140      	movs	r1, #64	; 0x40
 800363e:	f007 fcb7 	bl	800afb0 <sniprintf>
 8003642:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003646:	b29a      	uxth	r2, r3
 8003648:	f107 0108 	add.w	r1, r7, #8
 800364c:	2319      	movs	r3, #25
 800364e:	4816      	ldr	r0, [pc, #88]	; (80036a8 <ublox_NavSvinfo_get+0x358>)
 8003650:	f006 fa17 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * Global flags  : 0x%02x\r\n", 			ubloxNavSvinfo->globalFlags);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	795b      	ldrb	r3, [r3, #5]
 8003658:	f107 0008 	add.w	r0, r7, #8
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <ublox_NavSvinfo_get+0x364>)
 800365e:	2140      	movs	r1, #64	; 0x40
 8003660:	f007 fca6 	bl	800afb0 <sniprintf>
 8003664:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003668:	b29a      	uxth	r2, r3
 800366a:	f107 0108 	add.w	r1, r7, #8
 800366e:	2319      	movs	r3, #25
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <ublox_NavSvinfo_get+0x358>)
 8003672:	f006 fa06 	bl	8009a82 <HAL_UART_Transmit>

			len = snprintf(((char*) msg), sizeof(msg), "  * reserved2     : %u\r\n",				ubloxNavSvinfo->reserved2);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	88db      	ldrh	r3, [r3, #6]
 800367a:	f107 0008 	add.w	r0, r7, #8
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <ublox_NavSvinfo_get+0x368>)
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	f007 fc95 	bl	800afb0 <sniprintf>
 8003686:	6778      	str	r0, [r7, #116]	; 0x74
			HAL_UART_Transmit(&huart2, msg, len, 25);
 8003688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368a:	b29a      	uxth	r2, r3
 800368c:	f107 0108 	add.w	r1, r7, #8
 8003690:	2319      	movs	r3, #25
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <ublox_NavSvinfo_get+0x358>)
 8003694:	f006 f9f5 	bl	8009a82 <HAL_UART_Transmit>

			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 8003698:	2300      	movs	r3, #0
 800369a:	67bb      	str	r3, [r7, #120]	; 0x78
 800369c:	e0d2      	b.n	8003844 <ublox_NavSvinfo_get+0x4f4>
 800369e:	bf00      	nop
 80036a0:	20000258 	.word	0x20000258
 80036a4:	0800bd90 	.word	0x0800bd90
 80036a8:	20000600 	.word	0x20000600
 80036ac:	0800bc60 	.word	0x0800bc60
 80036b0:	0800be5c 	.word	0x0800be5c
 80036b4:	0800be78 	.word	0x0800be78
 80036b8:	0800be98 	.word	0x0800be98
				len = snprintf(((char*) msg), sizeof(msg), "  *\r\n");
 80036bc:	f107 0308 	add.w	r3, r7, #8
 80036c0:	4a76      	ldr	r2, [pc, #472]	; (800389c <ublox_NavSvinfo_get+0x54c>)
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	4618      	mov	r0, r3
 80036c6:	f007 fc73 	bl	800afb0 <sniprintf>
 80036ca:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80036cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	f107 0108 	add.w	r1, r7, #8
 80036d4:	2319      	movs	r3, #25
 80036d6:	4872      	ldr	r0, [pc, #456]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 80036d8:	f006 f9d3 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d chn    : %u\r\n", iChn, 		ubloxNavSvinfo->chn[iChn]);
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e0:	4413      	add	r3, r2
 80036e2:	3308      	adds	r3, #8
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	f107 0008 	add.w	r0, r7, #8
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ee:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <ublox_NavSvinfo_get+0x554>)
 80036f0:	2140      	movs	r1, #64	; 0x40
 80036f2:	f007 fc5d 	bl	800afb0 <sniprintf>
 80036f6:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80036f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	f107 0108 	add.w	r1, r7, #8
 8003700:	2319      	movs	r3, #25
 8003702:	4867      	ldr	r0, [pc, #412]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 8003704:	f006 f9bd 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d svid   : %u\r\n", iChn, 		ubloxNavSvinfo->svid[iChn]);
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800370c:	4413      	add	r3, r2
 800370e:	3320      	adds	r3, #32
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	f107 0008 	add.w	r0, r7, #8
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371a:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <ublox_NavSvinfo_get+0x558>)
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	f007 fc47 	bl	800afb0 <sniprintf>
 8003722:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8003724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003726:	b29a      	uxth	r2, r3
 8003728:	f107 0108 	add.w	r1, r7, #8
 800372c:	2319      	movs	r3, #25
 800372e:	485c      	ldr	r0, [pc, #368]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 8003730:	f006 f9a7 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d flags  : 0x%02x\r\n", iChn,	ubloxNavSvinfo->flags[iChn]);
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003738:	4413      	add	r3, r2
 800373a:	3338      	adds	r3, #56	; 0x38
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	f107 0008 	add.w	r0, r7, #8
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003746:	4a59      	ldr	r2, [pc, #356]	; (80038ac <ublox_NavSvinfo_get+0x55c>)
 8003748:	2140      	movs	r1, #64	; 0x40
 800374a:	f007 fc31 	bl	800afb0 <sniprintf>
 800374e:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8003750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003752:	b29a      	uxth	r2, r3
 8003754:	f107 0108 	add.w	r1, r7, #8
 8003758:	2319      	movs	r3, #25
 800375a:	4851      	ldr	r0, [pc, #324]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 800375c:	f006 f991 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d quality: 0x%02x\r\n", iChn,	ubloxNavSvinfo->quality[iChn]);
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003764:	4413      	add	r3, r2
 8003766:	3350      	adds	r3, #80	; 0x50
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	f107 0008 	add.w	r0, r7, #8
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003772:	4a4f      	ldr	r2, [pc, #316]	; (80038b0 <ublox_NavSvinfo_get+0x560>)
 8003774:	2140      	movs	r1, #64	; 0x40
 8003776:	f007 fc1b 	bl	800afb0 <sniprintf>
 800377a:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800377c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377e:	b29a      	uxth	r2, r3
 8003780:	f107 0108 	add.w	r1, r7, #8
 8003784:	2319      	movs	r3, #25
 8003786:	4846      	ldr	r0, [pc, #280]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 8003788:	f006 f97b 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Car/Nse: %u dbHz\r\n", iChn,	ubloxNavSvinfo->cno[iChn]);
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003790:	4413      	add	r3, r2
 8003792:	3368      	adds	r3, #104	; 0x68
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f107 0008 	add.w	r0, r7, #8
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379e:	4a45      	ldr	r2, [pc, #276]	; (80038b4 <ublox_NavSvinfo_get+0x564>)
 80037a0:	2140      	movs	r1, #64	; 0x40
 80037a2:	f007 fc05 	bl	800afb0 <sniprintf>
 80037a6:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80037a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	f107 0108 	add.w	r1, r7, #8
 80037b0:	2319      	movs	r3, #25
 80037b2:	483b      	ldr	r0, [pc, #236]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 80037b4:	f006 f965 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Elev.  : %d deg\r\n", iChn, 	ubloxNavSvinfo->elev[iChn]);
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037bc:	4413      	add	r3, r2
 80037be:	3380      	adds	r3, #128	; 0x80
 80037c0:	f993 3000 	ldrsb.w	r3, [r3]
 80037c4:	f107 0008 	add.w	r0, r7, #8
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037cc:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <ublox_NavSvinfo_get+0x568>)
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	f007 fbee 	bl	800afb0 <sniprintf>
 80037d4:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 80037d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d8:	b29a      	uxth	r2, r3
 80037da:	f107 0108 	add.w	r1, r7, #8
 80037de:	2319      	movs	r3, #25
 80037e0:	482f      	ldr	r0, [pc, #188]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 80037e2:	f006 f94e 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d Azimuth: %d deg\r\n", iChn, 	ubloxNavSvinfo->azim[iChn]);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037ea:	324c      	adds	r2, #76	; 0x4c
 80037ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80037f0:	f107 0008 	add.w	r0, r7, #8
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f8:	4a30      	ldr	r2, [pc, #192]	; (80038bc <ublox_NavSvinfo_get+0x56c>)
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	f007 fbd8 	bl	800afb0 <sniprintf>
 8003800:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 8003802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003804:	b29a      	uxth	r2, r3
 8003806:	f107 0108 	add.w	r1, r7, #8
 800380a:	2319      	movs	r3, #25
 800380c:	4824      	ldr	r0, [pc, #144]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 800380e:	f006 f938 	bl	8009a82 <HAL_UART_Transmit>

				len = snprintf(((char*) msg), sizeof(msg), "  * Ch%02d prRes  : %ld cm\r\n", iChn, 	ubloxNavSvinfo->prRes[iChn]);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003816:	3232      	adds	r2, #50	; 0x32
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	f107 0008 	add.w	r0, r7, #8
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003824:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <ublox_NavSvinfo_get+0x570>)
 8003826:	2140      	movs	r1, #64	; 0x40
 8003828:	f007 fbc2 	bl	800afb0 <sniprintf>
 800382c:	6778      	str	r0, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart2, msg, len, 25);
 800382e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003830:	b29a      	uxth	r2, r3
 8003832:	f107 0108 	add.w	r1, r7, #8
 8003836:	2319      	movs	r3, #25
 8003838:	4819      	ldr	r0, [pc, #100]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 800383a:	f006 f922 	bl	8009a82 <HAL_UART_Transmit>
			for (int iChn = 0; iChn < ubloxNavSvinfo->numCh; iChn++) {
 800383e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003840:	3301      	adds	r3, #1
 8003842:	67bb      	str	r3, [r7, #120]	; 0x78
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	461a      	mov	r2, r3
 800384a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384c:	4293      	cmp	r3, r2
 800384e:	f6ff af35 	blt.w	80036bc <ublox_NavSvinfo_get+0x36c>
			}
		}

		{
			uint8_t msg[] = "\r\n";
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <ublox_NavSvinfo_get+0x574>)
 8003854:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4611      	mov	r1, r2
 800385c:	8019      	strh	r1, [r3, #0]
 800385e:	3302      	adds	r3, #2
 8003860:	0c12      	lsrs	r2, r2, #16
 8003862:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003864:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003868:	2319      	movs	r3, #25
 800386a:	2202      	movs	r2, #2
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 800386e:	f006 f908 	bl	8009a82 <HAL_UART_Transmit>
		{
 8003872:	e00f      	b.n	8003894 <ublox_NavSvinfo_get+0x544>
#endif
	}
	else {
#if defined(LOGGING)
		{
			uint8_t msg[] = "data FAILED!\r\n\r\n";
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <ublox_NavSvinfo_get+0x578>)
 8003876:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800387a:	461d      	mov	r5, r3
 800387c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, 25);
 8003884:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003888:	2319      	movs	r3, #25
 800388a:	2210      	movs	r2, #16
 800388c:	4804      	ldr	r0, [pc, #16]	; (80038a0 <ublox_NavSvinfo_get+0x550>)
 800388e:	f006 f8f8 	bl	8009a82 <HAL_UART_Transmit>
		}
#endif
	}
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	3788      	adds	r7, #136	; 0x88
 8003898:	46bd      	mov	sp, r7
 800389a:	bdb0      	pop	{r4, r5, r7, pc}
 800389c:	0800beb4 	.word	0x0800beb4
 80038a0:	20000600 	.word	0x20000600
 80038a4:	0800bebc 	.word	0x0800bebc
 80038a8:	0800bed8 	.word	0x0800bed8
 80038ac:	0800bef4 	.word	0x0800bef4
 80038b0:	0800bf14 	.word	0x0800bf14
 80038b4:	0800bf34 	.word	0x0800bf34
 80038b8:	0800bf54 	.word	0x0800bf54
 80038bc:	0800bf74 	.word	0x0800bf74
 80038c0:	0800bf94 	.word	0x0800bf94
 80038c4:	0800bd9c 	.word	0x0800bd9c
 80038c8:	0800bda0 	.word	0x0800bda0

080038cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003904 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038d0:	f7fe fb12 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038d6:	e003      	b.n	80038e0 <LoopCopyDataInit>

080038d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038de:	3104      	adds	r1, #4

080038e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038e0:	480a      	ldr	r0, [pc, #40]	; (800390c <LoopForever+0xa>)
	ldr	r3, =_edata
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <LoopForever+0xe>)
	adds	r2, r0, r1
 80038e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038e8:	d3f6      	bcc.n	80038d8 <CopyDataInit>
	ldr	r2, =_sbss
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038ec:	e002      	b.n	80038f4 <LoopFillZerobss>

080038ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038f0:	f842 3b04 	str.w	r3, [r2], #4

080038f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <LoopForever+0x16>)
	cmp	r2, r3
 80038f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038f8:	d3f9      	bcc.n	80038ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038fa:	f007 fb1f 	bl	800af3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038fe:	f7fd fe3b 	bl	8001578 <main>

08003902 <LoopForever>:

LoopForever:
    b LoopForever
 8003902:	e7fe      	b.n	8003902 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003904:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8003908:	0800c06c 	.word	0x0800c06c
	ldr	r0, =_sdata
 800390c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003910:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003914:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003918:	20000698 	.word	0x20000698

0800391c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800391c:	e7fe      	b.n	800391c <CAN1_RX0_IRQHandler>

0800391e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003928:	2003      	movs	r0, #3
 800392a:	f001 fd68 	bl	80053fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800392e:	200f      	movs	r0, #15
 8003930:	f7fe f9ee 	bl	8001d10 <HAL_InitTick>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	71fb      	strb	r3, [r7, #7]
 800393e:	e001      	b.n	8003944 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003940:	f7fe f9c2 	bl	8001cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003944:	79fb      	ldrb	r3, [r7, #7]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x20>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x24>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_IncTick+0x24>)
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000008 	.word	0x20000008
 8003974:	20000684 	.word	0x20000684

08003978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_GetTick+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000684 	.word	0x20000684

08003990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7ff ffee 	bl	8003978 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d005      	beq.n	80039b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_Delay+0x44>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039b6:	bf00      	nop
 80039b8:	f7ff ffde 	bl	8003978 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d8f7      	bhi.n	80039b8 <HAL_Delay+0x28>
  {
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000008 	.word	0x20000008

080039d8 <LL_ADC_SetCommonClock>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_ADC_SetCommonPathInternalCh>:
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_GetCommonPathInternalCh>:
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_SetOffset>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3360      	adds	r3, #96	; 0x60
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <LL_ADC_SetOffset+0x44>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	03fff000 	.word	0x03fff000

08003a88 <LL_ADC_GetOffsetChannel>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3360      	adds	r3, #96	; 0x60
 8003a96:	461a      	mov	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_SetOffsetState>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3360      	adds	r3, #96	; 0x60
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_REG_SetSequencerRanks>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3330      	adds	r3, #48	; 0x30
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	4413      	add	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	211f      	movs	r1, #31
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0e9b      	lsrs	r3, r3, #26
 8003b48:	f003 011f 	and.w	r1, r3, #31
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	431a      	orrs	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	601a      	str	r2, [r3, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_ADC_SetChannelSamplingTime>:
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	0e5b      	lsrs	r3, r3, #25
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0d1b      	lsrs	r3, r3, #20
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2107      	movs	r1, #7
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0d1b      	lsrs	r3, r3, #20
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	601a      	str	r2, [r3, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_SetChannelSingleDiff>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 0318 	and.w	r3, r3, #24
 8003c06:	4908      	ldr	r1, [pc, #32]	; (8003c28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c08:	40d9      	lsrs	r1, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	0007ffff 	.word	0x0007ffff

08003c2c <LL_ADC_DisableDeepPowerDown>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6093      	str	r3, [r2, #8]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c64:	d101      	bne.n	8003c6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_EnableInternalRegulator>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb4:	d101      	bne.n	8003cba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_Enable>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_Disable>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d04:	f043 0202 	orr.w	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_IsEnabled>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <LL_ADC_IsEnabled+0x18>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <LL_ADC_IsEnabled+0x1a>
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_ADC_IsDisableOngoing>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d101      	bne.n	8003d56 <LL_ADC_IsDisableOngoing+0x18>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_ADC_IsDisableOngoing+0x1a>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_REG_StopConversion>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_REG_IsConversionOngoing>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d101      	bne.n	8003df2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e12c      	b.n	8004074 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fc fc69 	bl	8000700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff05 	bl	8003c50 <LL_ADC_IsDeepPowerDownEnabled>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff feeb 	bl	8003c2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff20 	bl	8003ca0 <LL_ADC_IsInternalRegulatorEnabled>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d115      	bne.n	8003e92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff ff04 	bl	8003c78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e70:	4b82      	ldr	r3, [pc, #520]	; (800407c <HAL_ADC_Init+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	4a82      	ldr	r2, [pc, #520]	; (8004080 <HAL_ADC_Init+0x280>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff02 	bl	8003ca0 <LL_ADC_IsInternalRegulatorEnabled>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10d      	bne.n	8003ebe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff62 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8003ec8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 80c5 	bne.w	8004062 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 80c1 	bne.w	8004062 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ee8:	f043 0202 	orr.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff0f 	bl	8003d18 <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f00:	4860      	ldr	r0, [pc, #384]	; (8004084 <HAL_ADC_Init+0x284>)
 8003f02:	f7ff ff09 	bl	8003d18 <LL_ADC_IsEnabled>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4619      	mov	r1, r3
 8003f12:	485d      	ldr	r0, [pc, #372]	; (8004088 <HAL_ADC_Init+0x288>)
 8003f14:	f7ff fd60 	bl	80039d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7e5b      	ldrb	r3, [r3, #25]
 8003f1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d106      	bne.n	8003f54 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	045b      	lsls	r3, r3, #17
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b45      	ldr	r3, [pc, #276]	; (800408c <HAL_ADC_Init+0x28c>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff feff 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8003f8e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff20 	bl	8003dda <LL_ADC_INJ_IsConversionOngoing>
 8003f9a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d13d      	bne.n	800401e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d13a      	bne.n	800401e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fb4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc4:	f023 0302 	bic.w	r3, r3, #2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	69b9      	ldr	r1, [r7, #24]
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d118      	bne.n	800400e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fe6:	f023 0304 	bic.w	r3, r3, #4
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ffe:	430a      	orrs	r2, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	611a      	str	r2, [r3, #16]
 800400c:	e007      	b.n	800401e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10c      	bne.n	8004040 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f023 010f 	bic.w	r1, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
 800403e:	e007      	b.n	8004050 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 020f 	bic.w	r2, r2, #15
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	f023 0303 	bic.w	r3, r3, #3
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
 8004060:	e007      	b.n	8004072 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004072:	7ffb      	ldrb	r3, [r7, #31]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000000 	.word	0x20000000
 8004080:	053e2d63 	.word	0x053e2d63
 8004084:	50040000 	.word	0x50040000
 8004088:	50040300 	.word	0x50040300
 800408c:	fff0c007 	.word	0xfff0c007

08004090 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_Stop_DMA+0x16>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e051      	b.n	800414a <HAL_ADC_Stop_DMA+0xba>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80040ae:	2103      	movs	r1, #3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fe03 	bl	8004cbc <ADC_ConversionStop>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d13f      	bne.n	8004140 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d10f      	bne.n	80040fe <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fae6 	bl	80056b4 <HAL_DMA_Abort>
 80040e8:	4603      	mov	r3, r0
 80040ea:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0210 	bic.w	r2, r2, #16
 800410c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 feef 	bl	8004ef8 <ADC_Disable>
 800411a:	4603      	mov	r3, r0
 800411c:	73fb      	strb	r3, [r7, #15]
 800411e:	e002      	b.n	8004126 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fee9 	bl	8004ef8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_ADC_IRQHandler+0x56>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d012      	beq.n	80041a8 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 f854 	bl	8005248 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2202      	movs	r2, #2
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_ADC_IRQHandler+0x6a>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d05e      	beq.n	8004284 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d059      	beq.n	8004284 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fc7c 	bl	8003aea <LL_ADC_REG_IsTriggerSourceSWStart>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03e      	beq.n	8004276 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d135      	bne.n	8004276 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b08      	cmp	r3, #8
 8004216:	d12e      	bne.n	8004276 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fdb5 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 020c 	bic.w	r2, r2, #12
 8004236:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d112      	bne.n	8004276 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
 800425c:	e00b      	b.n	8004276 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0210 	orr.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f043 0201 	orr.w	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc fb70 	bl	800095c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	220c      	movs	r2, #12
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <HAL_ADC_IRQHandler+0x146>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d072      	beq.n	8004388 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d06d      	beq.n	8004388 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fc4d 	bl	8003b68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80042ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fc08 	bl	8003aea <LL_ADC_REG_IsTriggerSourceSWStart>
 80042da:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d047      	beq.n	800437a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_ADC_IRQHandler+0x1b2>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d03f      	beq.n	800437a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d13a      	bne.n	800437a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d133      	bne.n	800437a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12e      	bne.n	800437a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fd5a 	bl	8003dda <LL_ADC_INJ_IsConversionOngoing>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11a      	bne.n	8004362 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800433a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d112      	bne.n	800437a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0201 	orr.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
 8004360:	e00b      	b.n	800437a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 ff3c 	bl	80051f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2260      	movs	r2, #96	; 0x60
 8004386:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d011      	beq.n	80043b6 <HAL_ADC_IRQHandler+0x264>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f890 	bl	80044ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d012      	beq.n	80043e6 <HAL_ADC_IRQHandler+0x294>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00d      	beq.n	80043e6 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 ff22 	bl	8005220 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <HAL_ADC_IRQHandler+0x2c4>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 ff14 	bl	8005234 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02a      	beq.n	8004476 <HAL_ADC_IRQHandler+0x324>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	d025      	beq.n	8004476 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e008      	b.n	800444a <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8004446:	2301      	movs	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10e      	bne.n	800446e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f043 0202 	orr.w	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc fabb 	bl	80009e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <HAL_ADC_IRQHandler+0x360>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004486:	2b00      	cmp	r3, #0
 8004488:	d013      	beq.n	80044b2 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f043 0208 	orr.w	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fead 	bl	800520c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80044b2:	bf00      	nop
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b0b6      	sub	sp, #216	; 0xd8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x22>
 8004502:	2302      	movs	r3, #2
 8004504:	e3b9      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x796>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fc3a 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 839e 	bne.w	8004c5c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d824      	bhi.n	8004572 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	3b02      	subs	r3, #2
 800452e:	2b03      	cmp	r3, #3
 8004530:	d81b      	bhi.n	800456a <HAL_ADC_ConfigChannel+0x86>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <HAL_ADC_ConfigChannel+0x54>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004549 	.word	0x08004549
 800453c:	08004551 	.word	0x08004551
 8004540:	08004559 	.word	0x08004559
 8004544:	08004561 	.word	0x08004561
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	220c      	movs	r2, #12
 800454c:	605a      	str	r2, [r3, #4]
          break;
 800454e:	e011      	b.n	8004574 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2212      	movs	r2, #18
 8004554:	605a      	str	r2, [r3, #4]
          break;
 8004556:	e00d      	b.n	8004574 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2218      	movs	r2, #24
 800455c:	605a      	str	r2, [r3, #4]
          break;
 800455e:	e009      	b.n	8004574 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004566:	605a      	str	r2, [r3, #4]
          break;
 8004568:	e004      	b.n	8004574 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2206      	movs	r2, #6
 800456e:	605a      	str	r2, [r3, #4]
          break;
 8004570:	e000      	b.n	8004574 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004572:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	f7ff fac5 	bl	8003b10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fbfe 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8004590:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fc1e 	bl	8003dda <LL_ADC_INJ_IsConversionOngoing>
 800459e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 81a6 	bne.w	80048f8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f040 81a1 	bne.w	80048f8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6819      	ldr	r1, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7ff fae3 	bl	8003b8e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d00a      	beq.n	8004600 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045fa:	f7ff fa21 	bl	8003a40 <LL_ADC_SetOffset>
 80045fe:	e17b      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fa3e 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 800460c:	4603      	mov	r3, r0
 800460e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <HAL_ADC_ConfigChannel+0x148>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fa33 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004622:	4603      	mov	r3, r0
 8004624:	0e9b      	lsrs	r3, r3, #26
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	e01e      	b.n	800466a <HAL_ADC_ConfigChannel+0x186>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fa28 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800464a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800464e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800465a:	2320      	movs	r3, #32
 800465c:	e004      	b.n	8004668 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800465e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x19e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	e018      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x1d0>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800469a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800469e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e004      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80046aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d106      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2200      	movs	r2, #0
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff f9f7 	bl	8003ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff f9db 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x20e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff f9d0 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	0e9b      	lsrs	r3, r3, #26
 80046ec:	f003 021f 	and.w	r2, r3, #31
 80046f0:	e01e      	b.n	8004730 <HAL_ADC_ConfigChannel+0x24c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f9c5 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004710:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e004      	b.n	800472e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x264>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	e018      	b.n	800477a <HAL_ADC_ConfigChannel+0x296>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800475c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800476c:	2320      	movs	r3, #32
 800476e:	e004      	b.n	800477a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800477a:	429a      	cmp	r2, r3
 800477c:	d106      	bne.n	800478c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f994 	bl	8003ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f978 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004798:	4603      	mov	r3, r0
 800479a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x2d4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2102      	movs	r1, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff f96d 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 80047ae:	4603      	mov	r3, r0
 80047b0:	0e9b      	lsrs	r3, r3, #26
 80047b2:	f003 021f 	and.w	r2, r3, #31
 80047b6:	e01e      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x312>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2102      	movs	r1, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff f962 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80047d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80047de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80047e6:	2320      	movs	r3, #32
 80047e8:	e004      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80047ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <HAL_ADC_ConfigChannel+0x32a>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0e9b      	lsrs	r3, r3, #26
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	e016      	b.n	800483c <HAL_ADC_ConfigChannel+0x358>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800482e:	2320      	movs	r3, #32
 8004830:	e004      	b.n	800483c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004832:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800483c:	429a      	cmp	r2, r3
 800483e:	d106      	bne.n	800484e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2200      	movs	r2, #0
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff f933 	bl	8003ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2103      	movs	r1, #3
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f917 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 800485a:	4603      	mov	r3, r0
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <HAL_ADC_ConfigChannel+0x396>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2103      	movs	r1, #3
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff f90c 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004870:	4603      	mov	r3, r0
 8004872:	0e9b      	lsrs	r3, r3, #26
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	e017      	b.n	80048aa <HAL_ADC_ConfigChannel+0x3c6>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2103      	movs	r1, #3
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff f901 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004894:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800489c:	2320      	movs	r3, #32
 800489e:	e003      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d105      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x3de>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	0e9b      	lsrs	r3, r3, #26
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	e011      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x402>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80048d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e003      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d106      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2103      	movs	r1, #3
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff f8de 	bl	8003ab4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fa0b 	bl	8003d18 <LL_ADC_IsEnabled>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	f040 813f 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	461a      	mov	r2, r3
 8004918:	f7ff f964 	bl	8003be4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a8e      	ldr	r2, [pc, #568]	; (8004b5c <HAL_ADC_ConfigChannel+0x678>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f040 8130 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x46c>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	0e9b      	lsrs	r3, r3, #26
 800493e:	3301      	adds	r3, #1
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2b09      	cmp	r3, #9
 8004946:	bf94      	ite	ls
 8004948:	2301      	movls	r3, #1
 800494a:	2300      	movhi	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e019      	b.n	8004984 <HAL_ADC_ConfigChannel+0x4a0>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800495e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004960:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004968:	2320      	movs	r3, #32
 800496a:	e003      	b.n	8004974 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800496c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	3301      	adds	r3, #1
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2b09      	cmp	r3, #9
 800497c:	bf94      	ite	ls
 800497e:	2301      	movls	r3, #1
 8004980:	2300      	movhi	r3, #0
 8004982:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004984:	2b00      	cmp	r3, #0
 8004986:	d079      	beq.n	8004a7c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x4c0>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	0e9b      	lsrs	r3, r3, #26
 800499a:	3301      	adds	r3, #1
 800499c:	069b      	lsls	r3, r3, #26
 800499e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049a2:	e015      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x4ec>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80049b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80049bc:	2320      	movs	r3, #32
 80049be:	e003      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80049c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	069b      	lsls	r3, r3, #26
 80049cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x50c>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	0e9b      	lsrs	r3, r3, #26
 80049e2:	3301      	adds	r3, #1
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	e017      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x53c>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80049fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004a08:	2320      	movs	r3, #32
 8004a0a:	e003      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	ea42 0103 	orr.w	r1, r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x562>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	0e9b      	lsrs	r3, r3, #26
 8004a36:	3301      	adds	r3, #1
 8004a38:	f003 021f 	and.w	r2, r3, #31
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	051b      	lsls	r3, r3, #20
 8004a44:	e018      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x594>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004a5e:	2320      	movs	r3, #32
 8004a60:	e003      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	fab3 f383 	clz	r3, r3
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f003 021f 	and.w	r2, r3, #31
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	e080      	b.n	8004b7e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d107      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x5b4>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	0e9b      	lsrs	r3, r3, #26
 8004a8e:	3301      	adds	r3, #1
 8004a90:	069b      	lsls	r3, r3, #26
 8004a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a96:	e015      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x5e0>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	e003      	b.n	8004abc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	069b      	lsls	r3, r3, #26
 8004ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x600>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	e017      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x630>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	61fb      	str	r3, [r7, #28]
  return result;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004afc:	2320      	movs	r3, #32
 8004afe:	e003      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	ea42 0103 	orr.w	r1, r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x65c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	0e9b      	lsrs	r3, r3, #26
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	3b1e      	subs	r3, #30
 8004b38:	051b      	lsls	r3, r3, #20
 8004b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	e01d      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x698>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	613b      	str	r3, [r7, #16]
  return result;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004b58:	2320      	movs	r3, #32
 8004b5a:	e005      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x684>
 8004b5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f003 021f 	and.w	r2, r3, #31
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	3b1e      	subs	r3, #30
 8004b76:	051b      	lsls	r3, r3, #20
 8004b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	6892      	ldr	r2, [r2, #8]
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7ff f803 	bl	8003b8e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_ADC_ConfigChannel+0x7a0>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d06c      	beq.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b94:	483c      	ldr	r0, [pc, #240]	; (8004c88 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b96:	f7fe ff45 	bl	8003a24 <LL_ADC_GetCommonPathInternalCh>
 8004b9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3a      	ldr	r2, [pc, #232]	; (8004c8c <HAL_ADC_ConfigChannel+0x7a8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d127      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d121      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <HAL_ADC_ConfigChannel+0x7ac>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d157      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	482f      	ldr	r0, [pc, #188]	; (8004c88 <HAL_ADC_ConfigChannel+0x7a4>)
 8004bca:	f7fe ff18 	bl	80039fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_ADC_ConfigChannel+0x7b0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	4a30      	ldr	r2, [pc, #192]	; (8004c98 <HAL_ADC_ConfigChannel+0x7b4>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004be8:	e002      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f9      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bf6:	e03a      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_ADC_ConfigChannel+0x7b8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d113      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x746>
 8004c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10d      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d12a      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c20:	4619      	mov	r1, r3
 8004c22:	4819      	ldr	r0, [pc, #100]	; (8004c88 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c24:	f7fe feeb 	bl	80039fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c28:	e021      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d11c      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d116      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d111      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c52:	4619      	mov	r1, r3
 8004c54:	480c      	ldr	r0, [pc, #48]	; (8004c88 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c56:	f7fe fed2 	bl	80039fe <LL_ADC_SetCommonPathInternalCh>
 8004c5a:	e008      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	37d8      	adds	r7, #216	; 0xd8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	80080000 	.word	0x80080000
 8004c88:	50040300 	.word	0x50040300
 8004c8c:	c7520000 	.word	0xc7520000
 8004c90:	50040000 	.word	0x50040000
 8004c94:	20000000 	.word	0x20000000
 8004c98:	053e2d63 	.word	0x053e2d63
 8004c9c:	cb840000 	.word	0xcb840000
 8004ca0:	80000001 	.word	0x80000001

08004ca4 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff f85a 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8004cd8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f87b 	bl	8003dda <LL_ADC_INJ_IsConversionOngoing>
 8004ce4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8098 	beq.w	8004e24 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02a      	beq.n	8004d58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	7e5b      	ldrb	r3, [r3, #25]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d126      	bne.n	8004d58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7e1b      	ldrb	r3, [r3, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d122      	bne.n	8004d58 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d16:	e014      	b.n	8004d42 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4a45      	ldr	r2, [pc, #276]	; (8004e30 <ADC_ConversionStop+0x174>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d90d      	bls.n	8004d3c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e074      	b.n	8004e26 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d1e3      	bne.n	8004d18 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2240      	movs	r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d014      	beq.n	8004d88 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f812 	bl	8003d8c <LL_ADC_REG_IsConversionOngoing>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe ffe3 	bl	8003d3e <LL_ADC_IsDisableOngoing>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe ffee 	bl	8003d64 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d014      	beq.n	8004db8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff f821 	bl	8003dda <LL_ADC_INJ_IsConversionOngoing>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe ffcb 	bl	8003d3e <LL_ADC_IsDisableOngoing>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fffd 	bl	8003db2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d005      	beq.n	8004dca <ADC_ConversionStop+0x10e>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d105      	bne.n	8004dd0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004dc4:	230c      	movs	r3, #12
 8004dc6:	617b      	str	r3, [r7, #20]
        break;
 8004dc8:	e005      	b.n	8004dd6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004dca:	2308      	movs	r3, #8
 8004dcc:	617b      	str	r3, [r7, #20]
        break;
 8004dce:	e002      	b.n	8004dd6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	617b      	str	r3, [r7, #20]
        break;
 8004dd4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004dd6:	f7fe fdcf 	bl	8003978 <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ddc:	e01b      	b.n	8004e16 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004dde:	f7fe fdcb 	bl	8003978 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d914      	bls.n	8004e16 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	f043 0210 	orr.w	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e007      	b.n	8004e26 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1dc      	bne.n	8004dde <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	a33fffff 	.word	0xa33fffff

08004e34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fe ff69 	bl	8003d18 <LL_ADC_IsEnabled>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d14d      	bne.n	8004ee8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <ADC_Enable+0xc0>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e039      	b.n	8004eea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe ff24 	bl	8003cc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e80:	f7fe fd7a 	bl	8003978 <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e86:	e028      	b.n	8004eda <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe ff43 	bl	8003d18 <LL_ADC_IsEnabled>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe ff13 	bl	8003cc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ea2:	f7fe fd69 	bl	8003978 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d914      	bls.n	8004eda <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d00d      	beq.n	8004eda <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e007      	b.n	8004eea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d1cf      	bne.n	8004e88 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	8000003f 	.word	0x8000003f

08004ef8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ff1a 	bl	8003d3e <LL_ADC_IsDisableOngoing>
 8004f0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe ff01 	bl	8003d18 <LL_ADC_IsEnabled>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d047      	beq.n	8004fac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d144      	bne.n	8004fac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 030d 	and.w	r3, r3, #13
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10c      	bne.n	8004f4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fedb 	bl	8003cf0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f42:	f7fe fd19 	bl	8003978 <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f48:	e029      	b.n	8004f9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f043 0210 	orr.w	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e023      	b.n	8004fae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f66:	f7fe fd07 	bl	8003978 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d914      	bls.n	8004f9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f043 0210 	orr.w	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	f043 0201 	orr.w	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e007      	b.n	8004fae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1dc      	bne.n	8004f66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d14b      	bne.n	8005068 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d021      	beq.n	800502e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fd7b 	bl	8003aea <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d032      	beq.n	8005060 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d12b      	bne.n	8005060 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11f      	bne.n	8005060 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
 800502c:	e018      	b.n	8005060 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	f043 0201 	orr.w	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7fb fc7b 	bl	800095c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005066:	e00e      	b.n	8005086 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7fb fcb5 	bl	80009e4 <HAL_ADC_ErrorCallback>
}
 800507a:	e004      	b.n	8005086 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff fa0c 	bl	80044ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	f043 0204 	orr.w	r2, r3, #4
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7fb fc87 	bl	80009e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <LL_ADC_StartCalibration>:
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80050f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_ADC_IsCalibrationOnGoing>:
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005124:	d101      	bne.n	800512a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_ADCEx_Calibration_Start+0x1c>
 8005150:	2302      	movs	r3, #2
 8005152:	e04d      	b.n	80051f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff fecb 	bl	8004ef8 <ADC_Disable>
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d136      	bne.n	80051da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005174:	f023 0302 	bic.w	r3, r3, #2
 8005178:	f043 0202 	orr.w	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ffa9 	bl	80050de <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800518c:	e014      	b.n	80051b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3301      	adds	r3, #1
 8005192:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800519a:	d30d      	bcc.n	80051b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f023 0312 	bic.w	r3, r3, #18
 80051a4:	f043 0210 	orr.w	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e01b      	b.n	80051f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ffa7 	bl	8005110 <LL_ADC_IsCalibrationOnGoing>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e2      	bne.n	800518e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
 80051d8:	e005      	b.n	80051e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0210 	orr.w	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <__NVIC_SetPriorityGrouping+0x44>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005278:	4013      	ands	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800528e:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	60d3      	str	r3, [r2, #12]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__NVIC_GetPriorityGrouping+0x18>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	f003 0307 	and.w	r3, r3, #7
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	db0b      	blt.n	80052ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	f003 021f 	and.w	r2, r3, #31
 80052d8:	4907      	ldr	r1, [pc, #28]	; (80052f8 <__NVIC_EnableIRQ+0x38>)
 80052da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2001      	movs	r0, #1
 80052e2:	fa00 f202 	lsl.w	r2, r0, r2
 80052e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e100 	.word	0xe000e100

080052fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	2b00      	cmp	r3, #0
 800530c:	db12      	blt.n	8005334 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	f003 021f 	and.w	r2, r3, #31
 8005314:	490a      	ldr	r1, [pc, #40]	; (8005340 <__NVIC_DisableIRQ+0x44>)
 8005316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	2001      	movs	r0, #1
 800531e:	fa00 f202 	lsl.w	r2, r0, r2
 8005322:	3320      	adds	r3, #32
 8005324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005328:	f3bf 8f4f 	dsb	sy
}
 800532c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800532e:	f3bf 8f6f 	isb	sy
}
 8005332:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	e000e100 	.word	0xe000e100

08005344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	6039      	str	r1, [r7, #0]
 800534e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005354:	2b00      	cmp	r3, #0
 8005356:	db0a      	blt.n	800536e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	490c      	ldr	r1, [pc, #48]	; (8005390 <__NVIC_SetPriority+0x4c>)
 800535e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005362:	0112      	lsls	r2, r2, #4
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	440b      	add	r3, r1
 8005368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800536c:	e00a      	b.n	8005384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	4908      	ldr	r1, [pc, #32]	; (8005394 <__NVIC_SetPriority+0x50>)
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	3b04      	subs	r3, #4
 800537c:	0112      	lsls	r2, r2, #4
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	440b      	add	r3, r1
 8005382:	761a      	strb	r2, [r3, #24]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	e000e100 	.word	0xe000e100
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005398:	b480      	push	{r7}
 800539a:	b089      	sub	sp, #36	; 0x24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f1c3 0307 	rsb	r3, r3, #7
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	bf28      	it	cs
 80053b6:	2304      	movcs	r3, #4
 80053b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3304      	adds	r3, #4
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d902      	bls.n	80053c8 <NVIC_EncodePriority+0x30>
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3b03      	subs	r3, #3
 80053c6:	e000      	b.n	80053ca <NVIC_EncodePriority+0x32>
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43da      	mvns	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	401a      	ands	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053e0:	f04f 31ff 	mov.w	r1, #4294967295
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	43d9      	mvns	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f0:	4313      	orrs	r3, r2
         );
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ff28 	bl	800525c <__NVIC_SetPriorityGrouping>
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005426:	f7ff ff3d 	bl	80052a4 <__NVIC_GetPriorityGrouping>
 800542a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	6978      	ldr	r0, [r7, #20]
 8005432:	f7ff ffb1 	bl	8005398 <NVIC_EncodePriority>
 8005436:	4602      	mov	r2, r0
 8005438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ff80 	bl	8005344 <__NVIC_SetPriority>
}
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ff30 	bl	80052c0 <__NVIC_EnableIRQ>
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ff40 	bl	80052fc <__NVIC_DisableIRQ>
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e098      	b.n	80055c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_DMA_Init+0x150>)
 800549e:	429a      	cmp	r2, r3
 80054a0:	d80f      	bhi.n	80054c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_DMA_Init+0x154>)
 80054aa:	4413      	add	r3, r2
 80054ac:	4a4b      	ldr	r2, [pc, #300]	; (80055dc <HAL_DMA_Init+0x158>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a48      	ldr	r2, [pc, #288]	; (80055e0 <HAL_DMA_Init+0x15c>)
 80054be:	641a      	str	r2, [r3, #64]	; 0x40
 80054c0:	e00e      	b.n	80054e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_DMA_Init+0x160>)
 80054ca:	4413      	add	r3, r2
 80054cc:	4a43      	ldr	r2, [pc, #268]	; (80055dc <HAL_DMA_Init+0x158>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	091b      	lsrs	r3, r3, #4
 80054d4:	009a      	lsls	r2, r3, #2
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a42      	ldr	r2, [pc, #264]	; (80055e8 <HAL_DMA_Init+0x164>)
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800553a:	d039      	beq.n	80055b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <HAL_DMA_Init+0x15c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d11a      	bne.n	800557c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005546:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_DMA_Init+0x168>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f003 031c 	and.w	r3, r3, #28
 8005552:	210f      	movs	r1, #15
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	4924      	ldr	r1, [pc, #144]	; (80055ec <HAL_DMA_Init+0x168>)
 800555c:	4013      	ands	r3, r2
 800555e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005560:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_DMA_Init+0x168>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556c:	f003 031c 	and.w	r3, r3, #28
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	491d      	ldr	r1, [pc, #116]	; (80055ec <HAL_DMA_Init+0x168>)
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]
 800557a:	e019      	b.n	80055b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <HAL_DMA_Init+0x16c>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	f003 031c 	and.w	r3, r3, #28
 8005588:	210f      	movs	r1, #15
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	4917      	ldr	r1, [pc, #92]	; (80055f0 <HAL_DMA_Init+0x16c>)
 8005592:	4013      	ands	r3, r2
 8005594:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_DMA_Init+0x16c>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f003 031c 	and.w	r3, r3, #28
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	4911      	ldr	r1, [pc, #68]	; (80055f0 <HAL_DMA_Init+0x16c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40020407 	.word	0x40020407
 80055d8:	bffdfff8 	.word	0xbffdfff8
 80055dc:	cccccccd 	.word	0xcccccccd
 80055e0:	40020000 	.word	0x40020000
 80055e4:	bffdfbf8 	.word	0xbffdfbf8
 80055e8:	40020400 	.word	0x40020400
 80055ec:	400200a8 	.word	0x400200a8
 80055f0:	400204a8 	.word	0x400204a8

080055f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_DMA_Start_IT+0x20>
 8005610:	2302      	movs	r3, #2
 8005612:	e04b      	b.n	80056ac <HAL_DMA_Start_IT+0xb8>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d13a      	bne.n	800569e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f96d 	bl	800592c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 020e 	orr.w	r2, r2, #14
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e00f      	b.n	800568c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0204 	bic.w	r2, r2, #4
 800567a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 020a 	orr.w	r2, r2, #10
 800568a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e005      	b.n	80056aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80056a6:	2302      	movs	r3, #2
 80056a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d008      	beq.n	80056de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2204      	movs	r2, #4
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e022      	b.n	8005724 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 020e 	bic.w	r2, r2, #14
 80056ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0201 	bic.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f003 021c 	and.w	r2, r3, #28
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f202 	lsl.w	r2, r1, r2
 8005710:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d005      	beq.n	8005754 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2204      	movs	r2, #4
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	e029      	b.n	80057a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 020e 	bic.w	r2, r2, #14
 8005762:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	f003 021c 	and.w	r2, r3, #28
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
    }
  }
  return status;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f003 031c 	and.w	r3, r3, #28
 80057d2:	2204      	movs	r2, #4
 80057d4:	409a      	lsls	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d026      	beq.n	800582c <HAL_DMA_IRQHandler+0x7a>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d021      	beq.n	800582c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0204 	bic.w	r2, r2, #4
 8005804:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	f003 021c 	and.w	r2, r3, #28
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	2104      	movs	r1, #4
 8005814:	fa01 f202 	lsl.w	r2, r1, r2
 8005818:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	2b00      	cmp	r3, #0
 8005820:	d071      	beq.n	8005906 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800582a:	e06c      	b.n	8005906 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f003 031c 	and.w	r3, r3, #28
 8005834:	2202      	movs	r2, #2
 8005836:	409a      	lsls	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02e      	beq.n	800589e <HAL_DMA_IRQHandler+0xec>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d029      	beq.n	800589e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 020a 	bic.w	r2, r2, #10
 8005866:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	f003 021c 	and.w	r2, r3, #28
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	2102      	movs	r1, #2
 800587e:	fa01 f202 	lsl.w	r2, r1, r2
 8005882:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d038      	beq.n	8005906 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800589c:	e033      	b.n	8005906 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	f003 031c 	and.w	r3, r3, #28
 80058a6:	2208      	movs	r2, #8
 80058a8:	409a      	lsls	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02a      	beq.n	8005908 <HAL_DMA_IRQHandler+0x156>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d025      	beq.n	8005908 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 020e 	bic.w	r2, r2, #14
 80058ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d0:	f003 021c 	and.w	r2, r3, #28
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f202 	lsl.w	r2, r1, r2
 80058de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005906:	bf00      	nop
 8005908:	bf00      	nop
}
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800591e:	b2db      	uxtb	r3, r3
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	f003 021c 	and.w	r2, r3, #28
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2101      	movs	r1, #1
 8005948:	fa01 f202 	lsl.w	r2, r1, r2
 800594c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b10      	cmp	r3, #16
 800595c:	d108      	bne.n	8005970 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800596e:	e007      	b.n	8005980 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800599a:	e148      	b.n	8005c2e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2101      	movs	r1, #1
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	4013      	ands	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 813a 	beq.w	8005c28 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d00b      	beq.n	80059d4 <HAL_GPIO_Init+0x48>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d007      	beq.n	80059d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059c8:	2b11      	cmp	r3, #17
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b12      	cmp	r3, #18
 80059d2:	d130      	bne.n	8005a36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	2203      	movs	r2, #3
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	f003 0201 	and.w	r2, r3, #1
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	2203      	movs	r2, #3
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43db      	mvns	r3, r3
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d003      	beq.n	8005a76 <HAL_GPIO_Init+0xea>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b12      	cmp	r3, #18
 8005a74:	d123      	bne.n	8005abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	220f      	movs	r2, #15
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4013      	ands	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	08da      	lsrs	r2, r3, #3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3208      	adds	r2, #8
 8005ab8:	6939      	ldr	r1, [r7, #16]
 8005aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	2203      	movs	r2, #3
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0203 	and.w	r2, r3, #3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8094 	beq.w	8005c28 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b00:	4b52      	ldr	r3, [pc, #328]	; (8005c4c <HAL_GPIO_Init+0x2c0>)
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	4a51      	ldr	r2, [pc, #324]	; (8005c4c <HAL_GPIO_Init+0x2c0>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	6613      	str	r3, [r2, #96]	; 0x60
 8005b0c:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <HAL_GPIO_Init+0x2c0>)
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005b18:	4a4d      	ldr	r2, [pc, #308]	; (8005c50 <HAL_GPIO_Init+0x2c4>)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	089b      	lsrs	r3, r3, #2
 8005b1e:	3302      	adds	r3, #2
 8005b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	220f      	movs	r2, #15
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b42:	d00d      	beq.n	8005b60 <HAL_GPIO_Init+0x1d4>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a43      	ldr	r2, [pc, #268]	; (8005c54 <HAL_GPIO_Init+0x2c8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <HAL_GPIO_Init+0x1d0>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a42      	ldr	r2, [pc, #264]	; (8005c58 <HAL_GPIO_Init+0x2cc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <HAL_GPIO_Init+0x1cc>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e004      	b.n	8005b62 <HAL_GPIO_Init+0x1d6>
 8005b58:	2307      	movs	r3, #7
 8005b5a:	e002      	b.n	8005b62 <HAL_GPIO_Init+0x1d6>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_GPIO_Init+0x1d6>
 8005b60:	2300      	movs	r3, #0
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	f002 0203 	and.w	r2, r2, #3
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	4093      	lsls	r3, r2
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b72:	4937      	ldr	r1, [pc, #220]	; (8005c50 <HAL_GPIO_Init+0x2c4>)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ba4:	4a2d      	ldr	r2, [pc, #180]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bce:	4a23      	ldr	r2, [pc, #140]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bd4:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4013      	ands	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bf8:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bfe:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	43db      	mvns	r3, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c22:	4a0e      	ldr	r2, [pc, #56]	; (8005c5c <HAL_GPIO_Init+0x2d0>)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f47f aeaf 	bne.w	800599c <HAL_GPIO_Init+0x10>
  }
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	40010000 	.word	0x40010000
 8005c54:	48000400 	.word	0x48000400
 8005c58:	48000800 	.word	0x48000800
 8005c5c:	40010400 	.word	0x40010400

08005c60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005c6e:	e0ab      	b.n	8005dc8 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005c70:	2201      	movs	r2, #1
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 809e 	beq.w	8005dc2 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005c86:	4a57      	ldr	r2, [pc, #348]	; (8005de4 <HAL_GPIO_DeInit+0x184>)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	220f      	movs	r2, #15
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cae:	d00d      	beq.n	8005ccc <HAL_GPIO_DeInit+0x6c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a4d      	ldr	r2, [pc, #308]	; (8005de8 <HAL_GPIO_DeInit+0x188>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <HAL_GPIO_DeInit+0x68>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a4c      	ldr	r2, [pc, #304]	; (8005dec <HAL_GPIO_DeInit+0x18c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_GPIO_DeInit+0x64>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e004      	b.n	8005cce <HAL_GPIO_DeInit+0x6e>
 8005cc4:	2307      	movs	r3, #7
 8005cc6:	e002      	b.n	8005cce <HAL_GPIO_DeInit+0x6e>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_GPIO_DeInit+0x6e>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	f002 0203 	and.w	r2, r2, #3
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	4093      	lsls	r3, r2
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d132      	bne.n	8005d44 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005cde:	4b44      	ldr	r3, [pc, #272]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	4942      	ldr	r1, [pc, #264]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005cec:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	493e      	ldr	r1, [pc, #248]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005cfa:	4b3d      	ldr	r3, [pc, #244]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	493b      	ldr	r1, [pc, #236]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005d08:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	4937      	ldr	r1, [pc, #220]	; (8005df0 <HAL_GPIO_DeInit+0x190>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	220f      	movs	r2, #15
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005d26:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <HAL_GPIO_DeInit+0x184>)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	43da      	mvns	r2, r3
 8005d36:	482b      	ldr	r0, [pc, #172]	; (8005de4 <HAL_GPIO_DeInit+0x184>)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	3302      	adds	r3, #2
 8005d40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2103      	movs	r1, #3
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	08da      	lsrs	r2, r3, #3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3208      	adds	r2, #8
 8005d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	08d2      	lsrs	r2, r2, #3
 8005d78:	4019      	ands	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3208      	adds	r2, #8
 8005d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	2103      	movs	r1, #3
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af4d 	bne.w	8005c70 <HAL_GPIO_DeInit+0x10>
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	40010000 	.word	0x40010000
 8005de8:	48000400 	.word	0x48000400
 8005dec:	48000800 	.word	0x48000800
 8005df0:	40010400 	.word	0x40010400

08005df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	887b      	ldrh	r3, [r7, #2]
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	73fb      	strb	r3, [r7, #15]
 8005e10:	e001      	b.n	8005e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
 8005e30:	4613      	mov	r3, r2
 8005e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e34:	787b      	ldrb	r3, [r7, #1]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e3a:	887a      	ldrh	r2, [r7, #2]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e40:	e002      	b.n	8005e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e42:	887a      	ldrh	r2, [r7, #2]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e081      	b.n	8005f6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fb fa54 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	e006      	b.n	8005edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d104      	bne.n	8005eee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	ea42 0103 	orr.w	r1, r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	460b      	mov	r3, r1
 8005f82:	817b      	strh	r3, [r7, #10]
 8005f84:	4613      	mov	r3, r2
 8005f86:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d153      	bne.n	800603c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa2:	d101      	bne.n	8005fa8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e04a      	b.n	800603e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_I2C_Master_Transmit_IT+0x42>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e043      	b.n	800603e <HAL_I2C_Master_Transmit_IT+0xca>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2221      	movs	r2, #33	; 0x21
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2210      	movs	r2, #16
 8005fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	893a      	ldrh	r2, [r7, #8]
 8005fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8005fea:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2bff      	cmp	r3, #255	; 0xff
 8005ff4:	d906      	bls.n	8006004 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	22ff      	movs	r2, #255	; 0xff
 8005ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e007      	b.n	8006014 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800600e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006012:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006018:	b2da      	uxtb	r2, r3
 800601a:	8979      	ldrh	r1, [r7, #10]
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fadc 	bl	80075e0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006030:	2101      	movs	r1, #1
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f001 fb02 	bl	800763c <I2C_Enable_IRQ>

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	ffff0000 	.word	0xffff0000
 800604c:	0800645d 	.word	0x0800645d
 8006050:	80002000 	.word	0x80002000

08006054 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	460b      	mov	r3, r1
 8006062:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b20      	cmp	r3, #32
 8006072:	f040 80f1 	bne.w	8006258 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006084:	d101      	bne.n	800608a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
 8006088:	e0e7      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_I2C_IsDeviceReady+0x44>
 8006094:	2302      	movs	r3, #2
 8006096:	e0e0      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2224      	movs	r2, #36	; 0x24
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <HAL_I2C_IsDeviceReady+0x72>
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060c4:	e004      	b.n	80060d0 <HAL_I2C_IsDeviceReady+0x7c>
 80060c6:	897b      	ldrh	r3, [r7, #10]
 80060c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060cc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80060d6:	f7fd fc4f 	bl	8003978 <HAL_GetTick>
 80060da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	bf0c      	ite	eq
 80060ea:	2301      	moveq	r3, #1
 80060ec:	2300      	movne	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006108:	e034      	b.n	8006174 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d01a      	beq.n	8006148 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006112:	f7fd fc31 	bl	8003978 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d302      	bcc.n	8006128 <HAL_I2C_IsDeviceReady+0xd4>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10f      	bne.n	8006148 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e088      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b20      	cmp	r3, #32
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b10      	cmp	r3, #16
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006174:	7ffb      	ldrb	r3, [r7, #31]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <HAL_I2C_IsDeviceReady+0x12c>
 800617a:	7fbb      	ldrb	r3, [r7, #30]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0c4      	beq.n	800610a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b10      	cmp	r3, #16
 800618c:	d01a      	beq.n	80061c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2200      	movs	r2, #0
 8006196:	2120      	movs	r1, #32
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 f9e0 	bl	800755e <I2C_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e058      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2220      	movs	r2, #32
 80061ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e04a      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2120      	movs	r1, #32
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 f9c5 	bl	800755e <I2C_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e03d      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2210      	movs	r2, #16
 80061e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2220      	movs	r2, #32
 80061ec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d118      	bne.n	8006228 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006204:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2200      	movs	r2, #0
 800620e:	2120      	movs	r1, #32
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 f9a4 	bl	800755e <I2C_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e01c      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2220      	movs	r2, #32
 8006226:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	3301      	adds	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	f63f af3b 	bhi.w	80060ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	68f9      	ldr	r1, [r7, #12]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	4798      	blx	r3
  }
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d010      	beq.n	80062dc <HAL_I2C_ER_IRQHandler+0x46>
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f043 0201 	orr.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	0a9b      	lsrs	r3, r3, #10
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <HAL_I2C_ER_IRQHandler+0x74>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	f043 0208 	orr.w	r2, r3, #8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006308:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	0a5b      	lsrs	r3, r3, #9
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <HAL_I2C_ER_IRQHandler+0xa2>
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	09db      	lsrs	r3, r3, #7
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	f043 0202 	orr.w	r2, r3, #2
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006336:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 030b 	and.w	r3, r3, #11
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006348:	68f9      	ldr	r1, [r7, #12]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ffce 	bl	80072ec <I2C_ITError>
  }
}
 8006350:	bf00      	nop
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
 80063b4:	4613      	mov	r3, r2
 80063b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006436:	b2db      	uxtb	r3, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <I2C_Master_ISR_IT+0x1e>
 8006476:	2302      	movs	r3, #2
 8006478:	e114      	b.n	80066a4 <I2C_Master_ISR_IT+0x248>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	091b      	lsrs	r3, r3, #4
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d013      	beq.n	80064b6 <I2C_Master_ISR_IT+0x5a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	091b      	lsrs	r3, r3, #4
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2210      	movs	r2, #16
 80064a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	f043 0204 	orr.w	r2, r3, #4
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f001 f813 	bl	80074da <I2C_Flush_TXDR>
 80064b4:	e0e1      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d023      	beq.n	800650a <I2C_Master_ISR_IT+0xae>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	089b      	lsrs	r3, r3, #2
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01d      	beq.n	800650a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006508:	e0b7      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01e      	beq.n	8006554 <I2C_Master_ISR_IT+0xf8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d018      	beq.n	8006554 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006552:	e092      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	09db      	lsrs	r3, r3, #7
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05d      	beq.n	800661c <I2C_Master_ISR_IT+0x1c0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	099b      	lsrs	r3, r3, #6
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d057      	beq.n	800661c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d040      	beq.n	80065f8 <I2C_Master_ISR_IT+0x19c>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d13c      	bne.n	80065f8 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800658a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2bff      	cmp	r3, #255	; 0xff
 8006594:	d90e      	bls.n	80065b4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	8a79      	ldrh	r1, [r7, #18]
 80065a4:	2300      	movs	r3, #0
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f001 f817 	bl	80075e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b2:	e032      	b.n	800661a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065c6:	d00b      	beq.n	80065e0 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	8a79      	ldrh	r1, [r7, #18]
 80065d4:	2000      	movs	r0, #0
 80065d6:	9000      	str	r0, [sp, #0]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f001 f801 	bl	80075e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065de:	e01c      	b.n	800661a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	8a79      	ldrh	r1, [r7, #18]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fff5 	bl	80075e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f6:	e010      	b.n	800661a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006606:	d003      	beq.n	8006610 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fba9 	bl	8006d60 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800660e:	e034      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fe6a 	bl	80072ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006618:	e02f      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
 800661a:	e02e      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	099b      	lsrs	r3, r3, #6
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d028      	beq.n	800667a <I2C_Master_ISR_IT+0x21e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d022      	beq.n	800667a <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d119      	bne.n	8006672 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800664c:	d015      	beq.n	800667a <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006656:	d108      	bne.n	800666a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	e007      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fb78 	bl	8006d60 <I2C_ITMasterSeqCplt>
 8006670:	e003      	b.n	800667a <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fe39 	bl	80072ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <I2C_Master_ISR_IT+0x23e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fbff 	bl	8006e98 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <I2C_Slave_ISR_IT+0x24>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0ec      	b.n	80068aa <I2C_Slave_ISR_IT+0x1fe>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d009      	beq.n	80066f8 <I2C_Slave_ISR_IT+0x4c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80066f0:	6939      	ldr	r1, [r7, #16]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fc9a 	bl	800702c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d04d      	beq.n	80067a0 <I2C_Slave_ISR_IT+0xf4>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d047      	beq.n	80067a0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d128      	bne.n	800676c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b28      	cmp	r3, #40	; 0x28
 8006724:	d108      	bne.n	8006738 <I2C_Slave_ISR_IT+0x8c>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800672c:	d104      	bne.n	8006738 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800672e:	6939      	ldr	r1, [r7, #16]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fd85 	bl	8007240 <I2C_ITListenCplt>
 8006736:	e032      	b.n	800679e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b29      	cmp	r3, #41	; 0x29
 8006742:	d10e      	bne.n	8006762 <I2C_Slave_ISR_IT+0xb6>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800674a:	d00a      	beq.n	8006762 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2210      	movs	r2, #16
 8006752:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fec0 	bl	80074da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fb3d 	bl	8006dda <I2C_ITSlaveSeqCplt>
 8006760:	e01d      	b.n	800679e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2210      	movs	r2, #16
 8006768:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800676a:	e096      	b.n	800689a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2210      	movs	r2, #16
 8006772:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	f043 0204 	orr.w	r2, r3, #4
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <I2C_Slave_ISR_IT+0xe4>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800678c:	f040 8085 	bne.w	800689a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	4619      	mov	r1, r3
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fda8 	bl	80072ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800679c:	e07d      	b.n	800689a <I2C_Slave_ISR_IT+0x1ee>
 800679e:	e07c      	b.n	800689a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d030      	beq.n	800680e <I2C_Slave_ISR_IT+0x162>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	089b      	lsrs	r3, r3, #2
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02a      	beq.n	800680e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d018      	beq.n	80067f4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d14f      	bne.n	800689e <I2C_Slave_ISR_IT+0x1f2>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006804:	d04b      	beq.n	800689e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fae7 	bl	8006dda <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800680c:	e047      	b.n	800689e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	08db      	lsrs	r3, r3, #3
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	08db      	lsrs	r3, r3, #3
 800681e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006826:	6939      	ldr	r1, [r7, #16]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fa15 	bl	8006c58 <I2C_ITAddrCplt>
 800682e:	e037      	b.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d031      	beq.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d02b      	beq.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	851a      	strh	r2, [r3, #40]	; 0x28
 8006882:	e00d      	b.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800688a:	d002      	beq.n	8006892 <I2C_Slave_ISR_IT+0x1e6>
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 faa1 	bl	8006dda <I2C_ITSlaveSeqCplt>
 8006898:	e002      	b.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800689e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b088      	sub	sp, #32
 80068b6:	af02      	add	r7, sp, #8
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <I2C_Master_ISR_DMA+0x1a>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e0e1      	b.n	8006a90 <I2C_Master_ISR_DMA+0x1de>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <I2C_Master_ISR_DMA+0x5e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	091b      	lsrs	r3, r3, #4
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d011      	beq.n	8006910 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2210      	movs	r2, #16
 80068f2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	f043 0204 	orr.w	r2, r3, #4
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006900:	2120      	movs	r1, #32
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fe9a 	bl	800763c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fde6 	bl	80074da <I2C_Flush_TXDR>
 800690e:	e0ba      	b.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d072      	beq.n	8006a02 <I2C_Master_ISR_DMA+0x150>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	099b      	lsrs	r3, r3, #6
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d06c      	beq.n	8006a02 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006936:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d04e      	beq.n	80069e0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800694e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	2bff      	cmp	r3, #255	; 0xff
 8006958:	d906      	bls.n	8006968 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	22ff      	movs	r2, #255	; 0xff
 800695e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e010      	b.n	800698a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800697a:	d003      	beq.n	8006984 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e002      	b.n	800698a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006988:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698e:	b2da      	uxtb	r2, r3
 8006990:	8a79      	ldrh	r1, [r7, #18]
 8006992:	2300      	movs	r3, #0
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fe21 	bl	80075e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b22      	cmp	r3, #34	; 0x22
 80069ba:	d108      	bne.n	80069ce <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069cc:	e05b      	b.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069de:	e052      	b.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ee:	d003      	beq.n	80069f8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f9b5 	bl	8006d60 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80069f6:	e046      	b.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069f8:	2140      	movs	r1, #64	; 0x40
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fc76 	bl	80072ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a00:	e041      	b.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d029      	beq.n	8006a62 <I2C_Master_ISR_DMA+0x1b0>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	099b      	lsrs	r3, r3, #6
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d023      	beq.n	8006a62 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d119      	bne.n	8006a58 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a32:	d027      	beq.n	8006a84 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a3c:	d108      	bne.n	8006a50 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a4c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a4e:	e019      	b.n	8006a84 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f985 	bl	8006d60 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a56:	e015      	b.n	8006a84 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a58:	2140      	movs	r1, #64	; 0x40
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fc46 	bl	80072ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a60:	e010      	b.n	8006a84 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fa0b 	bl	8006e98 <I2C_ITMasterCplt>
 8006a82:	e000      	b.n	8006a86 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006a84:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <I2C_Slave_ISR_DMA+0x24>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e0c9      	b.n	8006c50 <I2C_Slave_ISR_DMA+0x1b8>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d009      	beq.n	8006ae4 <I2C_Slave_ISR_DMA+0x4c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 faa4 	bl	800702c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 809a 	beq.w	8006c26 <I2C_Slave_ISR_DMA+0x18e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8093 	beq.w	8006c26 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	0b9b      	lsrs	r3, r3, #14
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0bdb      	lsrs	r3, r3, #15
 8006b10:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d07f      	beq.n	8006c18 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00d      	beq.n	8006b3c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0bdb      	lsrs	r3, r3, #15
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0b9b      	lsrs	r3, r3, #14
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d128      	bne.n	8006bb8 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b28      	cmp	r3, #40	; 0x28
 8006b70:	d108      	bne.n	8006b84 <I2C_Slave_ISR_DMA+0xec>
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b78:	d104      	bne.n	8006b84 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fb5f 	bl	8007240 <I2C_ITListenCplt>
 8006b82:	e048      	b.n	8006c16 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b29      	cmp	r3, #41	; 0x29
 8006b8e:	d10e      	bne.n	8006bae <I2C_Slave_ISR_DMA+0x116>
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b96:	d00a      	beq.n	8006bae <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fc9a 	bl	80074da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f917 	bl	8006dda <I2C_ITSlaveSeqCplt>
 8006bac:	e033      	b.n	8006c16 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2210      	movs	r2, #16
 8006bb4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006bb6:	e034      	b.n	8006c22 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc4:	f043 0204 	orr.w	r2, r3, #4
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <I2C_Slave_ISR_DMA+0x14a>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006be0:	d11f      	bne.n	8006c22 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	2b21      	cmp	r3, #33	; 0x21
 8006be6:	d002      	beq.n	8006bee <I2C_Slave_ISR_DMA+0x156>
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b29      	cmp	r3, #41	; 0x29
 8006bec:	d103      	bne.n	8006bf6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2221      	movs	r2, #33	; 0x21
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8006bf4:	e008      	b.n	8006c08 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	2b22      	cmp	r3, #34	; 0x22
 8006bfa:	d002      	beq.n	8006c02 <I2C_Slave_ISR_DMA+0x16a>
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006c00:	d102      	bne.n	8006c08 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2222      	movs	r2, #34	; 0x22
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fb6c 	bl	80072ec <I2C_ITError>
      if (treatdmanack == 1U)
 8006c14:	e005      	b.n	8006c22 <I2C_Slave_ISR_DMA+0x18a>
 8006c16:	e004      	b.n	8006c22 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c20:	e011      	b.n	8006c46 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8006c22:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c24:	e00f      	b.n	8006c46 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <I2C_Slave_ISR_DMA+0x1ae>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f809 	bl	8006c58 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c6e:	2b28      	cmp	r3, #40	; 0x28
 8006c70:	d16a      	bne.n	8006d48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	0c1b      	lsrs	r3, r3, #16
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006c90:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c9e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006cac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d138      	bne.n	8006d28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	89bb      	ldrh	r3, [r7, #12]
 8006cbe:	4053      	eors	r3, r2
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f003 0306 	and.w	r3, r3, #6
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d11c      	bne.n	8006d04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006cca:	897b      	ldrh	r3, [r7, #10]
 8006ccc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d13b      	bne.n	8006d58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2208      	movs	r2, #8
 8006cec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006cf6:	89ba      	ldrh	r2, [r7, #12]
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fb53 	bl	80063a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d02:	e029      	b.n	8006d58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006d04:	893b      	ldrh	r3, [r7, #8]
 8006d06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fcf9 	bl	8007704 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d1a:	89ba      	ldrh	r2, [r7, #12]
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff fb41 	bl	80063a8 <HAL_I2C_AddrCallback>
}
 8006d26:	e017      	b.n	8006d58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fce9 	bl	8007704 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d3a:	89ba      	ldrh	r2, [r7, #12]
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fb31 	bl	80063a8 <HAL_I2C_AddrCallback>
}
 8006d46:	e007      	b.n	8006d58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b21      	cmp	r3, #33	; 0x21
 8006d7a:	d115      	bne.n	8006da8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2211      	movs	r2, #17
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d90:	2101      	movs	r1, #1
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fcb6 	bl	8007704 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fad9 	bl	8006358 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006da6:	e014      	b.n	8006dd2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2212      	movs	r2, #18
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006dbc:	2102      	movs	r1, #2
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fca0 	bl	8007704 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff facd 	bl	800636c <HAL_I2C_MasterRxCpltCallback>
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	0b9b      	lsrs	r3, r3, #14
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e00d      	b.n	8006e2c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	0bdb      	lsrs	r3, r3, #15
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e2a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b29      	cmp	r3, #41	; 0x29
 8006e36:	d112      	bne.n	8006e5e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2228      	movs	r2, #40	; 0x28
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2221      	movs	r2, #33	; 0x21
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc5b 	bl	8007704 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fa92 	bl	8006380 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e5c:	e017      	b.n	8006e8e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b2a      	cmp	r3, #42	; 0x2a
 8006e68:	d111      	bne.n	8006e8e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2228      	movs	r2, #40	; 0x28
 8006e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2222      	movs	r2, #34	; 0x22
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e78:	2102      	movs	r1, #2
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fc42 	bl	8007704 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff fa83 	bl	8006394 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b21      	cmp	r3, #33	; 0x21
 8006eb8:	d107      	bne.n	8006eca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006eba:	2101      	movs	r1, #1
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fc21 	bl	8007704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2211      	movs	r2, #17
 8006ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec8:	e00c      	b.n	8006ee4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b22      	cmp	r3, #34	; 0x22
 8006ed4:	d106      	bne.n	8006ee4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fc13 	bl	8007704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2212      	movs	r2, #18
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6859      	ldr	r1, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b4d      	ldr	r3, [pc, #308]	; (8007024 <I2C_ITMasterCplt+0x18c>)
 8006ef0:	400b      	ands	r3, r1
 8006ef2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a4a      	ldr	r2, [pc, #296]	; (8007028 <I2C_ITMasterCplt+0x190>)
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d009      	beq.n	8006f20 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2210      	movs	r2, #16
 8006f12:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f18:	f043 0204 	orr.w	r2, r3, #4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b60      	cmp	r3, #96	; 0x60
 8006f2a:	d10b      	bne.n	8006f44 <I2C_ITMasterCplt+0xac>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	089b      	lsrs	r3, r3, #2
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006f42:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fac8 	bl	80074da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b60      	cmp	r3, #96	; 0x60
 8006f5a:	d002      	beq.n	8006f62 <I2C_ITMasterCplt+0xca>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d006      	beq.n	8006f70 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9bf 	bl	80072ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f6e:	e054      	b.n	800701a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b21      	cmp	r3, #33	; 0x21
 8006f7a:	d124      	bne.n	8006fc6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d10b      	bne.n	8006fae <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fa16 	bl	80063d8 <HAL_I2C_MemTxCpltCallback>
}
 8006fac:	e035      	b.n	800701a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff f9ca 	bl	8006358 <HAL_I2C_MasterTxCpltCallback>
}
 8006fc4:	e029      	b.n	800701a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b22      	cmp	r3, #34	; 0x22
 8006fd0:	d123      	bne.n	800701a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d10b      	bne.n	8007004 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff f9f5 	bl	80063ec <HAL_I2C_MemRxCpltCallback>
}
 8007002:	e00a      	b.n	800701a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff f9a9 	bl	800636c <HAL_I2C_MasterRxCpltCallback>
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	fe00e800 	.word	0xfe00e800
 8007028:	ffff0000 	.word	0xffff0000

0800702c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007048:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2220      	movs	r2, #32
 8007050:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b21      	cmp	r3, #33	; 0x21
 8007056:	d002      	beq.n	800705e <I2C_ITSlaveCplt+0x32>
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b29      	cmp	r3, #41	; 0x29
 800705c:	d108      	bne.n	8007070 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800705e:	f248 0101 	movw	r1, #32769	; 0x8001
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fb4e 	bl	8007704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2221      	movs	r2, #33	; 0x21
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
 800706e:	e00d      	b.n	800708c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2b22      	cmp	r3, #34	; 0x22
 8007074:	d002      	beq.n	800707c <I2C_ITSlaveCplt+0x50>
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b2a      	cmp	r3, #42	; 0x2a
 800707a:	d107      	bne.n	800708c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800707c:	f248 0102 	movw	r1, #32770	; 0x8002
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb3f 	bl	8007704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2222      	movs	r2, #34	; 0x22
 800708a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800709a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b64      	ldr	r3, [pc, #400]	; (8007238 <I2C_ITSlaveCplt+0x20c>)
 80070a8:	400b      	ands	r3, r1
 80070aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa14 	bl	80074da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	0b9b      	lsrs	r3, r3, #14
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d013      	beq.n	80070e6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d020      	beq.n	8007118 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070e4:	e018      	b.n	8007118 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	0bdb      	lsrs	r3, r3, #15
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d012      	beq.n	8007118 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007100:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d006      	beq.n	8007118 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	089b      	lsrs	r3, r3, #2
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d020      	beq.n	8007166 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f023 0304 	bic.w	r3, r3, #4
 800712a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007174:	f043 0204 	orr.w	r2, r3, #4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	2b00      	cmp	r3, #0
 8007190:	d010      	beq.n	80071b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f8a7 	bl	80072ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b28      	cmp	r3, #40	; 0x28
 80071a8:	d141      	bne.n	800722e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f847 	bl	8007240 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071b2:	e03c      	b.n	800722e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071bc:	d014      	beq.n	80071e8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff fe0b 	bl	8006dda <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1d      	ldr	r2, [pc, #116]	; (800723c <I2C_ITSlaveCplt+0x210>)
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff f8ef 	bl	80063c4 <HAL_I2C_ListenCpltCallback>
}
 80071e6:	e022      	b.n	800722e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b22      	cmp	r3, #34	; 0x22
 80071f2:	d10e      	bne.n	8007212 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff f8c2 	bl	8006394 <HAL_I2C_SlaveRxCpltCallback>
}
 8007210:	e00d      	b.n	800722e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff f8a9 	bl	8006380 <HAL_I2C_SlaveTxCpltCallback>
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	fe00e800 	.word	0xfe00e800
 800723c:	ffff0000 	.word	0xffff0000

08007240 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a26      	ldr	r2, [pc, #152]	; (80072e8 <I2C_ITListenCplt+0xa8>)
 800724e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	089b      	lsrs	r3, r3, #2
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d022      	beq.n	80072be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007294:	2b00      	cmp	r3, #0
 8007296:	d012      	beq.n	80072be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729c:	3b01      	subs	r3, #1
 800729e:	b29a      	uxth	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	f043 0204 	orr.w	r2, r3, #4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80072be:	f248 0103 	movw	r1, #32771	; 0x8003
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa1e 	bl	8007704 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2210      	movs	r2, #16
 80072ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff f873 	bl	80063c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	ffff0000 	.word	0xffff0000

080072ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a5d      	ldr	r2, [pc, #372]	; (8007480 <I2C_ITError+0x194>)
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b28      	cmp	r3, #40	; 0x28
 8007322:	d005      	beq.n	8007330 <I2C_ITError+0x44>
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2b29      	cmp	r3, #41	; 0x29
 8007328:	d002      	beq.n	8007330 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b2a      	cmp	r3, #42	; 0x2a
 800732e:	d10b      	bne.n	8007348 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007330:	2103      	movs	r1, #3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9e6 	bl	8007704 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2228      	movs	r2, #40	; 0x28
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a50      	ldr	r2, [pc, #320]	; (8007484 <I2C_ITError+0x198>)
 8007344:	635a      	str	r2, [r3, #52]	; 0x34
 8007346:	e011      	b.n	800736c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007348:	f248 0103 	movw	r1, #32771	; 0x8003
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f9d9 	bl	8007704 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b60      	cmp	r3, #96	; 0x60
 800735c:	d003      	beq.n	8007366 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007370:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	2b00      	cmp	r3, #0
 8007378:	d039      	beq.n	80073ee <I2C_ITError+0x102>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b11      	cmp	r3, #17
 800737e:	d002      	beq.n	8007386 <I2C_ITError+0x9a>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b21      	cmp	r3, #33	; 0x21
 8007384:	d133      	bne.n	80073ee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007394:	d107      	bne.n	80073a6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fab0 	bl	8005910 <HAL_DMA_GetState>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d017      	beq.n	80073e6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	4a33      	ldr	r2, [pc, #204]	; (8007488 <I2C_ITError+0x19c>)
 80073bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe f9b0 	bl	8005730 <HAL_DMA_Abort_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d04d      	beq.n	8007472 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073e4:	e045      	b.n	8007472 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f850 	bl	800748c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073ec:	e041      	b.n	8007472 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d039      	beq.n	800746a <I2C_ITError+0x17e>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b12      	cmp	r3, #18
 80073fa:	d002      	beq.n	8007402 <I2C_ITError+0x116>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b22      	cmp	r3, #34	; 0x22
 8007400:	d133      	bne.n	800746a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800740c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007410:	d107      	bne.n	8007422 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007420:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fa72 	bl	8005910 <HAL_DMA_GetState>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d017      	beq.n	8007462 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007436:	4a14      	ldr	r2, [pc, #80]	; (8007488 <I2C_ITError+0x19c>)
 8007438:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe f972 	bl	8005730 <HAL_DMA_Abort_IT>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d011      	beq.n	8007476 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007460:	e009      	b.n	8007476 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f812 	bl	800748c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007468:	e005      	b.n	8007476 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f80e 	bl	800748c <I2C_TreatErrorCallback>
  }
}
 8007470:	e002      	b.n	8007478 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007472:	bf00      	nop
 8007474:	e000      	b.n	8007478 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007476:	bf00      	nop
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	ffff0000 	.word	0xffff0000
 8007484:	080066ad 	.word	0x080066ad
 8007488:	08007523 	.word	0x08007523

0800748c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b60      	cmp	r3, #96	; 0x60
 800749e:	d10e      	bne.n	80074be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fe ffac 	bl	8006414 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074bc:	e009      	b.n	80074d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ff97 	bl	8006400 <HAL_I2C_ErrorCallback>
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d103      	bne.n	80074f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b01      	cmp	r3, #1
 8007504:	d007      	beq.n	8007516 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0201 	orr.w	r2, r2, #1
 8007514:	619a      	str	r2, [r3, #24]
  }
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	2200      	movs	r2, #0
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	2200      	movs	r2, #0
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff ff9b 	bl	800748c <I2C_TreatErrorCallback>
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	603b      	str	r3, [r7, #0]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800756e:	e022      	b.n	80075b6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d01e      	beq.n	80075b6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007578:	f7fc f9fe 	bl	8003978 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d302      	bcc.n	800758e <I2C_WaitOnFlagUntilTimeout+0x30>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d113      	bne.n	80075b6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e00f      	b.n	80075d6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4013      	ands	r3, r2
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	bf0c      	ite	eq
 80075c6:	2301      	moveq	r3, #1
 80075c8:	2300      	movne	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d0cd      	beq.n	8007570 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	817b      	strh	r3, [r7, #10]
 80075ee:	4613      	mov	r3, r2
 80075f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	0d5b      	lsrs	r3, r3, #21
 80075fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <I2C_TransferConfig+0x58>)
 8007602:	430b      	orrs	r3, r1
 8007604:	43db      	mvns	r3, r3
 8007606:	ea02 0103 	and.w	r1, r2, r3
 800760a:	897b      	ldrh	r3, [r7, #10]
 800760c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007610:	7a7b      	ldrb	r3, [r7, #9]
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	431a      	orrs	r2, r3
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	03ff63ff 	.word	0x03ff63ff

0800763c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007650:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <I2C_Enable_IRQ+0xc0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d004      	beq.n	8007660 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800765a:	4a29      	ldr	r2, [pc, #164]	; (8007700 <I2C_Enable_IRQ+0xc4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d11d      	bne.n	800769c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007664:	2b00      	cmp	r3, #0
 8007666:	da03      	bge.n	8007670 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800766e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007670:	887b      	ldrh	r3, [r7, #2]
 8007672:	2b10      	cmp	r3, #16
 8007674:	d103      	bne.n	800767e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800767c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	2b20      	cmp	r3, #32
 8007682:	d103      	bne.n	800768c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800768a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d125      	bne.n	80076de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007698:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800769a:	e020      	b.n	80076de <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800769c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	da03      	bge.n	80076ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80076aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80076bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80076ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076d0:	887b      	ldrh	r3, [r7, #2]
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d103      	bne.n	80076de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f043 0320 	orr.w	r3, r3, #32
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	601a      	str	r2, [r3, #0]
}
 80076ee:	bf00      	nop
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	080068b3 	.word	0x080068b3
 8007700:	08006a99 	.word	0x08006a99

08007704 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00f      	beq.n	800773e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007724:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007732:	2b28      	cmp	r3, #40	; 0x28
 8007734:	d003      	beq.n	800773e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800773c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00f      	beq.n	8007768 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800774e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800775c:	2b28      	cmp	r3, #40	; 0x28
 800775e:	d003      	beq.n	8007768 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007766:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007768:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800776c:	2b00      	cmp	r3, #0
 800776e:	da03      	bge.n	8007778 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007776:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007778:	887b      	ldrh	r3, [r7, #2]
 800777a:	2b10      	cmp	r3, #16
 800777c:	d103      	bne.n	8007786 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007784:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	2b20      	cmp	r3, #32
 800778a:	d103      	bne.n	8007794 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f043 0320 	orr.w	r3, r3, #32
 8007792:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007794:	887b      	ldrh	r3, [r7, #2]
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d103      	bne.n	80077a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6819      	ldr	r1, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	43da      	mvns	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	400a      	ands	r2, r1
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	d138      	bne.n	8007848 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e032      	b.n	800784a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2224      	movs	r2, #36	; 0x24
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007812:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	e000      	b.n	800784a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
  }
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b20      	cmp	r3, #32
 800786a:	d139      	bne.n	80078e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007872:	2b01      	cmp	r3, #1
 8007874:	d101      	bne.n	800787a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007876:	2302      	movs	r3, #2
 8007878:	e033      	b.n	80078e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2224      	movs	r2, #36	; 0x24
 8007886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e000      	b.n	80078e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078e0:	2302      	movs	r3, #2
  }
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
	...

080078f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a04      	ldr	r2, [pc, #16]	; (800790c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078fe:	6013      	str	r3, [r2, #0]
}
 8007900:	bf00      	nop
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40007000 	.word	0x40007000

08007910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <HAL_PWREx_GetVoltageRange+0x18>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800791c:	4618      	mov	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40007000 	.word	0x40007000

0800792c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793a:	d130      	bne.n	800799e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800793c:	4b23      	ldr	r3, [pc, #140]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007948:	d038      	beq.n	80079bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800794a:	4b20      	ldr	r3, [pc, #128]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007952:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800795a:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2232      	movs	r2, #50	; 0x32
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007966:	fba2 2303 	umull	r2, r3, r2, r3
 800796a:	0c9b      	lsrs	r3, r3, #18
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007970:	e002      	b.n	8007978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3b01      	subs	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007978:	4b14      	ldr	r3, [pc, #80]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007984:	d102      	bne.n	800798c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f2      	bne.n	8007972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007998:	d110      	bne.n	80079bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e00f      	b.n	80079be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079aa:	d007      	beq.n	80079bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80079b4:	4a05      	ldr	r2, [pc, #20]	; (80079cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80079b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40007000 	.word	0x40007000
 80079d0:	20000000 	.word	0x20000000
 80079d4:	431bde83 	.word	0x431bde83

080079d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f000 bc11 	b.w	800820e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079ec:	4ba0      	ldr	r3, [pc, #640]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 030c 	and.w	r3, r3, #12
 80079f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079f6:	4b9e      	ldr	r3, [pc, #632]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80e4 	beq.w	8007bd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <HAL_RCC_OscConfig+0x4c>
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b0c      	cmp	r3, #12
 8007a18:	f040 808b 	bne.w	8007b32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	f040 8087 	bne.w	8007b32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a24:	4b92      	ldr	r3, [pc, #584]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_RCC_OscConfig+0x64>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e3e8      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
 8007a40:	4b8b      	ldr	r3, [pc, #556]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <HAL_RCC_OscConfig+0x7e>
 8007a4c:	4b88      	ldr	r3, [pc, #544]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a54:	e005      	b.n	8007a62 <HAL_RCC_OscConfig+0x8a>
 8007a56:	4b86      	ldr	r3, [pc, #536]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a5c:	091b      	lsrs	r3, r3, #4
 8007a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d223      	bcs.n	8007aae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fdac 	bl	80085c8 <RCC_SetFlashLatencyFromMSIRange>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e3c9      	b.n	800820e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a7a:	4b7d      	ldr	r3, [pc, #500]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a7c      	ldr	r2, [pc, #496]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a80:	f043 0308 	orr.w	r3, r3, #8
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	4b7a      	ldr	r3, [pc, #488]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	4977      	ldr	r1, [pc, #476]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a98:	4b75      	ldr	r3, [pc, #468]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	4972      	ldr	r1, [pc, #456]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	604b      	str	r3, [r1, #4]
 8007aac:	e025      	b.n	8007afa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007aae:	4b70      	ldr	r3, [pc, #448]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a6f      	ldr	r2, [pc, #444]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007ab4:	f043 0308 	orr.w	r3, r3, #8
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	4b6d      	ldr	r3, [pc, #436]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	496a      	ldr	r1, [pc, #424]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007acc:	4b68      	ldr	r3, [pc, #416]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	4965      	ldr	r1, [pc, #404]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fd6c 	bl	80085c8 <RCC_SetFlashLatencyFromMSIRange>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e389      	b.n	800820e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007afa:	f000 fc6f 	bl	80083dc <HAL_RCC_GetSysClockFreq>
 8007afe:	4602      	mov	r2, r0
 8007b00:	4b5b      	ldr	r3, [pc, #364]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	091b      	lsrs	r3, r3, #4
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	495a      	ldr	r1, [pc, #360]	; (8007c74 <HAL_RCC_OscConfig+0x29c>)
 8007b0c:	5ccb      	ldrb	r3, [r1, r3]
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	fa22 f303 	lsr.w	r3, r2, r3
 8007b16:	4a58      	ldr	r2, [pc, #352]	; (8007c78 <HAL_RCC_OscConfig+0x2a0>)
 8007b18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007b1a:	4b58      	ldr	r3, [pc, #352]	; (8007c7c <HAL_RCC_OscConfig+0x2a4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fa f8f6 	bl	8001d10 <HAL_InitTick>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d052      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	e36d      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d032      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007b3a:	4b4d      	ldr	r3, [pc, #308]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a4c      	ldr	r2, [pc, #304]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b46:	f7fb ff17 	bl	8003978 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b4e:	f7fb ff13 	bl	8003978 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e356      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b60:	4b43      	ldr	r3, [pc, #268]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b6c:	4b40      	ldr	r3, [pc, #256]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a3f      	ldr	r2, [pc, #252]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b72:	f043 0308 	orr.w	r3, r3, #8
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	4b3d      	ldr	r3, [pc, #244]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	493a      	ldr	r1, [pc, #232]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b8a:	4b39      	ldr	r3, [pc, #228]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	4935      	ldr	r1, [pc, #212]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	604b      	str	r3, [r1, #4]
 8007b9e:	e01a      	b.n	8007bd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ba0:	4b33      	ldr	r3, [pc, #204]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a32      	ldr	r2, [pc, #200]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007bac:	f7fb fee4 	bl	8003978 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007bb4:	f7fb fee0 	bl	8003978 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e323      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f0      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x1dc>
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d073      	beq.n	8007cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d005      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x21c>
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2b0c      	cmp	r3, #12
 8007bec:	d10e      	bne.n	8007c0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d10b      	bne.n	8007c0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf4:	4b1e      	ldr	r3, [pc, #120]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d063      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x2f0>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d15f      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e300      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c14:	d106      	bne.n	8007c24 <HAL_RCC_OscConfig+0x24c>
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a15      	ldr	r2, [pc, #84]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	e01d      	b.n	8007c60 <HAL_RCC_OscConfig+0x288>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0x270>
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a0f      	ldr	r2, [pc, #60]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a0c      	ldr	r2, [pc, #48]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e00b      	b.n	8007c60 <HAL_RCC_OscConfig+0x288>
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a05      	ldr	r2, [pc, #20]	; (8007c70 <HAL_RCC_OscConfig+0x298>)
 8007c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fb fe86 	bl	8003978 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c6e:	e010      	b.n	8007c92 <HAL_RCC_OscConfig+0x2ba>
 8007c70:	40021000 	.word	0x40021000
 8007c74:	0800bfe0 	.word	0x0800bfe0
 8007c78:	20000000 	.word	0x20000000
 8007c7c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c80:	f7fb fe7a 	bl	8003978 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b64      	cmp	r3, #100	; 0x64
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e2bd      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c92:	4baf      	ldr	r3, [pc, #700]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f0      	beq.n	8007c80 <HAL_RCC_OscConfig+0x2a8>
 8007c9e:	e014      	b.n	8007cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fb fe6a 	bl	8003978 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca8:	f7fb fe66 	bl	8003978 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b64      	cmp	r3, #100	; 0x64
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e2a9      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cba:	4ba5      	ldr	r3, [pc, #660]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x2d0>
 8007cc6:	e000      	b.n	8007cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d060      	beq.n	8007d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d005      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x310>
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	2b0c      	cmp	r3, #12
 8007ce0:	d119      	bne.n	8007d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d116      	bne.n	8007d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ce8:	4b99      	ldr	r3, [pc, #612]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_RCC_OscConfig+0x328>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e286      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d00:	4b93      	ldr	r3, [pc, #588]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	061b      	lsls	r3, r3, #24
 8007d0e:	4990      	ldr	r1, [pc, #576]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d14:	e040      	b.n	8007d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d023      	beq.n	8007d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d1e:	4b8c      	ldr	r3, [pc, #560]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a8b      	ldr	r2, [pc, #556]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2a:	f7fb fe25 	bl	8003978 <HAL_GetTick>
 8007d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d30:	e008      	b.n	8007d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d32:	f7fb fe21 	bl	8003978 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e264      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d44:	4b82      	ldr	r3, [pc, #520]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0f0      	beq.n	8007d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d50:	4b7f      	ldr	r3, [pc, #508]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	061b      	lsls	r3, r3, #24
 8007d5e:	497c      	ldr	r1, [pc, #496]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	604b      	str	r3, [r1, #4]
 8007d64:	e018      	b.n	8007d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d66:	4b7a      	ldr	r3, [pc, #488]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a79      	ldr	r2, [pc, #484]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d72:	f7fb fe01 	bl	8003978 <HAL_GetTick>
 8007d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d7a:	f7fb fdfd 	bl	8003978 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e240      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d8c:	4b70      	ldr	r3, [pc, #448]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1f0      	bne.n	8007d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d03c      	beq.n	8007e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01c      	beq.n	8007de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dac:	4b68      	ldr	r3, [pc, #416]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007db2:	4a67      	ldr	r2, [pc, #412]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007db4:	f043 0301 	orr.w	r3, r3, #1
 8007db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbc:	f7fb fddc 	bl	8003978 <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dc4:	f7fb fdd8 	bl	8003978 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e21b      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dd6:	4b5e      	ldr	r3, [pc, #376]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0ef      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x3ec>
 8007de4:	e01b      	b.n	8007e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de6:	4b5a      	ldr	r3, [pc, #360]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dec:	4a58      	ldr	r2, [pc, #352]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007dee:	f023 0301 	bic.w	r3, r3, #1
 8007df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df6:	f7fb fdbf 	bl	8003978 <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dfc:	e008      	b.n	8007e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfe:	f7fb fdbb 	bl	8003978 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d901      	bls.n	8007e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e1fe      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e10:	4b4f      	ldr	r3, [pc, #316]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1ef      	bne.n	8007dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80a6 	beq.w	8007f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007e30:	4b47      	ldr	r3, [pc, #284]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10d      	bne.n	8007e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e3c:	4b44      	ldr	r3, [pc, #272]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e40:	4a43      	ldr	r2, [pc, #268]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e46:	6593      	str	r3, [r2, #88]	; 0x58
 8007e48:	4b41      	ldr	r3, [pc, #260]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e54:	2301      	movs	r3, #1
 8007e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e58:	4b3e      	ldr	r3, [pc, #248]	; (8007f54 <HAL_RCC_OscConfig+0x57c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d118      	bne.n	8007e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e64:	4b3b      	ldr	r3, [pc, #236]	; (8007f54 <HAL_RCC_OscConfig+0x57c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a3a      	ldr	r2, [pc, #232]	; (8007f54 <HAL_RCC_OscConfig+0x57c>)
 8007e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e70:	f7fb fd82 	bl	8003978 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e78:	f7fb fd7e 	bl	8003978 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e1c1      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e8a:	4b32      	ldr	r3, [pc, #200]	; (8007f54 <HAL_RCC_OscConfig+0x57c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0f0      	beq.n	8007e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d108      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x4d8>
 8007e9e:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007eae:	e024      	b.n	8007efa <HAL_RCC_OscConfig+0x522>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2b05      	cmp	r3, #5
 8007eb6:	d110      	bne.n	8007eda <HAL_RCC_OscConfig+0x502>
 8007eb8:	4b25      	ldr	r3, [pc, #148]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebe:	4a24      	ldr	r2, [pc, #144]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007ec0:	f043 0304 	orr.w	r3, r3, #4
 8007ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ec8:	4b21      	ldr	r3, [pc, #132]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ece:	4a20      	ldr	r2, [pc, #128]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ed8:	e00f      	b.n	8007efa <HAL_RCC_OscConfig+0x522>
 8007eda:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee0:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007ee2:	f023 0301 	bic.w	r3, r3, #1
 8007ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007eea:	4b19      	ldr	r3, [pc, #100]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef0:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007ef2:	f023 0304 	bic.w	r3, r3, #4
 8007ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f02:	f7fb fd39 	bl	8003978 <HAL_GetTick>
 8007f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f08:	e00a      	b.n	8007f20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f0a:	f7fb fd35 	bl	8003978 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e176      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <HAL_RCC_OscConfig+0x578>)
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0ed      	beq.n	8007f0a <HAL_RCC_OscConfig+0x532>
 8007f2e:	e01a      	b.n	8007f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f30:	f7fb fd22 	bl	8003978 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f36:	e00f      	b.n	8007f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f38:	f7fb fd1e 	bl	8003978 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d906      	bls.n	8007f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e15f      	b.n	800820e <HAL_RCC_OscConfig+0x836>
 8007f4e:	bf00      	nop
 8007f50:	40021000 	.word	0x40021000
 8007f54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f58:	4baa      	ldr	r3, [pc, #680]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e8      	bne.n	8007f38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f66:	7ffb      	ldrb	r3, [r7, #31]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d105      	bne.n	8007f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f6c:	4ba5      	ldr	r3, [pc, #660]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f70:	4aa4      	ldr	r2, [pc, #656]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d03c      	beq.n	8007ffe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01c      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f8c:	4b9d      	ldr	r3, [pc, #628]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f92:	4a9c      	ldr	r2, [pc, #624]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007f94:	f043 0301 	orr.w	r3, r3, #1
 8007f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f9c:	f7fb fcec 	bl	8003978 <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fa4:	f7fb fce8 	bl	8003978 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e12b      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fb6:	4b93      	ldr	r3, [pc, #588]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0ef      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x5cc>
 8007fc4:	e01b      	b.n	8007ffe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fc6:	4b8f      	ldr	r3, [pc, #572]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fcc:	4a8d      	ldr	r2, [pc, #564]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd6:	f7fb fccf 	bl	8003978 <HAL_GetTick>
 8007fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fdc:	e008      	b.n	8007ff0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fde:	f7fb fccb 	bl	8003978 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d901      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e10e      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ff0:	4b84      	ldr	r3, [pc, #528]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8007ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1ef      	bne.n	8007fde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 8102 	beq.w	800820c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	2b02      	cmp	r3, #2
 800800e:	f040 80c5 	bne.w	800819c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008012:	4b7c      	ldr	r3, [pc, #496]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f003 0203 	and.w	r2, r3, #3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d12c      	bne.n	8008080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	3b01      	subs	r3, #1
 8008032:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008034:	429a      	cmp	r2, r3
 8008036:	d123      	bne.n	8008080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008044:	429a      	cmp	r2, r3
 8008046:	d11b      	bne.n	8008080 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008054:	429a      	cmp	r2, r3
 8008056:	d113      	bne.n	8008080 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	085b      	lsrs	r3, r3, #1
 8008064:	3b01      	subs	r3, #1
 8008066:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008068:	429a      	cmp	r2, r3
 800806a:	d109      	bne.n	8008080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	3b01      	subs	r3, #1
 800807a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800807c:	429a      	cmp	r2, r3
 800807e:	d067      	beq.n	8008150 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b0c      	cmp	r3, #12
 8008084:	d062      	beq.n	800814c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008086:	4b5f      	ldr	r3, [pc, #380]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e0bb      	b.n	800820e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008096:	4b5b      	ldr	r3, [pc, #364]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a5a      	ldr	r2, [pc, #360]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800809c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80080a2:	f7fb fc69 	bl	8003978 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080aa:	f7fb fc65 	bl	8003978 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e0a8      	b.n	800820e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080bc:	4b51      	ldr	r3, [pc, #324]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1f0      	bne.n	80080aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080c8:	4b4e      	ldr	r3, [pc, #312]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	4b4e      	ldr	r3, [pc, #312]	; (8008208 <HAL_RCC_OscConfig+0x830>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080d8:	3a01      	subs	r2, #1
 80080da:	0112      	lsls	r2, r2, #4
 80080dc:	4311      	orrs	r1, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080e2:	0212      	lsls	r2, r2, #8
 80080e4:	4311      	orrs	r1, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80080ea:	0852      	lsrs	r2, r2, #1
 80080ec:	3a01      	subs	r2, #1
 80080ee:	0552      	lsls	r2, r2, #21
 80080f0:	4311      	orrs	r1, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80080f6:	0852      	lsrs	r2, r2, #1
 80080f8:	3a01      	subs	r2, #1
 80080fa:	0652      	lsls	r2, r2, #25
 80080fc:	4311      	orrs	r1, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008102:	06d2      	lsls	r2, r2, #27
 8008104:	430a      	orrs	r2, r1
 8008106:	493f      	ldr	r1, [pc, #252]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008108:	4313      	orrs	r3, r2
 800810a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800810c:	4b3d      	ldr	r3, [pc, #244]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a3c      	ldr	r2, [pc, #240]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008116:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008118:	4b3a      	ldr	r3, [pc, #232]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	4a39      	ldr	r2, [pc, #228]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800811e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008122:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008124:	f7fb fc28 	bl	8003978 <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800812c:	f7fb fc24 	bl	8003978 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e067      	b.n	800820e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800813e:	4b31      	ldr	r3, [pc, #196]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f0      	beq.n	800812c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800814a:	e05f      	b.n	800820c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e05e      	b.n	800820e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008150:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d157      	bne.n	800820c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800815c:	4b29      	ldr	r3, [pc, #164]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a28      	ldr	r2, [pc, #160]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008166:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008168:	4b26      	ldr	r3, [pc, #152]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	4a25      	ldr	r2, [pc, #148]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 800816e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008172:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008174:	f7fb fc00 	bl	8003978 <HAL_GetTick>
 8008178:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800817a:	e008      	b.n	800818e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800817c:	f7fb fbfc 	bl	8003978 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d901      	bls.n	800818e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e03f      	b.n	800820e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800818e:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f0      	beq.n	800817c <HAL_RCC_OscConfig+0x7a4>
 800819a:	e037      	b.n	800820c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	2b0c      	cmp	r3, #12
 80081a0:	d02d      	beq.n	80081fe <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a2:	4b18      	ldr	r3, [pc, #96]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a17      	ldr	r2, [pc, #92]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ac:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ae:	4b15      	ldr	r3, [pc, #84]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	4a11      	ldr	r2, [pc, #68]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081c0:	f023 0303 	bic.w	r3, r3, #3
 80081c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80081c6:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	4a0e      	ldr	r2, [pc, #56]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80081d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d6:	f7fb fbcf 	bl	8003978 <HAL_GetTick>
 80081da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081dc:	e008      	b.n	80081f0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081de:	f7fb fbcb 	bl	8003978 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e00e      	b.n	800820e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <HAL_RCC_OscConfig+0x82c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f0      	bne.n	80081de <HAL_RCC_OscConfig+0x806>
 80081fc:	e006      	b.n	800820c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e005      	b.n	800820e <HAL_RCC_OscConfig+0x836>
 8008202:	bf00      	nop
 8008204:	40021000 	.word	0x40021000
 8008208:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3720      	adds	r7, #32
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop

08008218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0c8      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800822c:	4b66      	ldr	r3, [pc, #408]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d910      	bls.n	800825c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823a:	4b63      	ldr	r3, [pc, #396]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f023 0207 	bic.w	r2, r3, #7
 8008242:	4961      	ldr	r1, [pc, #388]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	4313      	orrs	r3, r2
 8008248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800824a:	4b5f      	ldr	r3, [pc, #380]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d001      	beq.n	800825c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e0b0      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d04c      	beq.n	8008302 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d107      	bne.n	8008280 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008270:	4b56      	ldr	r3, [pc, #344]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d121      	bne.n	80082c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e09e      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d107      	bne.n	8008298 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008288:	4b50      	ldr	r3, [pc, #320]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d115      	bne.n	80082c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e092      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082a0:	4b4a      	ldr	r3, [pc, #296]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e086      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082b0:	4b46      	ldr	r3, [pc, #280]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e07e      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082c0:	4b42      	ldr	r3, [pc, #264]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f023 0203 	bic.w	r2, r3, #3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	493f      	ldr	r1, [pc, #252]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d2:	f7fb fb51 	bl	8003978 <HAL_GetTick>
 80082d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d8:	e00a      	b.n	80082f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082da:	f7fb fb4d 	bl	8003978 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e066      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082f0:	4b36      	ldr	r3, [pc, #216]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f003 020c 	and.w	r2, r3, #12
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	429a      	cmp	r2, r3
 8008300:	d1eb      	bne.n	80082da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800830e:	4b2f      	ldr	r3, [pc, #188]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	492c      	ldr	r1, [pc, #176]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 800831c:	4313      	orrs	r3, r2
 800831e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008320:	4b29      	ldr	r3, [pc, #164]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d210      	bcs.n	8008350 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800832e:	4b26      	ldr	r3, [pc, #152]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f023 0207 	bic.w	r2, r3, #7
 8008336:	4924      	ldr	r1, [pc, #144]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	4313      	orrs	r3, r2
 800833c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800833e:	4b22      	ldr	r3, [pc, #136]	; (80083c8 <HAL_RCC_ClockConfig+0x1b0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	429a      	cmp	r2, r3
 800834a:	d001      	beq.n	8008350 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e036      	b.n	80083be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	4918      	ldr	r1, [pc, #96]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 800836a:	4313      	orrs	r3, r2
 800836c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d009      	beq.n	800838e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4910      	ldr	r1, [pc, #64]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 800838a:	4313      	orrs	r3, r2
 800838c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800838e:	f000 f825 	bl	80083dc <HAL_RCC_GetSysClockFreq>
 8008392:	4602      	mov	r2, r0
 8008394:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <HAL_RCC_ClockConfig+0x1b4>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	490c      	ldr	r1, [pc, #48]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 80083a0:	5ccb      	ldrb	r3, [r1, r3]
 80083a2:	f003 031f 	and.w	r3, r3, #31
 80083a6:	fa22 f303 	lsr.w	r3, r2, r3
 80083aa:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80083ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80083ae:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <HAL_RCC_ClockConfig+0x1c0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7f9 fcac 	bl	8001d10 <HAL_InitTick>
 80083b8:	4603      	mov	r3, r0
 80083ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80083bc:	7afb      	ldrb	r3, [r7, #11]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40022000 	.word	0x40022000
 80083cc:	40021000 	.word	0x40021000
 80083d0:	0800bfe0 	.word	0x0800bfe0
 80083d4:	20000000 	.word	0x20000000
 80083d8:	20000004 	.word	0x20000004

080083dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	b089      	sub	sp, #36	; 0x24
 80083e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	2300      	movs	r3, #0
 80083e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ea:	4b3e      	ldr	r3, [pc, #248]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 030c 	and.w	r3, r3, #12
 80083f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083f4:	4b3b      	ldr	r3, [pc, #236]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0x34>
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b0c      	cmp	r3, #12
 8008408:	d121      	bne.n	800844e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d11e      	bne.n	800844e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008410:	4b34      	ldr	r3, [pc, #208]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d107      	bne.n	800842c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800841c:	4b31      	ldr	r3, [pc, #196]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	e005      	b.n	8008438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008438:	4a2b      	ldr	r2, [pc, #172]	; (80084e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10d      	bne.n	8008464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800844c:	e00a      	b.n	8008464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b04      	cmp	r3, #4
 8008452:	d102      	bne.n	800845a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008454:	4b25      	ldr	r3, [pc, #148]	; (80084ec <HAL_RCC_GetSysClockFreq+0x110>)
 8008456:	61bb      	str	r3, [r7, #24]
 8008458:	e004      	b.n	8008464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d101      	bne.n	8008464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008460:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b0c      	cmp	r3, #12
 8008468:	d134      	bne.n	80084d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800846a:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d003      	beq.n	8008482 <HAL_RCC_GetSysClockFreq+0xa6>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d003      	beq.n	8008488 <HAL_RCC_GetSysClockFreq+0xac>
 8008480:	e005      	b.n	800848e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008482:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <HAL_RCC_GetSysClockFreq+0x110>)
 8008484:	617b      	str	r3, [r7, #20]
      break;
 8008486:	e005      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008488:	4b19      	ldr	r3, [pc, #100]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800848a:	617b      	str	r3, [r7, #20]
      break;
 800848c:	e002      	b.n	8008494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	617b      	str	r3, [r7, #20]
      break;
 8008492:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008494:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	091b      	lsrs	r3, r3, #4
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	3301      	adds	r3, #1
 80084a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80084a2:	4b10      	ldr	r3, [pc, #64]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	0a1b      	lsrs	r3, r3, #8
 80084a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	fb02 f203 	mul.w	r2, r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80084ba:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	0e5b      	lsrs	r3, r3, #25
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	3301      	adds	r3, #1
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80084d4:	69bb      	ldr	r3, [r7, #24]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3724      	adds	r7, #36	; 0x24
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40021000 	.word	0x40021000
 80084e8:	0800bff8 	.word	0x0800bff8
 80084ec:	00f42400 	.word	0x00f42400
 80084f0:	00989680 	.word	0x00989680

080084f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084f8:	4b03      	ldr	r3, [pc, #12]	; (8008508 <HAL_RCC_GetHCLKFreq+0x14>)
 80084fa:	681b      	ldr	r3, [r3, #0]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000000 	.word	0x20000000

0800850c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008510:	f7ff fff0 	bl	80084f4 <HAL_RCC_GetHCLKFreq>
 8008514:	4602      	mov	r2, r0
 8008516:	4b06      	ldr	r3, [pc, #24]	; (8008530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	0a1b      	lsrs	r3, r3, #8
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	4904      	ldr	r1, [pc, #16]	; (8008534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008522:	5ccb      	ldrb	r3, [r1, r3]
 8008524:	f003 031f 	and.w	r3, r3, #31
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800852c:	4618      	mov	r0, r3
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40021000 	.word	0x40021000
 8008534:	0800bff0 	.word	0x0800bff0

08008538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800853c:	f7ff ffda 	bl	80084f4 <HAL_RCC_GetHCLKFreq>
 8008540:	4602      	mov	r2, r0
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	0adb      	lsrs	r3, r3, #11
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	4904      	ldr	r1, [pc, #16]	; (8008560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800854e:	5ccb      	ldrb	r3, [r1, r3]
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008558:	4618      	mov	r0, r3
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40021000 	.word	0x40021000
 8008560:	0800bff0 	.word	0x0800bff0

08008564 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	220f      	movs	r2, #15
 8008572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008574:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <HAL_RCC_GetClockConfig+0x5c>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 0203 	and.w	r2, r3, #3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008580:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <HAL_RCC_GetClockConfig+0x5c>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800858c:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <HAL_RCC_GetClockConfig+0x5c>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008598:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <HAL_RCC_GetClockConfig+0x5c>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	08db      	lsrs	r3, r3, #3
 800859e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80085a6:	4b07      	ldr	r3, [pc, #28]	; (80085c4 <HAL_RCC_GetClockConfig+0x60>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0207 	and.w	r2, r3, #7
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	601a      	str	r2, [r3, #0]
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	40021000 	.word	0x40021000
 80085c4:	40022000 	.word	0x40022000

080085c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80085d4:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80085e0:	f7ff f996 	bl	8007910 <HAL_PWREx_GetVoltageRange>
 80085e4:	6178      	str	r0, [r7, #20]
 80085e6:	e014      	b.n	8008612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ec:	4a24      	ldr	r2, [pc, #144]	; (8008680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f2:	6593      	str	r3, [r2, #88]	; 0x58
 80085f4:	4b22      	ldr	r3, [pc, #136]	; (8008680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80085f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008600:	f7ff f986 	bl	8007910 <HAL_PWREx_GetVoltageRange>
 8008604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008606:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860a:	4a1d      	ldr	r2, [pc, #116]	; (8008680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800860c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008610:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008618:	d10b      	bne.n	8008632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2b80      	cmp	r3, #128	; 0x80
 800861e:	d919      	bls.n	8008654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2ba0      	cmp	r3, #160	; 0xa0
 8008624:	d902      	bls.n	800862c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008626:	2302      	movs	r3, #2
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	e013      	b.n	8008654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800862c:	2301      	movs	r3, #1
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	e010      	b.n	8008654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b80      	cmp	r3, #128	; 0x80
 8008636:	d902      	bls.n	800863e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008638:	2303      	movs	r3, #3
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	e00a      	b.n	8008654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b80      	cmp	r3, #128	; 0x80
 8008642:	d102      	bne.n	800864a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008644:	2302      	movs	r3, #2
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	e004      	b.n	8008654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b70      	cmp	r3, #112	; 0x70
 800864e:	d101      	bne.n	8008654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008650:	2301      	movs	r3, #1
 8008652:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008654:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f023 0207 	bic.w	r2, r3, #7
 800865c:	4909      	ldr	r1, [pc, #36]	; (8008684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008664:	4b07      	ldr	r3, [pc, #28]	; (8008684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	429a      	cmp	r2, r3
 8008670:	d001      	beq.n	8008676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	40021000 	.word	0x40021000
 8008684:	40022000 	.word	0x40022000

08008688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008690:	2300      	movs	r3, #0
 8008692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008694:	2300      	movs	r3, #0
 8008696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d031      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086ac:	d01a      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80086ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086b2:	d814      	bhi.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80086b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086bc:	d10f      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80086be:	4bac      	ldr	r3, [pc, #688]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	4aab      	ldr	r2, [pc, #684]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80086ca:	e00c      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3304      	adds	r3, #4
 80086d0:	2100      	movs	r1, #0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f9cc 	bl	8008a70 <RCCEx_PLLSAI1_Config>
 80086d8:	4603      	mov	r3, r0
 80086da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80086dc:	e003      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	74fb      	strb	r3, [r7, #19]
      break;
 80086e2:	e000      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80086e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086e6:	7cfb      	ldrb	r3, [r7, #19]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086ec:	4ba0      	ldr	r3, [pc, #640]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	499d      	ldr	r1, [pc, #628]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008702:	e001      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008704:	7cfb      	ldrb	r3, [r7, #19]
 8008706:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8099 	beq.w	8008848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008716:	2300      	movs	r3, #0
 8008718:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800871a:	4b95      	ldr	r3, [pc, #596]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800871c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00d      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008730:	4b8f      	ldr	r3, [pc, #572]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008734:	4a8e      	ldr	r2, [pc, #568]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873a:	6593      	str	r3, [r2, #88]	; 0x58
 800873c:	4b8c      	ldr	r3, [pc, #560]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008748:	2301      	movs	r3, #1
 800874a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800874c:	4b89      	ldr	r3, [pc, #548]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a88      	ldr	r2, [pc, #544]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008758:	f7fb f90e 	bl	8003978 <HAL_GetTick>
 800875c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800875e:	e009      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008760:	f7fb f90a 	bl	8003978 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b02      	cmp	r3, #2
 800876c:	d902      	bls.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	74fb      	strb	r3, [r7, #19]
        break;
 8008772:	e005      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008774:	4b7f      	ldr	r3, [pc, #508]	; (8008974 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0ef      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008780:	7cfb      	ldrb	r3, [r7, #19]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d155      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008786:	4b7a      	ldr	r3, [pc, #488]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008790:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01e      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d019      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087a2:	4b73      	ldr	r3, [pc, #460]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087ae:	4b70      	ldr	r3, [pc, #448]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b4:	4a6e      	ldr	r2, [pc, #440]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087be:	4b6c      	ldr	r3, [pc, #432]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c4:	4a6a      	ldr	r2, [pc, #424]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087ce:	4a68      	ldr	r2, [pc, #416]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d016      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fb f8ca 	bl	8003978 <HAL_GetTick>
 80087e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087e6:	e00b      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087e8:	f7fb f8c6 	bl	8003978 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d902      	bls.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	74fb      	strb	r3, [r7, #19]
            break;
 80087fe:	e006      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008800:	4b5b      	ldr	r3, [pc, #364]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0ec      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800880e:	7cfb      	ldrb	r3, [r7, #19]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008814:	4b56      	ldr	r3, [pc, #344]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800881a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	4953      	ldr	r1, [pc, #332]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008824:	4313      	orrs	r3, r2
 8008826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800882a:	e004      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800882c:	7cfb      	ldrb	r3, [r7, #19]
 800882e:	74bb      	strb	r3, [r7, #18]
 8008830:	e001      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008832:	7cfb      	ldrb	r3, [r7, #19]
 8008834:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008836:	7c7b      	ldrb	r3, [r7, #17]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d105      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800883c:	4b4c      	ldr	r3, [pc, #304]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	4a4b      	ldr	r2, [pc, #300]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008846:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008854:	4b46      	ldr	r3, [pc, #280]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f023 0203 	bic.w	r2, r3, #3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	4943      	ldr	r1, [pc, #268]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008876:	4b3e      	ldr	r3, [pc, #248]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887c:	f023 020c 	bic.w	r2, r3, #12
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	493a      	ldr	r1, [pc, #232]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008886:	4313      	orrs	r3, r2
 8008888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008898:	4b35      	ldr	r3, [pc, #212]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800889a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	4932      	ldr	r1, [pc, #200]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ba:	4b2d      	ldr	r3, [pc, #180]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	4929      	ldr	r1, [pc, #164]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088dc:	4b24      	ldr	r3, [pc, #144]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	4921      	ldr	r1, [pc, #132]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088fe:	4b1c      	ldr	r3, [pc, #112]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	4918      	ldr	r1, [pc, #96]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008920:	4b13      	ldr	r3, [pc, #76]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008926:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	4910      	ldr	r1, [pc, #64]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d02c      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008942:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008948:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	4907      	ldr	r1, [pc, #28]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008960:	d10a      	bne.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008962:	4b03      	ldr	r3, [pc, #12]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	4a02      	ldr	r2, [pc, #8]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800896c:	60d3      	str	r3, [r2, #12]
 800896e:	e015      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8008970:	40021000 	.word	0x40021000
 8008974:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008980:	d10c      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3304      	adds	r3, #4
 8008986:	2101      	movs	r1, #1
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f871 	bl	8008a70 <RCCEx_PLLSAI1_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008992:	7cfb      	ldrb	r3, [r7, #19]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8008998:	7cfb      	ldrb	r3, [r7, #19]
 800899a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d028      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089a8:	4b30      	ldr	r3, [pc, #192]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80089aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	492d      	ldr	r1, [pc, #180]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089c6:	d106      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089c8:	4b28      	ldr	r3, [pc, #160]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4a27      	ldr	r2, [pc, #156]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80089ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089d2:	60d3      	str	r3, [r2, #12]
 80089d4:	e011      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089de:	d10c      	bne.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f842 	bl	8008a70 <RCCEx_PLLSAI1_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089f0:	7cfb      	ldrb	r3, [r7, #19]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80089f6:	7cfb      	ldrb	r3, [r7, #19]
 80089f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01c      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a06:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a14:	4915      	ldr	r1, [pc, #84]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a24:	d10c      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f81f 	bl	8008a70 <RCCEx_PLLSAI1_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a36:	7cfb      	ldrb	r3, [r7, #19]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a4c:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a5a:	4904      	ldr	r1, [pc, #16]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008a62:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40021000 	.word	0x40021000

08008a70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008a7e:	4b74      	ldr	r3, [pc, #464]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f003 0303 	and.w	r3, r3, #3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d018      	beq.n	8008abc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008a8a:	4b71      	ldr	r3, [pc, #452]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f003 0203 	and.w	r2, r3, #3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d10d      	bne.n	8008ab6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008aa2:	4b6b      	ldr	r3, [pc, #428]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	091b      	lsrs	r3, r3, #4
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d047      	beq.n	8008b46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]
 8008aba:	e044      	b.n	8008b46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d018      	beq.n	8008af6 <RCCEx_PLLSAI1_Config+0x86>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d825      	bhi.n	8008b14 <RCCEx_PLLSAI1_Config+0xa4>
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d002      	beq.n	8008ad2 <RCCEx_PLLSAI1_Config+0x62>
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d009      	beq.n	8008ae4 <RCCEx_PLLSAI1_Config+0x74>
 8008ad0:	e020      	b.n	8008b14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ad2:	4b5f      	ldr	r3, [pc, #380]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d11d      	bne.n	8008b1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ae2:	e01a      	b.n	8008b1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008ae4:	4b5a      	ldr	r3, [pc, #360]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d116      	bne.n	8008b1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008af4:	e013      	b.n	8008b1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008af6:	4b56      	ldr	r3, [pc, #344]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10f      	bne.n	8008b22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008b02:	4b53      	ldr	r3, [pc, #332]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d109      	bne.n	8008b22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b12:	e006      	b.n	8008b22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	73fb      	strb	r3, [r7, #15]
      break;
 8008b18:	e004      	b.n	8008b24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008b1a:	bf00      	nop
 8008b1c:	e002      	b.n	8008b24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008b1e:	bf00      	nop
 8008b20:	e000      	b.n	8008b24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10d      	bne.n	8008b46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008b2a:	4b49      	ldr	r3, [pc, #292]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6819      	ldr	r1, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	4943      	ldr	r1, [pc, #268]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d17c      	bne.n	8008c46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008b4c:	4b40      	ldr	r3, [pc, #256]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a3f      	ldr	r2, [pc, #252]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b58:	f7fa ff0e 	bl	8003978 <HAL_GetTick>
 8008b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b5e:	e009      	b.n	8008b74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b60:	f7fa ff0a 	bl	8003978 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d902      	bls.n	8008b74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	73fb      	strb	r3, [r7, #15]
        break;
 8008b72:	e005      	b.n	8008b80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b74:	4b36      	ldr	r3, [pc, #216]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1ef      	bne.n	8008b60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d15f      	bne.n	8008c46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d110      	bne.n	8008bae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b8c:	4b30      	ldr	r3, [pc, #192]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008b94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6892      	ldr	r2, [r2, #8]
 8008b9c:	0211      	lsls	r1, r2, #8
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68d2      	ldr	r2, [r2, #12]
 8008ba2:	06d2      	lsls	r2, r2, #27
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	492a      	ldr	r1, [pc, #168]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	610b      	str	r3, [r1, #16]
 8008bac:	e027      	b.n	8008bfe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d112      	bne.n	8008bda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bb4:	4b26      	ldr	r3, [pc, #152]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6892      	ldr	r2, [r2, #8]
 8008bc4:	0211      	lsls	r1, r2, #8
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6912      	ldr	r2, [r2, #16]
 8008bca:	0852      	lsrs	r2, r2, #1
 8008bcc:	3a01      	subs	r2, #1
 8008bce:	0552      	lsls	r2, r2, #21
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	491f      	ldr	r1, [pc, #124]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	610b      	str	r3, [r1, #16]
 8008bd8:	e011      	b.n	8008bfe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bda:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008be2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6892      	ldr	r2, [r2, #8]
 8008bea:	0211      	lsls	r1, r2, #8
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6952      	ldr	r2, [r2, #20]
 8008bf0:	0852      	lsrs	r2, r2, #1
 8008bf2:	3a01      	subs	r2, #1
 8008bf4:	0652      	lsls	r2, r2, #25
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	4915      	ldr	r1, [pc, #84]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008bfe:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c0a:	f7fa feb5 	bl	8003978 <HAL_GetTick>
 8008c0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c10:	e009      	b.n	8008c26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c12:	f7fa feb1 	bl	8003978 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d902      	bls.n	8008c26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	73fb      	strb	r3, [r7, #15]
          break;
 8008c24:	e005      	b.n	8008c32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c26:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0ef      	beq.n	8008c12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	4903      	ldr	r1, [pc, #12]	; (8008c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40021000 	.word	0x40021000

08008c54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d06c      	beq.n	8008d40 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7f8 ff74 	bl	8001b68 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	22ca      	movs	r2, #202	; 0xca
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2253      	movs	r2, #83	; 0x53
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f87c 	bl	8008d96 <RTC_EnterInitMode>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d14b      	bne.n	8008d40 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6899      	ldr	r1, [r3, #8]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68d2      	ldr	r2, [r2, #12]
 8008ce2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6919      	ldr	r1, [r3, #16]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	041a      	lsls	r2, r3, #16
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f87f 	bl	8008dfc <RTC_ExitInitMode>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11b      	bne.n	8008d40 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0203 	bic.w	r2, r2, #3
 8008d16:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69da      	ldr	r2, [r3, #28]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	22ff      	movs	r2, #255	; 0xff
 8008d36:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d60:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008d62:	f7fa fe09 	bl	8003978 <HAL_GetTick>
 8008d66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d68:	e009      	b.n	8008d7e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d6a:	f7fa fe05 	bl	8003978 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d78:	d901      	bls.n	8008d7e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e007      	b.n	8008d8e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0ee      	beq.n	8008d6a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d120      	bne.n	8008df2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008dba:	f7fa fddd 	bl	8003978 <HAL_GetTick>
 8008dbe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008dc0:	e00d      	b.n	8008dde <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008dc2:	f7fa fdd9 	bl	8003978 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dd0:	d905      	bls.n	8008dde <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2203      	movs	r2, #3
 8008dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <RTC_EnterInitMode+0x5c>
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d1e7      	bne.n	8008dc2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008e08:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	4a19      	ldr	r2, [pc, #100]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e12:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e14:	4b17      	ldr	r3, [pc, #92]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10c      	bne.n	8008e3a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff ff92 	bl	8008d4a <HAL_RTC_WaitForSynchro>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01e      	beq.n	8008e6a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2203      	movs	r2, #3
 8008e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	73fb      	strb	r3, [r7, #15]
 8008e38:	e017      	b.n	8008e6a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	4a0d      	ldr	r2, [pc, #52]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e40:	f023 0320 	bic.w	r3, r3, #32
 8008e44:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff ff7f 	bl	8008d4a <HAL_RTC_WaitForSynchro>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2203      	movs	r2, #3
 8008e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	4a04      	ldr	r2, [pc, #16]	; (8008e74 <RTC_ExitInitMode+0x78>)
 8008e64:	f043 0320 	orr.w	r3, r3, #32
 8008e68:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	40002800 	.word	0x40002800

08008e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e095      	b.n	8008fb6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d108      	bne.n	8008ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e9a:	d009      	beq.n	8008eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	61da      	str	r2, [r3, #28]
 8008ea2:	e005      	b.n	8008eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7f8 feba 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ef0:	d902      	bls.n	8008ef8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e002      	b.n	8008efe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008efc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f06:	d007      	beq.n	8008f18 <HAL_SPI_Init+0xa0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f10:	d002      	beq.n	8008f18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5a:	ea42 0103 	orr.w	r1, r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	0c1b      	lsrs	r3, r3, #16
 8008f74:	f003 0204 	and.w	r2, r3, #4
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f86:	f003 0308 	and.w	r3, r3, #8
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008f94:	ea42 0103 	orr.w	r1, r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e049      	b.n	8009064 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f841 	bl	800906c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2202      	movs	r2, #2
 8008fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f000 fac5 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	d001      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e03b      	b.n	8009110 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a19      	ldr	r2, [pc, #100]	; (800911c <HAL_TIM_Base_Start_IT+0x9c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d009      	beq.n	80090ce <HAL_TIM_Base_Start_IT+0x4e>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c2:	d004      	beq.n	80090ce <HAL_TIM_Base_Start_IT+0x4e>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a15      	ldr	r2, [pc, #84]	; (8009120 <HAL_TIM_Base_Start_IT+0xa0>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d115      	bne.n	80090fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	4b13      	ldr	r3, [pc, #76]	; (8009124 <HAL_TIM_Base_Start_IT+0xa4>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b06      	cmp	r3, #6
 80090de:	d015      	beq.n	800910c <HAL_TIM_Base_Start_IT+0x8c>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e6:	d011      	beq.n	800910c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f8:	e008      	b.n	800910c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0201 	orr.w	r2, r2, #1
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	e000      	b.n	800910e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800910c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40014000 	.word	0x40014000
 8009124:	00010007 	.word	0x00010007

08009128 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e049      	b.n	80091ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7f8 ff62 	bl	8002018 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f000 fa10 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d122      	bne.n	8009232 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d11b      	bne.n	8009232 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f06f 0202 	mvn.w	r2, #2
 8009202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f999 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 800921e:	e005      	b.n	800922c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f98b 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f99c 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b04      	cmp	r3, #4
 800923e:	d122      	bne.n	8009286 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b04      	cmp	r3, #4
 800924c:	d11b      	bne.n	8009286 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f06f 0204 	mvn.w	r2, #4
 8009256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f96f 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 8009272:	e005      	b.n	8009280 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f961 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f972 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b08      	cmp	r3, #8
 8009292:	d122      	bne.n	80092da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d11b      	bne.n	80092da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f06f 0208 	mvn.w	r2, #8
 80092aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2204      	movs	r2, #4
 80092b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f945 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 80092c6:	e005      	b.n	80092d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f937 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f948 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	f003 0310 	and.w	r3, r3, #16
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d122      	bne.n	800932e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d11b      	bne.n	800932e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f06f 0210 	mvn.w	r2, #16
 80092fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2208      	movs	r2, #8
 8009304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009310:	2b00      	cmp	r3, #0
 8009312:	d003      	beq.n	800931c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f91b 	bl	8009550 <HAL_TIM_IC_CaptureCallback>
 800931a:	e005      	b.n	8009328 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f90d 	bl	800953c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f91e 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	d10e      	bne.n	800935a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	2b01      	cmp	r3, #1
 8009348:	d107      	bne.n	800935a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f06f 0201 	mvn.w	r2, #1
 8009352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7f8 fbc7 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009364:	2b80      	cmp	r3, #128	; 0x80
 8009366:	d10e      	bne.n	8009386 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009372:	2b80      	cmp	r3, #128	; 0x80
 8009374:	d107      	bne.n	8009386 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800937e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fae3 	bl	800994c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009394:	d10e      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a0:	2b80      	cmp	r3, #128	; 0x80
 80093a2:	d107      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fad6 	bl	8009960 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	d10e      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093cc:	2b40      	cmp	r3, #64	; 0x40
 80093ce:	d107      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f8cc 	bl	8009578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d10e      	bne.n	800940c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b20      	cmp	r3, #32
 80093fa:	d107      	bne.n	800940c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0220 	mvn.w	r2, #32
 8009404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa96 	bl	8009938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d101      	bne.n	800942e <HAL_TIM_IC_ConfigChannel+0x1a>
 800942a:	2302      	movs	r3, #2
 800942c:	e082      	b.n	8009534 <HAL_TIM_IC_ConfigChannel+0x120>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11b      	bne.n	8009474 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f000 f902 	bl	8009654 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	699a      	ldr	r2, [r3, #24]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 020c 	bic.w	r2, r2, #12
 800945e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6999      	ldr	r1, [r3, #24]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	619a      	str	r2, [r3, #24]
 8009472:	e05a      	b.n	800952a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d11c      	bne.n	80094b4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6819      	ldr	r1, [r3, #0]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f000 f939 	bl	8009700 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800949c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6999      	ldr	r1, [r3, #24]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	021a      	lsls	r2, r3, #8
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	619a      	str	r2, [r3, #24]
 80094b2:	e03a      	b.n	800952a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b08      	cmp	r3, #8
 80094b8:	d11b      	bne.n	80094f2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6818      	ldr	r0, [r3, #0]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	f000 f956 	bl	800977a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 020c 	bic.w	r2, r2, #12
 80094dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69d9      	ldr	r1, [r3, #28]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	61da      	str	r2, [r3, #28]
 80094f0:	e01b      	b.n	800952a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	f000 f976 	bl	80097f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	69da      	ldr	r2, [r3, #28]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009514:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69d9      	ldr	r1, [r3, #28]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	021a      	lsls	r2, r3, #8
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a2a      	ldr	r2, [pc, #168]	; (8009648 <TIM_Base_SetConfig+0xbc>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_Base_SetConfig+0x20>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095aa:	d108      	bne.n	80095be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a21      	ldr	r2, [pc, #132]	; (8009648 <TIM_Base_SetConfig+0xbc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00b      	beq.n	80095de <TIM_Base_SetConfig+0x52>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095cc:	d007      	beq.n	80095de <TIM_Base_SetConfig+0x52>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a1e      	ldr	r2, [pc, #120]	; (800964c <TIM_Base_SetConfig+0xc0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <TIM_Base_SetConfig+0x52>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a1d      	ldr	r2, [pc, #116]	; (8009650 <TIM_Base_SetConfig+0xc4>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d108      	bne.n	80095f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a0c      	ldr	r2, [pc, #48]	; (8009648 <TIM_Base_SetConfig+0xbc>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d007      	beq.n	800962c <TIM_Base_SetConfig+0xa0>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a0b      	ldr	r2, [pc, #44]	; (800964c <TIM_Base_SetConfig+0xc0>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d003      	beq.n	800962c <TIM_Base_SetConfig+0xa0>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <TIM_Base_SetConfig+0xc4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d103      	bne.n	8009634 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	615a      	str	r2, [r3, #20]
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40012c00 	.word	0x40012c00
 800964c:	40014000 	.word	0x40014000
 8009650:	40014400 	.word	0x40014400

08009654 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	f023 0201 	bic.w	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4a1e      	ldr	r2, [pc, #120]	; (80096f8 <TIM_TI1_SetConfig+0xa4>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d007      	beq.n	8009692 <TIM_TI1_SetConfig+0x3e>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009688:	d003      	beq.n	8009692 <TIM_TI1_SetConfig+0x3e>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <TIM_TI1_SetConfig+0xa8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d101      	bne.n	8009696 <TIM_TI1_SetConfig+0x42>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <TIM_TI1_SetConfig+0x44>
 8009696:	2300      	movs	r3, #0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0303 	bic.w	r3, r3, #3
 80096a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e003      	b.n	80096b6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f023 030a 	bic.w	r3, r3, #10
 80096d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f003 030a 	and.w	r3, r3, #10
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40012c00 	.word	0x40012c00
 80096fc:	40014000 	.word	0x40014000

08009700 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f023 0210 	bic.w	r2, r3, #16
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800972c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800973e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	031b      	lsls	r3, r3, #12
 8009744:	b29b      	uxth	r3, r3
 8009746:	697a      	ldr	r2, [r7, #20]
 8009748:	4313      	orrs	r3, r2
 800974a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009752:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	011b      	lsls	r3, r3, #4
 8009758:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	621a      	str	r2, [r3, #32]
}
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800977a:	b480      	push	{r7}
 800977c:	b087      	sub	sp, #28
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6a1b      	ldr	r3, [r3, #32]
 800978c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f023 0303 	bic.w	r3, r3, #3
 80097a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80097ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	621a      	str	r2, [r3, #32]
}
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b087      	sub	sp, #28
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800981e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	4313      	orrs	r3, r2
 8009828:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009830:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	031b      	lsls	r3, r3, #12
 8009836:	b29b      	uxth	r3, r3
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009844:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	031b      	lsls	r3, r3, #12
 800984a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	621a      	str	r2, [r3, #32]
}
 8009860:	bf00      	nop
 8009862:	371c      	adds	r7, #28
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009880:	2302      	movs	r3, #2
 8009882:	e04f      	b.n	8009924 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a21      	ldr	r2, [pc, #132]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d108      	bne.n	80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a14      	ldr	r2, [pc, #80]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d009      	beq.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ec:	d004      	beq.n	80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a10      	ldr	r2, [pc, #64]	; (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d10c      	bne.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	4313      	orrs	r3, r2
 8009908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	40012c00 	.word	0x40012c00
 8009934:	40014000 	.word	0x40014000

08009938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e040      	b.n	8009a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7f8 fc60 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2224      	movs	r2, #36	; 0x24
 80099a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0201 	bic.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fccc 	bl	800a350 <UART_SetConfig>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e022      	b.n	8009a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fecc 	bl	800a768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	689a      	ldr	r2, [r3, #8]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0201 	orr.w	r2, r2, #1
 80099fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 ff53 	bl	800a8ac <UART_CheckIdleState>
 8009a06:	4603      	mov	r3, r0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e02b      	b.n	8009a7a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2224      	movs	r2, #36	; 0x24
 8009a26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2200      	movs	r2, #0
 8009a46:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7f8 fcc7 	bl	80023e4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b08a      	sub	sp, #40	; 0x28
 8009a86:	af02      	add	r7, sp, #8
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	603b      	str	r3, [r7, #0]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a96:	2b20      	cmp	r3, #32
 8009a98:	f040 8082 	bne.w	8009ba0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <HAL_UART_Transmit+0x26>
 8009aa2:	88fb      	ldrh	r3, [r7, #6]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e07a      	b.n	8009ba2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_UART_Transmit+0x38>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e073      	b.n	8009ba2 <HAL_UART_Transmit+0x120>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2221      	movs	r2, #33	; 0x21
 8009ace:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ad0:	f7f9 ff52 	bl	8003978 <HAL_GetTick>
 8009ad4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	88fa      	ldrh	r2, [r7, #6]
 8009ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aee:	d108      	bne.n	8009b02 <HAL_UART_Transmit+0x80>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	e003      	b.n	8009b0a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009b12:	e02d      	b.n	8009b70 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2180      	movs	r1, #128	; 0x80
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 ff0d 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e039      	b.n	8009ba2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10b      	bne.n	8009b4c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	881a      	ldrh	r2, [r3, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b40:	b292      	uxth	r2, r2
 8009b42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	3302      	adds	r3, #2
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	e008      	b.n	8009b5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	781a      	ldrb	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	b292      	uxth	r2, r2
 8009b56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1cb      	bne.n	8009b14 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2200      	movs	r2, #0
 8009b84:	2140      	movs	r1, #64	; 0x40
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 fed9 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e005      	b.n	8009ba2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e000      	b.n	8009ba2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009ba0:	2302      	movs	r3, #2
  }
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	d145      	bne.n	8009c4e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_UART_Transmit_IT+0x22>
 8009bc8:	88fb      	ldrh	r3, [r7, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e03e      	b.n	8009c50 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d101      	bne.n	8009be0 <HAL_UART_Transmit_IT+0x34>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e037      	b.n	8009c50 <HAL_UART_Transmit_IT+0xa4>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	88fa      	ldrh	r2, [r7, #6]
 8009bf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	88fa      	ldrh	r2, [r7, #6]
 8009bfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2221      	movs	r2, #33	; 0x21
 8009c10:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1a:	d107      	bne.n	8009c2c <HAL_UART_Transmit_IT+0x80>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d103      	bne.n	8009c2c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4a0d      	ldr	r2, [pc, #52]	; (8009c5c <HAL_UART_Transmit_IT+0xb0>)
 8009c28:	669a      	str	r2, [r3, #104]	; 0x68
 8009c2a:	e002      	b.n	8009c32 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a0c      	ldr	r2, [pc, #48]	; (8009c60 <HAL_UART_Transmit_IT+0xb4>)
 8009c30:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e000      	b.n	8009c50 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8009c4e:	2302      	movs	r3, #2
  }
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	0800acbd 	.word	0x0800acbd
 8009c60:	0800ac49 	.word	0x0800ac49

08009c64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d131      	bne.n	8009cde <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <HAL_UART_Receive_IT+0x22>
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e02a      	b.n	8009ce0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_UART_Receive_IT+0x34>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e023      	b.n	8009ce0 <HAL_UART_Receive_IT+0x7c>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a0f      	ldr	r2, [pc, #60]	; (8009ce8 <HAL_UART_Receive_IT+0x84>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00e      	beq.n	8009cce <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ccc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 feaf 	bl	800aa38 <UART_Start_Receive_IT>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	e000      	b.n	8009ce0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8009cde:	2302      	movs	r3, #2
  }
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	40008000 	.word	0x40008000

08009cec <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d02:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0e:	2b80      	cmp	r3, #128	; 0x80
 8009d10:	d12d      	bne.n	8009d6e <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d20:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d013      	beq.n	8009d52 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d2e:	4a19      	ldr	r2, [pc, #100]	; (8009d94 <HAL_UART_AbortTransmit_IT+0xa8>)
 8009d30:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fb fcfa 	bl	8005730 <HAL_DMA_Abort_IT>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d022      	beq.n	8009d88 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4798      	blx	r3
 8009d50:	e01a      	b.n	8009d88 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2220      	movs	r2, #32
 8009d64:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa9a 	bl	800a2a0 <HAL_UART_AbortTransmitCpltCallback>
 8009d6c:	e00c      	b.n	8009d88 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	669a      	str	r2, [r3, #104]	; 0x68
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fa8c 	bl	800a2a0 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	0800abd3 	.word	0x0800abd3

08009d98 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009dae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0201 	bic.w	r2, r2, #1
 8009dbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d107      	bne.n	8009dd8 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0210 	bic.w	r2, r2, #16
 8009dd6:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d13e      	bne.n	8009e64 <HAL_UART_AbortReceive_IT+0xcc>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009df4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d013      	beq.n	8009e26 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	4a25      	ldr	r2, [pc, #148]	; (8009e98 <HAL_UART_AbortReceive_IT+0x100>)
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fb fc90 	bl	8005730 <HAL_DMA_Abort_IT>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d03a      	beq.n	8009e8c <HAL_UART_AbortReceive_IT+0xf4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	e032      	b.n	8009e8c <HAL_UART_AbortReceive_IT+0xf4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	220f      	movs	r2, #15
 8009e3a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	8b1b      	ldrh	r3, [r3, #24]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0208 	orr.w	r2, r2, #8
 8009e4c:	b292      	uxth	r2, r2
 8009e4e:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fa29 	bl	800a2b4 <HAL_UART_AbortReceiveCpltCallback>
 8009e62:	e013      	b.n	8009e8c <HAL_UART_AbortReceive_IT+0xf4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	220f      	movs	r2, #15
 8009e78:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa14 	bl	800a2b4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	0800abfd 	.word	0x0800abfd

08009e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ebc:	69fa      	ldr	r2, [r7, #28]
 8009ebe:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d113      	bne.n	8009ef4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	f003 0320 	and.w	r3, r3, #32
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00e      	beq.n	8009ef4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d009      	beq.n	8009ef4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 81ce 	beq.w	800a286 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
      }
      return;
 8009ef2:	e1c8      	b.n	800a286 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 80e3 	beq.w	800a0c2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	4ba6      	ldr	r3, [pc, #664]	; (800a1a4 <HAL_UART_IRQHandler+0x308>)
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80d8 	beq.w	800a0c2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d010      	beq.n	8009f3e <HAL_UART_IRQHandler+0xa2>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00b      	beq.n	8009f3e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f34:	f043 0201 	orr.w	r2, r3, #1
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d010      	beq.n	8009f6a <HAL_UART_IRQHandler+0xce>
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00b      	beq.n	8009f6a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2202      	movs	r2, #2
 8009f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f60:	f043 0204 	orr.w	r2, r3, #4
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d010      	beq.n	8009f96 <HAL_UART_IRQHandler+0xfa>
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2204      	movs	r2, #4
 8009f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f8c:	f043 0202 	orr.w	r2, r3, #2
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	f003 0308 	and.w	r3, r3, #8
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d015      	beq.n	8009fcc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	f003 0320 	and.w	r3, r3, #32
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d104      	bne.n	8009fb4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2208      	movs	r2, #8
 8009fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fc2:	f043 0208 	orr.w	r2, r3, #8
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d011      	beq.n	8009ffa <HAL_UART_IRQHandler+0x15e>
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00c      	beq.n	8009ffa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ff0:	f043 0220 	orr.w	r2, r3, #32
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8142 	beq.w	800a28a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00c      	beq.n	800a02a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d007      	beq.n	800a02a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a030:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03c:	2b40      	cmp	r3, #64	; 0x40
 800a03e:	d004      	beq.n	800a04a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a046:	2b00      	cmp	r3, #0
 800a048:	d031      	beq.n	800a0ae <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fd7c 	bl	800ab48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05a:	2b40      	cmp	r3, #64	; 0x40
 800a05c:	d123      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a06c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	2b00      	cmp	r3, #0
 800a074:	d013      	beq.n	800a09e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07a:	4a4b      	ldr	r2, [pc, #300]	; (800a1a8 <HAL_UART_IRQHandler+0x30c>)
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a082:	4618      	mov	r0, r3
 800a084:	f7fb fb54 	bl	8005730 <HAL_DMA_Abort_IT>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d017      	beq.n	800a0be <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09c:	e00f      	b.n	800a0be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7f8 f838 	bl	8002114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a4:	e00b      	b.n	800a0be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7f8 f834 	bl	8002114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ac:	e007      	b.n	800a0be <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7f8 f830 	bl	8002114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a0bc:	e0e5      	b.n	800a28a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0be:	bf00      	nop
    return;
 800a0c0:	e0e3      	b.n	800a28a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	f040 80a9 	bne.w	800a21e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f003 0310 	and.w	r3, r3, #16
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 80a3 	beq.w	800a21e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	f003 0310 	and.w	r3, r3, #16
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 809d 	beq.w	800a21e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f6:	2b40      	cmp	r3, #64	; 0x40
 800a0f8:	d158      	bne.n	800a1ac <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800a104:	893b      	ldrh	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80c1 	beq.w	800a28e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a112:	893a      	ldrh	r2, [r7, #8]
 800a114:	429a      	cmp	r2, r3
 800a116:	f080 80ba 	bcs.w	800a28e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	893a      	ldrh	r2, [r7, #8]
 800a11e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0320 	and.w	r3, r3, #32
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d12a      	bne.n	800a188 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a140:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0201 	bic.w	r2, r2, #1
 800a150:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a160:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2220      	movs	r2, #32
 800a166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0210 	bic.w	r2, r2, #16
 800a17c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	4618      	mov	r0, r3
 800a184:	f7fb fa96 	bl	80056b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a194:	b29b      	uxth	r3, r3
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f893 	bl	800a2c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a1a2:	e074      	b.n	800a28e <HAL_UART_IRQHandler+0x3f2>
 800a1a4:	04000120 	.word	0x04000120
 800a1a8:	0800aba7 	.word	0x0800aba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d063      	beq.n	800a292 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800a1ca:	897b      	ldrh	r3, [r7, #10]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d060      	beq.n	800a292 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a1de:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0201 	bic.w	r2, r2, #1
 800a1ee:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2220      	movs	r2, #32
 800a1f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f022 0210 	bic.w	r2, r2, #16
 800a210:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a212:	897b      	ldrh	r3, [r7, #10]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f856 	bl	800a2c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a21c:	e039      	b.n	800a292 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00d      	beq.n	800a244 <HAL_UART_IRQHandler+0x3a8>
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d008      	beq.n	800a244 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a23a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fe6c 	bl	800af1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a242:	e029      	b.n	800a298 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00d      	beq.n	800a26a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a254:	2b00      	cmp	r3, #0
 800a256:	d008      	beq.n	800a26a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d01a      	beq.n	800a296 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	4798      	blx	r3
    }
    return;
 800a268:	e015      	b.n	800a296 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a270:	2b00      	cmp	r3, #0
 800a272:	d011      	beq.n	800a298 <HAL_UART_IRQHandler+0x3fc>
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fd5a 	bl	800ad38 <UART_EndTransmit_IT>
    return;
 800a284:	e008      	b.n	800a298 <HAL_UART_IRQHandler+0x3fc>
      return;
 800a286:	bf00      	nop
 800a288:	e006      	b.n	800a298 <HAL_UART_IRQHandler+0x3fc>
    return;
 800a28a:	bf00      	nop
 800a28c:	e004      	b.n	800a298 <HAL_UART_IRQHandler+0x3fc>
      return;
 800a28e:	bf00      	nop
 800a290:	e002      	b.n	800a298 <HAL_UART_IRQHandler+0x3fc>
      return;
 800a292:	bf00      	nop
 800a294:	e000      	b.n	800a298 <HAL_UART_IRQHandler+0x3fc>
    return;
 800a296:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a298:	3720      	adds	r7, #32
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop

0800a2a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a17      	ldr	r2, [pc, #92]	; (800a34c <HAL_UART_EnableReceiverTimeout+0x6c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d024      	beq.n	800a33c <HAL_UART_EnableReceiverTimeout+0x5c>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2f6:	2b20      	cmp	r3, #32
 800a2f8:	d11e      	bne.n	800a338 <HAL_UART_EnableReceiverTimeout+0x58>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_UART_EnableReceiverTimeout+0x28>
 800a304:	2302      	movs	r3, #2
 800a306:	e01a      	b.n	800a33e <HAL_UART_EnableReceiverTimeout+0x5e>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      huart->gState = HAL_UART_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2224      	movs	r2, #36	; 0x24
 800a314:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a324:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	e002      	b.n	800a33e <HAL_UART_EnableReceiverTimeout+0x5e>
    }
    else
    {
      return HAL_BUSY;
 800a338:	2302      	movs	r3, #2
 800a33a:	e000      	b.n	800a33e <HAL_UART_EnableReceiverTimeout+0x5e>
    }
  }
  else
  {
    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
  }
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	40008000 	.word	0x40008000

0800a350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a350:	b5b0      	push	{r4, r5, r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	431a      	orrs	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	431a      	orrs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	4313      	orrs	r3, r2
 800a372:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	4baf      	ldr	r3, [pc, #700]	; (800a638 <UART_SetConfig+0x2e8>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6812      	ldr	r2, [r2, #0]
 800a382:	69f9      	ldr	r1, [r7, #28]
 800a384:	430b      	orrs	r3, r1
 800a386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4aa4      	ldr	r2, [pc, #656]	; (800a63c <UART_SetConfig+0x2ec>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d004      	beq.n	800a3b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a9b      	ldr	r2, [pc, #620]	; (800a640 <UART_SetConfig+0x2f0>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d121      	bne.n	800a41a <UART_SetConfig+0xca>
 800a3d6:	4b9b      	ldr	r3, [pc, #620]	; (800a644 <UART_SetConfig+0x2f4>)
 800a3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d817      	bhi.n	800a414 <UART_SetConfig+0xc4>
 800a3e4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <UART_SetConfig+0x9c>)
 800a3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ea:	bf00      	nop
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a403 	.word	0x0800a403
 800a3f8:	0800a40f 	.word	0x0800a40f
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	76fb      	strb	r3, [r7, #27]
 800a400:	e070      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a402:	2302      	movs	r3, #2
 800a404:	76fb      	strb	r3, [r7, #27]
 800a406:	e06d      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a408:	2304      	movs	r3, #4
 800a40a:	76fb      	strb	r3, [r7, #27]
 800a40c:	e06a      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a40e:	2308      	movs	r3, #8
 800a410:	76fb      	strb	r3, [r7, #27]
 800a412:	e067      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a414:	2310      	movs	r3, #16
 800a416:	76fb      	strb	r3, [r7, #27]
 800a418:	e064      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a8a      	ldr	r2, [pc, #552]	; (800a648 <UART_SetConfig+0x2f8>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d132      	bne.n	800a48a <UART_SetConfig+0x13a>
 800a424:	4b87      	ldr	r3, [pc, #540]	; (800a644 <UART_SetConfig+0x2f4>)
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	f003 030c 	and.w	r3, r3, #12
 800a42e:	2b0c      	cmp	r3, #12
 800a430:	d828      	bhi.n	800a484 <UART_SetConfig+0x134>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <UART_SetConfig+0xe8>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a46d 	.word	0x0800a46d
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a485 	.word	0x0800a485
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a479 	.word	0x0800a479
 800a44c:	0800a485 	.word	0x0800a485
 800a450:	0800a485 	.word	0x0800a485
 800a454:	0800a485 	.word	0x0800a485
 800a458:	0800a473 	.word	0x0800a473
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a47f 	.word	0x0800a47f
 800a46c:	2300      	movs	r3, #0
 800a46e:	76fb      	strb	r3, [r7, #27]
 800a470:	e038      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a472:	2302      	movs	r3, #2
 800a474:	76fb      	strb	r3, [r7, #27]
 800a476:	e035      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a478:	2304      	movs	r3, #4
 800a47a:	76fb      	strb	r3, [r7, #27]
 800a47c:	e032      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a47e:	2308      	movs	r3, #8
 800a480:	76fb      	strb	r3, [r7, #27]
 800a482:	e02f      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a484:	2310      	movs	r3, #16
 800a486:	76fb      	strb	r3, [r7, #27]
 800a488:	e02c      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a6b      	ldr	r2, [pc, #428]	; (800a63c <UART_SetConfig+0x2ec>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d125      	bne.n	800a4e0 <UART_SetConfig+0x190>
 800a494:	4b6b      	ldr	r3, [pc, #428]	; (800a644 <UART_SetConfig+0x2f4>)
 800a496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a49e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4a2:	d017      	beq.n	800a4d4 <UART_SetConfig+0x184>
 800a4a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4a8:	d817      	bhi.n	800a4da <UART_SetConfig+0x18a>
 800a4aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ae:	d00b      	beq.n	800a4c8 <UART_SetConfig+0x178>
 800a4b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4b4:	d811      	bhi.n	800a4da <UART_SetConfig+0x18a>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <UART_SetConfig+0x172>
 800a4ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4be:	d006      	beq.n	800a4ce <UART_SetConfig+0x17e>
 800a4c0:	e00b      	b.n	800a4da <UART_SetConfig+0x18a>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	76fb      	strb	r3, [r7, #27]
 800a4c6:	e00d      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	76fb      	strb	r3, [r7, #27]
 800a4cc:	e00a      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a4ce:	2304      	movs	r3, #4
 800a4d0:	76fb      	strb	r3, [r7, #27]
 800a4d2:	e007      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a4d4:	2308      	movs	r3, #8
 800a4d6:	76fb      	strb	r3, [r7, #27]
 800a4d8:	e004      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a4da:	2310      	movs	r3, #16
 800a4dc:	76fb      	strb	r3, [r7, #27]
 800a4de:	e001      	b.n	800a4e4 <UART_SetConfig+0x194>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a54      	ldr	r2, [pc, #336]	; (800a63c <UART_SetConfig+0x2ec>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d173      	bne.n	800a5d6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4ee:	7efb      	ldrb	r3, [r7, #27]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d824      	bhi.n	800a53e <UART_SetConfig+0x1ee>
 800a4f4:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <UART_SetConfig+0x1ac>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a53f 	.word	0x0800a53f
 800a504:	0800a529 	.word	0x0800a529
 800a508:	0800a53f 	.word	0x0800a53f
 800a50c:	0800a52f 	.word	0x0800a52f
 800a510:	0800a53f 	.word	0x0800a53f
 800a514:	0800a53f 	.word	0x0800a53f
 800a518:	0800a53f 	.word	0x0800a53f
 800a51c:	0800a537 	.word	0x0800a537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a520:	f7fd fff4 	bl	800850c <HAL_RCC_GetPCLK1Freq>
 800a524:	6178      	str	r0, [r7, #20]
        break;
 800a526:	e00f      	b.n	800a548 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a528:	4b48      	ldr	r3, [pc, #288]	; (800a64c <UART_SetConfig+0x2fc>)
 800a52a:	617b      	str	r3, [r7, #20]
        break;
 800a52c:	e00c      	b.n	800a548 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a52e:	f7fd ff55 	bl	80083dc <HAL_RCC_GetSysClockFreq>
 800a532:	6178      	str	r0, [r7, #20]
        break;
 800a534:	e008      	b.n	800a548 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a53a:	617b      	str	r3, [r7, #20]
        break;
 800a53c:	e004      	b.n	800a548 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	76bb      	strb	r3, [r7, #26]
        break;
 800a546:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 80fe 	beq.w	800a74c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	4613      	mov	r3, r2
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	4413      	add	r3, r2
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d305      	bcc.n	800a56c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d902      	bls.n	800a572 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	76bb      	strb	r3, [r7, #26]
 800a570:	e0ec      	b.n	800a74c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	4618      	mov	r0, r3
 800a576:	f04f 0100 	mov.w	r1, #0
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	020b      	lsls	r3, r1, #8
 800a584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a588:	0202      	lsls	r2, r0, #8
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	6849      	ldr	r1, [r1, #4]
 800a58e:	0849      	lsrs	r1, r1, #1
 800a590:	4608      	mov	r0, r1
 800a592:	f04f 0100 	mov.w	r1, #0
 800a596:	1814      	adds	r4, r2, r0
 800a598:	eb43 0501 	adc.w	r5, r3, r1
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	f04f 0300 	mov.w	r3, #0
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f5 fe61 	bl	8000270 <__aeabi_uldivmod>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5bc:	d308      	bcc.n	800a5d0 <UART_SetConfig+0x280>
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5c4:	d204      	bcs.n	800a5d0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	60da      	str	r2, [r3, #12]
 800a5ce:	e0bd      	b.n	800a74c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	76bb      	strb	r3, [r7, #26]
 800a5d4:	e0ba      	b.n	800a74c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5de:	d168      	bne.n	800a6b2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800a5e0:	7efb      	ldrb	r3, [r7, #27]
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d834      	bhi.n	800a650 <UART_SetConfig+0x300>
 800a5e6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ec <UART_SetConfig+0x29c>)
 800a5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ec:	0800a611 	.word	0x0800a611
 800a5f0:	0800a619 	.word	0x0800a619
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	0800a651 	.word	0x0800a651
 800a5fc:	0800a627 	.word	0x0800a627
 800a600:	0800a651 	.word	0x0800a651
 800a604:	0800a651 	.word	0x0800a651
 800a608:	0800a651 	.word	0x0800a651
 800a60c:	0800a62f 	.word	0x0800a62f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a610:	f7fd ff7c 	bl	800850c <HAL_RCC_GetPCLK1Freq>
 800a614:	6178      	str	r0, [r7, #20]
        break;
 800a616:	e020      	b.n	800a65a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a618:	f7fd ff8e 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 800a61c:	6178      	str	r0, [r7, #20]
        break;
 800a61e:	e01c      	b.n	800a65a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <UART_SetConfig+0x2fc>)
 800a622:	617b      	str	r3, [r7, #20]
        break;
 800a624:	e019      	b.n	800a65a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a626:	f7fd fed9 	bl	80083dc <HAL_RCC_GetSysClockFreq>
 800a62a:	6178      	str	r0, [r7, #20]
        break;
 800a62c:	e015      	b.n	800a65a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a62e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a632:	617b      	str	r3, [r7, #20]
        break;
 800a634:	e011      	b.n	800a65a <UART_SetConfig+0x30a>
 800a636:	bf00      	nop
 800a638:	efff69f3 	.word	0xefff69f3
 800a63c:	40008000 	.word	0x40008000
 800a640:	40013800 	.word	0x40013800
 800a644:	40021000 	.word	0x40021000
 800a648:	40004400 	.word	0x40004400
 800a64c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	76bb      	strb	r3, [r7, #26]
        break;
 800a658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d075      	beq.n	800a74c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	005a      	lsls	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	441a      	add	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	fbb2 f3f3 	udiv	r3, r2, r3
 800a674:	b29b      	uxth	r3, r3
 800a676:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2b0f      	cmp	r3, #15
 800a67c:	d916      	bls.n	800a6ac <UART_SetConfig+0x35c>
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a684:	d212      	bcs.n	800a6ac <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	b29b      	uxth	r3, r3
 800a68a:	f023 030f 	bic.w	r3, r3, #15
 800a68e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	085b      	lsrs	r3, r3, #1
 800a694:	b29b      	uxth	r3, r3
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	89fb      	ldrh	r3, [r7, #14]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	89fa      	ldrh	r2, [r7, #14]
 800a6a8:	60da      	str	r2, [r3, #12]
 800a6aa:	e04f      	b.n	800a74c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	76bb      	strb	r3, [r7, #26]
 800a6b0:	e04c      	b.n	800a74c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6b2:	7efb      	ldrb	r3, [r7, #27]
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d828      	bhi.n	800a70a <UART_SetConfig+0x3ba>
 800a6b8:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <UART_SetConfig+0x370>)
 800a6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6be:	bf00      	nop
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a6ed 	.word	0x0800a6ed
 800a6c8:	0800a6f5 	.word	0x0800a6f5
 800a6cc:	0800a70b 	.word	0x0800a70b
 800a6d0:	0800a6fb 	.word	0x0800a6fb
 800a6d4:	0800a70b 	.word	0x0800a70b
 800a6d8:	0800a70b 	.word	0x0800a70b
 800a6dc:	0800a70b 	.word	0x0800a70b
 800a6e0:	0800a703 	.word	0x0800a703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e4:	f7fd ff12 	bl	800850c <HAL_RCC_GetPCLK1Freq>
 800a6e8:	6178      	str	r0, [r7, #20]
        break;
 800a6ea:	e013      	b.n	800a714 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6ec:	f7fd ff24 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 800a6f0:	6178      	str	r0, [r7, #20]
        break;
 800a6f2:	e00f      	b.n	800a714 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6f4:	4b1b      	ldr	r3, [pc, #108]	; (800a764 <UART_SetConfig+0x414>)
 800a6f6:	617b      	str	r3, [r7, #20]
        break;
 800a6f8:	e00c      	b.n	800a714 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6fa:	f7fd fe6f 	bl	80083dc <HAL_RCC_GetSysClockFreq>
 800a6fe:	6178      	str	r0, [r7, #20]
        break;
 800a700:	e008      	b.n	800a714 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a706:	617b      	str	r3, [r7, #20]
        break;
 800a708:	e004      	b.n	800a714 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	76bb      	strb	r3, [r7, #26]
        break;
 800a712:	bf00      	nop
    }

    if (pclk != 0U)
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d018      	beq.n	800a74c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085a      	lsrs	r2, r3, #1
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	441a      	add	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2b0f      	cmp	r3, #15
 800a734:	d908      	bls.n	800a748 <UART_SetConfig+0x3f8>
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a73c:	d204      	bcs.n	800a748 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	60da      	str	r2, [r3, #12]
 800a746:	e001      	b.n	800a74c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a758:	7ebb      	ldrb	r3, [r7, #26]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bdb0      	pop	{r4, r5, r7, pc}
 800a762:	bf00      	nop
 800a764:	00f42400 	.word	0x00f42400

0800a768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	430a      	orrs	r2, r1
 800a7f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00a      	beq.n	800a81a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	f003 0320 	and.w	r3, r3, #32
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00a      	beq.n	800a83c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01a      	beq.n	800a87e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a866:	d10a      	bne.n	800a87e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	605a      	str	r2, [r3, #4]
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8bc:	f7f9 f85c 	bl	8003978 <HAL_GetTick>
 800a8c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0308 	and.w	r3, r3, #8
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d10e      	bne.n	800a8ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f82d 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e023      	b.n	800a936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d10e      	bne.n	800a91a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f817 	bl	800a93e <UART_WaitOnFlagUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d001      	beq.n	800a91a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e00d      	b.n	800a936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2220      	movs	r2, #32
 800a91e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2220      	movs	r2, #32
 800a924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	4613      	mov	r3, r2
 800a94c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a94e:	e05e      	b.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d05a      	beq.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a958:	f7f9 f80e 	bl	8003978 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	429a      	cmp	r2, r3
 800a966:	d302      	bcc.n	800a96e <UART_WaitOnFlagUntilTimeout+0x30>
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d11b      	bne.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a97c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0201 	bic.w	r2, r2, #1
 800a98c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2220      	movs	r2, #32
 800a992:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2220      	movs	r2, #32
 800a998:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e043      	b.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d02c      	beq.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c2:	d124      	bne.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9cc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0201 	bic.w	r2, r2, #1
 800a9ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e00f      	b.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	69da      	ldr	r2, [r3, #28]
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4013      	ands	r3, r2
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	bf0c      	ite	eq
 800aa1e:	2301      	moveq	r3, #1
 800aa20:	2300      	movne	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d091      	beq.n	800a950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	88fa      	ldrh	r2, [r7, #6]
 800aa50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	88fa      	ldrh	r2, [r7, #6]
 800aa58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa6a:	d10e      	bne.n	800aa8a <UART_Start_Receive_IT+0x52>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d105      	bne.n	800aa80 <UART_Start_Receive_IT+0x48>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aa7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa7e:	e02d      	b.n	800aadc <UART_Start_Receive_IT+0xa4>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	22ff      	movs	r2, #255	; 0xff
 800aa84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa88:	e028      	b.n	800aadc <UART_Start_Receive_IT+0xa4>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10d      	bne.n	800aaae <UART_Start_Receive_IT+0x76>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <UART_Start_Receive_IT+0x6c>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	22ff      	movs	r2, #255	; 0xff
 800aa9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaa2:	e01b      	b.n	800aadc <UART_Start_Receive_IT+0xa4>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	227f      	movs	r2, #127	; 0x7f
 800aaa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaac:	e016      	b.n	800aadc <UART_Start_Receive_IT+0xa4>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aab6:	d10d      	bne.n	800aad4 <UART_Start_Receive_IT+0x9c>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d104      	bne.n	800aaca <UART_Start_Receive_IT+0x92>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	227f      	movs	r2, #127	; 0x7f
 800aac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aac8:	e008      	b.n	800aadc <UART_Start_Receive_IT+0xa4>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	223f      	movs	r2, #63	; 0x3f
 800aace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aad2:	e003      	b.n	800aadc <UART_Start_Receive_IT+0xa4>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2222      	movs	r2, #34	; 0x22
 800aae8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	689a      	ldr	r2, [r3, #8]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab02:	d107      	bne.n	800ab14 <UART_Start_Receive_IT+0xdc>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d103      	bne.n	800ab14 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4a0c      	ldr	r2, [pc, #48]	; (800ab40 <UART_Start_Receive_IT+0x108>)
 800ab10:	665a      	str	r2, [r3, #100]	; 0x64
 800ab12:	e002      	b.n	800ab1a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4a0b      	ldr	r2, [pc, #44]	; (800ab44 <UART_Start_Receive_IT+0x10c>)
 800ab18:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ab30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	0800ae43 	.word	0x0800ae43
 800ab44:	0800ad6b 	.word	0x0800ad6b

0800ab48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f022 0201 	bic.w	r2, r2, #1
 800ab6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d107      	bne.n	800ab88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0210 	bic.w	r2, r2, #16
 800ab86:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ab9a:	bf00      	nop
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b084      	sub	sp, #16
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f7f7 faa5 	bl	8002114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abde:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2220      	movs	r2, #32
 800abec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff fb56 	bl	800a2a0 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	220f      	movs	r2, #15
 800ac18:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	8b1b      	ldrh	r3, [r3, #24]
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0208 	orr.w	r2, r2, #8
 800ac2a:	b292      	uxth	r2, r2
 800ac2c:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2220      	movs	r2, #32
 800ac32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff fb3a 	bl	800a2b4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac54:	2b21      	cmp	r3, #33	; 0x21
 800ac56:	d12b      	bne.n	800acb0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d110      	bne.n	800ac86 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac72:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac82:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ac84:	e014      	b.n	800acb0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8a:	781a      	ldrb	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	b292      	uxth	r2, r2
 800ac92:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	3b01      	subs	r3, #1
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc8:	2b21      	cmp	r3, #33	; 0x21
 800acca:	d12f      	bne.n	800ad2c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d110      	bne.n	800acfa <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ace6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acf6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800acf8:	e018      	b.n	800ad2c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	881a      	ldrh	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad0c:	b292      	uxth	r2, r2
 800ad0e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad14:	1c9a      	adds	r2, r3, #2
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	3b01      	subs	r3, #1
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ad2c:	bf00      	nop
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2220      	movs	r2, #32
 800ad54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7f7 f9b9 	bl	80020d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad78:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7e:	2b22      	cmp	r3, #34	; 0x22
 800ad80:	d151      	bne.n	800ae26 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ad88:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad8a:	89bb      	ldrh	r3, [r7, #12]
 800ad8c:	b2d9      	uxtb	r1, r3
 800ad8e:	89fb      	ldrh	r3, [r7, #14]
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad96:	400a      	ands	r2, r1
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d13a      	bne.n	800ae3a <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800add2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0201 	bic.w	r2, r2, #1
 800ade2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d10f      	bne.n	800ae18 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 0210 	bic.w	r2, r2, #16
 800ae06:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff fa59 	bl	800a2c8 <HAL_UARTEx_RxEventCallback>
 800ae16:	e002      	b.n	800ae1e <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7f7 f96b 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae24:	e009      	b.n	800ae3a <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	8b1b      	ldrh	r3, [r3, #24]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f042 0208 	orr.w	r2, r2, #8
 800ae36:	b292      	uxth	r2, r2
 800ae38:	831a      	strh	r2, [r3, #24]
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae50:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae56:	2b22      	cmp	r3, #34	; 0x22
 800ae58:	d151      	bne.n	800aefe <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae60:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae66:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ae68:	89ba      	ldrh	r2, [r7, #12]
 800ae6a:	89fb      	ldrh	r3, [r7, #14]
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae78:	1c9a      	adds	r2, r3, #2
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d13a      	bne.n	800af12 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aeaa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	689a      	ldr	r2, [r3, #8]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0201 	bic.w	r2, r2, #1
 800aeba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d10f      	bne.n	800aef0 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 0210 	bic.w	r2, r2, #16
 800aede:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff f9ed 	bl	800a2c8 <HAL_UARTEx_RxEventCallback>
 800aeee:	e002      	b.n	800aef6 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7f7 f8ff 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aefc:	e009      	b.n	800af12 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	8b1b      	ldrh	r3, [r3, #24]
 800af04:	b29a      	uxth	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f042 0208 	orr.w	r2, r2, #8
 800af0e:	b292      	uxth	r2, r2
 800af10:	831a      	strh	r2, [r3, #24]
}
 800af12:	bf00      	nop
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af22:	bf00      	nop
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
	...

0800af30 <__errno>:
 800af30:	4b01      	ldr	r3, [pc, #4]	; (800af38 <__errno+0x8>)
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	2000000c 	.word	0x2000000c

0800af3c <__libc_init_array>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4d0d      	ldr	r5, [pc, #52]	; (800af74 <__libc_init_array+0x38>)
 800af40:	4c0d      	ldr	r4, [pc, #52]	; (800af78 <__libc_init_array+0x3c>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	2600      	movs	r6, #0
 800af48:	42a6      	cmp	r6, r4
 800af4a:	d109      	bne.n	800af60 <__libc_init_array+0x24>
 800af4c:	4d0b      	ldr	r5, [pc, #44]	; (800af7c <__libc_init_array+0x40>)
 800af4e:	4c0c      	ldr	r4, [pc, #48]	; (800af80 <__libc_init_array+0x44>)
 800af50:	f000 fc62 	bl	800b818 <_init>
 800af54:	1b64      	subs	r4, r4, r5
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	2600      	movs	r6, #0
 800af5a:	42a6      	cmp	r6, r4
 800af5c:	d105      	bne.n	800af6a <__libc_init_array+0x2e>
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	f855 3b04 	ldr.w	r3, [r5], #4
 800af64:	4798      	blx	r3
 800af66:	3601      	adds	r6, #1
 800af68:	e7ee      	b.n	800af48 <__libc_init_array+0xc>
 800af6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6e:	4798      	blx	r3
 800af70:	3601      	adds	r6, #1
 800af72:	e7f2      	b.n	800af5a <__libc_init_array+0x1e>
 800af74:	0800c064 	.word	0x0800c064
 800af78:	0800c064 	.word	0x0800c064
 800af7c:	0800c064 	.word	0x0800c064
 800af80:	0800c068 	.word	0x0800c068

0800af84 <memcpy>:
 800af84:	440a      	add	r2, r1
 800af86:	4291      	cmp	r1, r2
 800af88:	f100 33ff 	add.w	r3, r0, #4294967295
 800af8c:	d100      	bne.n	800af90 <memcpy+0xc>
 800af8e:	4770      	bx	lr
 800af90:	b510      	push	{r4, lr}
 800af92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af9a:	4291      	cmp	r1, r2
 800af9c:	d1f9      	bne.n	800af92 <memcpy+0xe>
 800af9e:	bd10      	pop	{r4, pc}

0800afa0 <memset>:
 800afa0:	4402      	add	r2, r0
 800afa2:	4603      	mov	r3, r0
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d100      	bne.n	800afaa <memset+0xa>
 800afa8:	4770      	bx	lr
 800afaa:	f803 1b01 	strb.w	r1, [r3], #1
 800afae:	e7f9      	b.n	800afa4 <memset+0x4>

0800afb0 <sniprintf>:
 800afb0:	b40c      	push	{r2, r3}
 800afb2:	b530      	push	{r4, r5, lr}
 800afb4:	4b17      	ldr	r3, [pc, #92]	; (800b014 <sniprintf+0x64>)
 800afb6:	1e0c      	subs	r4, r1, #0
 800afb8:	681d      	ldr	r5, [r3, #0]
 800afba:	b09d      	sub	sp, #116	; 0x74
 800afbc:	da08      	bge.n	800afd0 <sniprintf+0x20>
 800afbe:	238b      	movs	r3, #139	; 0x8b
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	f04f 30ff 	mov.w	r0, #4294967295
 800afc6:	b01d      	add	sp, #116	; 0x74
 800afc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afcc:	b002      	add	sp, #8
 800afce:	4770      	bx	lr
 800afd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800afd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800afd8:	bf14      	ite	ne
 800afda:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afde:	4623      	moveq	r3, r4
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afe8:	9002      	str	r0, [sp, #8]
 800afea:	9006      	str	r0, [sp, #24]
 800afec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aff0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aff2:	ab21      	add	r3, sp, #132	; 0x84
 800aff4:	a902      	add	r1, sp, #8
 800aff6:	4628      	mov	r0, r5
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	f000 f869 	bl	800b0d0 <_svfiprintf_r>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	bfbc      	itt	lt
 800b002:	238b      	movlt	r3, #139	; 0x8b
 800b004:	602b      	strlt	r3, [r5, #0]
 800b006:	2c00      	cmp	r4, #0
 800b008:	d0dd      	beq.n	800afc6 <sniprintf+0x16>
 800b00a:	9b02      	ldr	r3, [sp, #8]
 800b00c:	2200      	movs	r2, #0
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e7d9      	b.n	800afc6 <sniprintf+0x16>
 800b012:	bf00      	nop
 800b014:	2000000c 	.word	0x2000000c

0800b018 <__ssputs_r>:
 800b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	688e      	ldr	r6, [r1, #8]
 800b01e:	429e      	cmp	r6, r3
 800b020:	4682      	mov	sl, r0
 800b022:	460c      	mov	r4, r1
 800b024:	4690      	mov	r8, r2
 800b026:	461f      	mov	r7, r3
 800b028:	d838      	bhi.n	800b09c <__ssputs_r+0x84>
 800b02a:	898a      	ldrh	r2, [r1, #12]
 800b02c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b030:	d032      	beq.n	800b098 <__ssputs_r+0x80>
 800b032:	6825      	ldr	r5, [r4, #0]
 800b034:	6909      	ldr	r1, [r1, #16]
 800b036:	eba5 0901 	sub.w	r9, r5, r1
 800b03a:	6965      	ldr	r5, [r4, #20]
 800b03c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b044:	3301      	adds	r3, #1
 800b046:	444b      	add	r3, r9
 800b048:	106d      	asrs	r5, r5, #1
 800b04a:	429d      	cmp	r5, r3
 800b04c:	bf38      	it	cc
 800b04e:	461d      	movcc	r5, r3
 800b050:	0553      	lsls	r3, r2, #21
 800b052:	d531      	bpl.n	800b0b8 <__ssputs_r+0xa0>
 800b054:	4629      	mov	r1, r5
 800b056:	f000 fb39 	bl	800b6cc <_malloc_r>
 800b05a:	4606      	mov	r6, r0
 800b05c:	b950      	cbnz	r0, 800b074 <__ssputs_r+0x5c>
 800b05e:	230c      	movs	r3, #12
 800b060:	f8ca 3000 	str.w	r3, [sl]
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	f04f 30ff 	mov.w	r0, #4294967295
 800b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b074:	6921      	ldr	r1, [r4, #16]
 800b076:	464a      	mov	r2, r9
 800b078:	f7ff ff84 	bl	800af84 <memcpy>
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	6126      	str	r6, [r4, #16]
 800b08a:	6165      	str	r5, [r4, #20]
 800b08c:	444e      	add	r6, r9
 800b08e:	eba5 0509 	sub.w	r5, r5, r9
 800b092:	6026      	str	r6, [r4, #0]
 800b094:	60a5      	str	r5, [r4, #8]
 800b096:	463e      	mov	r6, r7
 800b098:	42be      	cmp	r6, r7
 800b09a:	d900      	bls.n	800b09e <__ssputs_r+0x86>
 800b09c:	463e      	mov	r6, r7
 800b09e:	4632      	mov	r2, r6
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	4641      	mov	r1, r8
 800b0a4:	f000 faa8 	bl	800b5f8 <memmove>
 800b0a8:	68a3      	ldr	r3, [r4, #8]
 800b0aa:	6822      	ldr	r2, [r4, #0]
 800b0ac:	1b9b      	subs	r3, r3, r6
 800b0ae:	4432      	add	r2, r6
 800b0b0:	60a3      	str	r3, [r4, #8]
 800b0b2:	6022      	str	r2, [r4, #0]
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7db      	b.n	800b070 <__ssputs_r+0x58>
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	f000 fb61 	bl	800b780 <_realloc_r>
 800b0be:	4606      	mov	r6, r0
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d1e1      	bne.n	800b088 <__ssputs_r+0x70>
 800b0c4:	6921      	ldr	r1, [r4, #16]
 800b0c6:	4650      	mov	r0, sl
 800b0c8:	f000 fab0 	bl	800b62c <_free_r>
 800b0cc:	e7c7      	b.n	800b05e <__ssputs_r+0x46>
	...

0800b0d0 <_svfiprintf_r>:
 800b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d4:	4698      	mov	r8, r3
 800b0d6:	898b      	ldrh	r3, [r1, #12]
 800b0d8:	061b      	lsls	r3, r3, #24
 800b0da:	b09d      	sub	sp, #116	; 0x74
 800b0dc:	4607      	mov	r7, r0
 800b0de:	460d      	mov	r5, r1
 800b0e0:	4614      	mov	r4, r2
 800b0e2:	d50e      	bpl.n	800b102 <_svfiprintf_r+0x32>
 800b0e4:	690b      	ldr	r3, [r1, #16]
 800b0e6:	b963      	cbnz	r3, 800b102 <_svfiprintf_r+0x32>
 800b0e8:	2140      	movs	r1, #64	; 0x40
 800b0ea:	f000 faef 	bl	800b6cc <_malloc_r>
 800b0ee:	6028      	str	r0, [r5, #0]
 800b0f0:	6128      	str	r0, [r5, #16]
 800b0f2:	b920      	cbnz	r0, 800b0fe <_svfiprintf_r+0x2e>
 800b0f4:	230c      	movs	r3, #12
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	e0d1      	b.n	800b2a2 <_svfiprintf_r+0x1d2>
 800b0fe:	2340      	movs	r3, #64	; 0x40
 800b100:	616b      	str	r3, [r5, #20]
 800b102:	2300      	movs	r3, #0
 800b104:	9309      	str	r3, [sp, #36]	; 0x24
 800b106:	2320      	movs	r3, #32
 800b108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b110:	2330      	movs	r3, #48	; 0x30
 800b112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2bc <_svfiprintf_r+0x1ec>
 800b116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b11a:	f04f 0901 	mov.w	r9, #1
 800b11e:	4623      	mov	r3, r4
 800b120:	469a      	mov	sl, r3
 800b122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b126:	b10a      	cbz	r2, 800b12c <_svfiprintf_r+0x5c>
 800b128:	2a25      	cmp	r2, #37	; 0x25
 800b12a:	d1f9      	bne.n	800b120 <_svfiprintf_r+0x50>
 800b12c:	ebba 0b04 	subs.w	fp, sl, r4
 800b130:	d00b      	beq.n	800b14a <_svfiprintf_r+0x7a>
 800b132:	465b      	mov	r3, fp
 800b134:	4622      	mov	r2, r4
 800b136:	4629      	mov	r1, r5
 800b138:	4638      	mov	r0, r7
 800b13a:	f7ff ff6d 	bl	800b018 <__ssputs_r>
 800b13e:	3001      	adds	r0, #1
 800b140:	f000 80aa 	beq.w	800b298 <_svfiprintf_r+0x1c8>
 800b144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b146:	445a      	add	r2, fp
 800b148:	9209      	str	r2, [sp, #36]	; 0x24
 800b14a:	f89a 3000 	ldrb.w	r3, [sl]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80a2 	beq.w	800b298 <_svfiprintf_r+0x1c8>
 800b154:	2300      	movs	r3, #0
 800b156:	f04f 32ff 	mov.w	r2, #4294967295
 800b15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b15e:	f10a 0a01 	add.w	sl, sl, #1
 800b162:	9304      	str	r3, [sp, #16]
 800b164:	9307      	str	r3, [sp, #28]
 800b166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b16a:	931a      	str	r3, [sp, #104]	; 0x68
 800b16c:	4654      	mov	r4, sl
 800b16e:	2205      	movs	r2, #5
 800b170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b174:	4851      	ldr	r0, [pc, #324]	; (800b2bc <_svfiprintf_r+0x1ec>)
 800b176:	f7f5 f82b 	bl	80001d0 <memchr>
 800b17a:	9a04      	ldr	r2, [sp, #16]
 800b17c:	b9d8      	cbnz	r0, 800b1b6 <_svfiprintf_r+0xe6>
 800b17e:	06d0      	lsls	r0, r2, #27
 800b180:	bf44      	itt	mi
 800b182:	2320      	movmi	r3, #32
 800b184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b188:	0711      	lsls	r1, r2, #28
 800b18a:	bf44      	itt	mi
 800b18c:	232b      	movmi	r3, #43	; 0x2b
 800b18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b192:	f89a 3000 	ldrb.w	r3, [sl]
 800b196:	2b2a      	cmp	r3, #42	; 0x2a
 800b198:	d015      	beq.n	800b1c6 <_svfiprintf_r+0xf6>
 800b19a:	9a07      	ldr	r2, [sp, #28]
 800b19c:	4654      	mov	r4, sl
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f04f 0c0a 	mov.w	ip, #10
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1aa:	3b30      	subs	r3, #48	; 0x30
 800b1ac:	2b09      	cmp	r3, #9
 800b1ae:	d94e      	bls.n	800b24e <_svfiprintf_r+0x17e>
 800b1b0:	b1b0      	cbz	r0, 800b1e0 <_svfiprintf_r+0x110>
 800b1b2:	9207      	str	r2, [sp, #28]
 800b1b4:	e014      	b.n	800b1e0 <_svfiprintf_r+0x110>
 800b1b6:	eba0 0308 	sub.w	r3, r0, r8
 800b1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	46a2      	mov	sl, r4
 800b1c4:	e7d2      	b.n	800b16c <_svfiprintf_r+0x9c>
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	1d19      	adds	r1, r3, #4
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	9103      	str	r1, [sp, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bfbb      	ittet	lt
 800b1d2:	425b      	neglt	r3, r3
 800b1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d8:	9307      	strge	r3, [sp, #28]
 800b1da:	9307      	strlt	r3, [sp, #28]
 800b1dc:	bfb8      	it	lt
 800b1de:	9204      	strlt	r2, [sp, #16]
 800b1e0:	7823      	ldrb	r3, [r4, #0]
 800b1e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e4:	d10c      	bne.n	800b200 <_svfiprintf_r+0x130>
 800b1e6:	7863      	ldrb	r3, [r4, #1]
 800b1e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ea:	d135      	bne.n	800b258 <_svfiprintf_r+0x188>
 800b1ec:	9b03      	ldr	r3, [sp, #12]
 800b1ee:	1d1a      	adds	r2, r3, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	9203      	str	r2, [sp, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bfb8      	it	lt
 800b1f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1fc:	3402      	adds	r4, #2
 800b1fe:	9305      	str	r3, [sp, #20]
 800b200:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2cc <_svfiprintf_r+0x1fc>
 800b204:	7821      	ldrb	r1, [r4, #0]
 800b206:	2203      	movs	r2, #3
 800b208:	4650      	mov	r0, sl
 800b20a:	f7f4 ffe1 	bl	80001d0 <memchr>
 800b20e:	b140      	cbz	r0, 800b222 <_svfiprintf_r+0x152>
 800b210:	2340      	movs	r3, #64	; 0x40
 800b212:	eba0 000a 	sub.w	r0, r0, sl
 800b216:	fa03 f000 	lsl.w	r0, r3, r0
 800b21a:	9b04      	ldr	r3, [sp, #16]
 800b21c:	4303      	orrs	r3, r0
 800b21e:	3401      	adds	r4, #1
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b226:	4826      	ldr	r0, [pc, #152]	; (800b2c0 <_svfiprintf_r+0x1f0>)
 800b228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b22c:	2206      	movs	r2, #6
 800b22e:	f7f4 ffcf 	bl	80001d0 <memchr>
 800b232:	2800      	cmp	r0, #0
 800b234:	d038      	beq.n	800b2a8 <_svfiprintf_r+0x1d8>
 800b236:	4b23      	ldr	r3, [pc, #140]	; (800b2c4 <_svfiprintf_r+0x1f4>)
 800b238:	bb1b      	cbnz	r3, 800b282 <_svfiprintf_r+0x1b2>
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	3307      	adds	r3, #7
 800b23e:	f023 0307 	bic.w	r3, r3, #7
 800b242:	3308      	adds	r3, #8
 800b244:	9303      	str	r3, [sp, #12]
 800b246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b248:	4433      	add	r3, r6
 800b24a:	9309      	str	r3, [sp, #36]	; 0x24
 800b24c:	e767      	b.n	800b11e <_svfiprintf_r+0x4e>
 800b24e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b252:	460c      	mov	r4, r1
 800b254:	2001      	movs	r0, #1
 800b256:	e7a5      	b.n	800b1a4 <_svfiprintf_r+0xd4>
 800b258:	2300      	movs	r3, #0
 800b25a:	3401      	adds	r4, #1
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	4619      	mov	r1, r3
 800b260:	f04f 0c0a 	mov.w	ip, #10
 800b264:	4620      	mov	r0, r4
 800b266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b26a:	3a30      	subs	r2, #48	; 0x30
 800b26c:	2a09      	cmp	r2, #9
 800b26e:	d903      	bls.n	800b278 <_svfiprintf_r+0x1a8>
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0c5      	beq.n	800b200 <_svfiprintf_r+0x130>
 800b274:	9105      	str	r1, [sp, #20]
 800b276:	e7c3      	b.n	800b200 <_svfiprintf_r+0x130>
 800b278:	fb0c 2101 	mla	r1, ip, r1, r2
 800b27c:	4604      	mov	r4, r0
 800b27e:	2301      	movs	r3, #1
 800b280:	e7f0      	b.n	800b264 <_svfiprintf_r+0x194>
 800b282:	ab03      	add	r3, sp, #12
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	462a      	mov	r2, r5
 800b288:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <_svfiprintf_r+0x1f8>)
 800b28a:	a904      	add	r1, sp, #16
 800b28c:	4638      	mov	r0, r7
 800b28e:	f3af 8000 	nop.w
 800b292:	1c42      	adds	r2, r0, #1
 800b294:	4606      	mov	r6, r0
 800b296:	d1d6      	bne.n	800b246 <_svfiprintf_r+0x176>
 800b298:	89ab      	ldrh	r3, [r5, #12]
 800b29a:	065b      	lsls	r3, r3, #25
 800b29c:	f53f af2c 	bmi.w	800b0f8 <_svfiprintf_r+0x28>
 800b2a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2a2:	b01d      	add	sp, #116	; 0x74
 800b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a8:	ab03      	add	r3, sp, #12
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	4b06      	ldr	r3, [pc, #24]	; (800b2c8 <_svfiprintf_r+0x1f8>)
 800b2b0:	a904      	add	r1, sp, #16
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f000 f87a 	bl	800b3ac <_printf_i>
 800b2b8:	e7eb      	b.n	800b292 <_svfiprintf_r+0x1c2>
 800b2ba:	bf00      	nop
 800b2bc:	0800c028 	.word	0x0800c028
 800b2c0:	0800c032 	.word	0x0800c032
 800b2c4:	00000000 	.word	0x00000000
 800b2c8:	0800b019 	.word	0x0800b019
 800b2cc:	0800c02e 	.word	0x0800c02e

0800b2d0 <_printf_common>:
 800b2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d4:	4616      	mov	r6, r2
 800b2d6:	4699      	mov	r9, r3
 800b2d8:	688a      	ldr	r2, [r1, #8]
 800b2da:	690b      	ldr	r3, [r1, #16]
 800b2dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	bfb8      	it	lt
 800b2e4:	4613      	movlt	r3, r2
 800b2e6:	6033      	str	r3, [r6, #0]
 800b2e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	b10a      	cbz	r2, 800b2f6 <_printf_common+0x26>
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	6033      	str	r3, [r6, #0]
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	0699      	lsls	r1, r3, #26
 800b2fa:	bf42      	ittt	mi
 800b2fc:	6833      	ldrmi	r3, [r6, #0]
 800b2fe:	3302      	addmi	r3, #2
 800b300:	6033      	strmi	r3, [r6, #0]
 800b302:	6825      	ldr	r5, [r4, #0]
 800b304:	f015 0506 	ands.w	r5, r5, #6
 800b308:	d106      	bne.n	800b318 <_printf_common+0x48>
 800b30a:	f104 0a19 	add.w	sl, r4, #25
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	6832      	ldr	r2, [r6, #0]
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	42ab      	cmp	r3, r5
 800b316:	dc26      	bgt.n	800b366 <_printf_common+0x96>
 800b318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b31c:	1e13      	subs	r3, r2, #0
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	bf18      	it	ne
 800b322:	2301      	movne	r3, #1
 800b324:	0692      	lsls	r2, r2, #26
 800b326:	d42b      	bmi.n	800b380 <_printf_common+0xb0>
 800b328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b32c:	4649      	mov	r1, r9
 800b32e:	4638      	mov	r0, r7
 800b330:	47c0      	blx	r8
 800b332:	3001      	adds	r0, #1
 800b334:	d01e      	beq.n	800b374 <_printf_common+0xa4>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	68e5      	ldr	r5, [r4, #12]
 800b33a:	6832      	ldr	r2, [r6, #0]
 800b33c:	f003 0306 	and.w	r3, r3, #6
 800b340:	2b04      	cmp	r3, #4
 800b342:	bf08      	it	eq
 800b344:	1aad      	subeq	r5, r5, r2
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	6922      	ldr	r2, [r4, #16]
 800b34a:	bf0c      	ite	eq
 800b34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b350:	2500      	movne	r5, #0
 800b352:	4293      	cmp	r3, r2
 800b354:	bfc4      	itt	gt
 800b356:	1a9b      	subgt	r3, r3, r2
 800b358:	18ed      	addgt	r5, r5, r3
 800b35a:	2600      	movs	r6, #0
 800b35c:	341a      	adds	r4, #26
 800b35e:	42b5      	cmp	r5, r6
 800b360:	d11a      	bne.n	800b398 <_printf_common+0xc8>
 800b362:	2000      	movs	r0, #0
 800b364:	e008      	b.n	800b378 <_printf_common+0xa8>
 800b366:	2301      	movs	r3, #1
 800b368:	4652      	mov	r2, sl
 800b36a:	4649      	mov	r1, r9
 800b36c:	4638      	mov	r0, r7
 800b36e:	47c0      	blx	r8
 800b370:	3001      	adds	r0, #1
 800b372:	d103      	bne.n	800b37c <_printf_common+0xac>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37c:	3501      	adds	r5, #1
 800b37e:	e7c6      	b.n	800b30e <_printf_common+0x3e>
 800b380:	18e1      	adds	r1, r4, r3
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	2030      	movs	r0, #48	; 0x30
 800b386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b38a:	4422      	add	r2, r4
 800b38c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b394:	3302      	adds	r3, #2
 800b396:	e7c7      	b.n	800b328 <_printf_common+0x58>
 800b398:	2301      	movs	r3, #1
 800b39a:	4622      	mov	r2, r4
 800b39c:	4649      	mov	r1, r9
 800b39e:	4638      	mov	r0, r7
 800b3a0:	47c0      	blx	r8
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d0e6      	beq.n	800b374 <_printf_common+0xa4>
 800b3a6:	3601      	adds	r6, #1
 800b3a8:	e7d9      	b.n	800b35e <_printf_common+0x8e>
	...

0800b3ac <_printf_i>:
 800b3ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	4691      	mov	r9, r2
 800b3b4:	7e27      	ldrb	r7, [r4, #24]
 800b3b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b3b8:	2f78      	cmp	r7, #120	; 0x78
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	469a      	mov	sl, r3
 800b3be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3c2:	d807      	bhi.n	800b3d4 <_printf_i+0x28>
 800b3c4:	2f62      	cmp	r7, #98	; 0x62
 800b3c6:	d80a      	bhi.n	800b3de <_printf_i+0x32>
 800b3c8:	2f00      	cmp	r7, #0
 800b3ca:	f000 80d8 	beq.w	800b57e <_printf_i+0x1d2>
 800b3ce:	2f58      	cmp	r7, #88	; 0x58
 800b3d0:	f000 80a3 	beq.w	800b51a <_printf_i+0x16e>
 800b3d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3dc:	e03a      	b.n	800b454 <_printf_i+0xa8>
 800b3de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3e2:	2b15      	cmp	r3, #21
 800b3e4:	d8f6      	bhi.n	800b3d4 <_printf_i+0x28>
 800b3e6:	a001      	add	r0, pc, #4	; (adr r0, 800b3ec <_printf_i+0x40>)
 800b3e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b3ec:	0800b445 	.word	0x0800b445
 800b3f0:	0800b459 	.word	0x0800b459
 800b3f4:	0800b3d5 	.word	0x0800b3d5
 800b3f8:	0800b3d5 	.word	0x0800b3d5
 800b3fc:	0800b3d5 	.word	0x0800b3d5
 800b400:	0800b3d5 	.word	0x0800b3d5
 800b404:	0800b459 	.word	0x0800b459
 800b408:	0800b3d5 	.word	0x0800b3d5
 800b40c:	0800b3d5 	.word	0x0800b3d5
 800b410:	0800b3d5 	.word	0x0800b3d5
 800b414:	0800b3d5 	.word	0x0800b3d5
 800b418:	0800b565 	.word	0x0800b565
 800b41c:	0800b489 	.word	0x0800b489
 800b420:	0800b547 	.word	0x0800b547
 800b424:	0800b3d5 	.word	0x0800b3d5
 800b428:	0800b3d5 	.word	0x0800b3d5
 800b42c:	0800b587 	.word	0x0800b587
 800b430:	0800b3d5 	.word	0x0800b3d5
 800b434:	0800b489 	.word	0x0800b489
 800b438:	0800b3d5 	.word	0x0800b3d5
 800b43c:	0800b3d5 	.word	0x0800b3d5
 800b440:	0800b54f 	.word	0x0800b54f
 800b444:	680b      	ldr	r3, [r1, #0]
 800b446:	1d1a      	adds	r2, r3, #4
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	600a      	str	r2, [r1, #0]
 800b44c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b454:	2301      	movs	r3, #1
 800b456:	e0a3      	b.n	800b5a0 <_printf_i+0x1f4>
 800b458:	6825      	ldr	r5, [r4, #0]
 800b45a:	6808      	ldr	r0, [r1, #0]
 800b45c:	062e      	lsls	r6, r5, #24
 800b45e:	f100 0304 	add.w	r3, r0, #4
 800b462:	d50a      	bpl.n	800b47a <_printf_i+0xce>
 800b464:	6805      	ldr	r5, [r0, #0]
 800b466:	600b      	str	r3, [r1, #0]
 800b468:	2d00      	cmp	r5, #0
 800b46a:	da03      	bge.n	800b474 <_printf_i+0xc8>
 800b46c:	232d      	movs	r3, #45	; 0x2d
 800b46e:	426d      	negs	r5, r5
 800b470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b474:	485e      	ldr	r0, [pc, #376]	; (800b5f0 <_printf_i+0x244>)
 800b476:	230a      	movs	r3, #10
 800b478:	e019      	b.n	800b4ae <_printf_i+0x102>
 800b47a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b47e:	6805      	ldr	r5, [r0, #0]
 800b480:	600b      	str	r3, [r1, #0]
 800b482:	bf18      	it	ne
 800b484:	b22d      	sxthne	r5, r5
 800b486:	e7ef      	b.n	800b468 <_printf_i+0xbc>
 800b488:	680b      	ldr	r3, [r1, #0]
 800b48a:	6825      	ldr	r5, [r4, #0]
 800b48c:	1d18      	adds	r0, r3, #4
 800b48e:	6008      	str	r0, [r1, #0]
 800b490:	0628      	lsls	r0, r5, #24
 800b492:	d501      	bpl.n	800b498 <_printf_i+0xec>
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	e002      	b.n	800b49e <_printf_i+0xf2>
 800b498:	0669      	lsls	r1, r5, #25
 800b49a:	d5fb      	bpl.n	800b494 <_printf_i+0xe8>
 800b49c:	881d      	ldrh	r5, [r3, #0]
 800b49e:	4854      	ldr	r0, [pc, #336]	; (800b5f0 <_printf_i+0x244>)
 800b4a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b4a2:	bf0c      	ite	eq
 800b4a4:	2308      	moveq	r3, #8
 800b4a6:	230a      	movne	r3, #10
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4ae:	6866      	ldr	r6, [r4, #4]
 800b4b0:	60a6      	str	r6, [r4, #8]
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	bfa2      	ittt	ge
 800b4b6:	6821      	ldrge	r1, [r4, #0]
 800b4b8:	f021 0104 	bicge.w	r1, r1, #4
 800b4bc:	6021      	strge	r1, [r4, #0]
 800b4be:	b90d      	cbnz	r5, 800b4c4 <_printf_i+0x118>
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	d04d      	beq.n	800b560 <_printf_i+0x1b4>
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4ca:	fb03 5711 	mls	r7, r3, r1, r5
 800b4ce:	5dc7      	ldrb	r7, [r0, r7]
 800b4d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4d4:	462f      	mov	r7, r5
 800b4d6:	42bb      	cmp	r3, r7
 800b4d8:	460d      	mov	r5, r1
 800b4da:	d9f4      	bls.n	800b4c6 <_printf_i+0x11a>
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d10b      	bne.n	800b4f8 <_printf_i+0x14c>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	07df      	lsls	r7, r3, #31
 800b4e4:	d508      	bpl.n	800b4f8 <_printf_i+0x14c>
 800b4e6:	6923      	ldr	r3, [r4, #16]
 800b4e8:	6861      	ldr	r1, [r4, #4]
 800b4ea:	4299      	cmp	r1, r3
 800b4ec:	bfde      	ittt	le
 800b4ee:	2330      	movle	r3, #48	; 0x30
 800b4f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4f8:	1b92      	subs	r2, r2, r6
 800b4fa:	6122      	str	r2, [r4, #16]
 800b4fc:	f8cd a000 	str.w	sl, [sp]
 800b500:	464b      	mov	r3, r9
 800b502:	aa03      	add	r2, sp, #12
 800b504:	4621      	mov	r1, r4
 800b506:	4640      	mov	r0, r8
 800b508:	f7ff fee2 	bl	800b2d0 <_printf_common>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d14c      	bne.n	800b5aa <_printf_i+0x1fe>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	b004      	add	sp, #16
 800b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51a:	4835      	ldr	r0, [pc, #212]	; (800b5f0 <_printf_i+0x244>)
 800b51c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	680e      	ldr	r6, [r1, #0]
 800b524:	061f      	lsls	r7, r3, #24
 800b526:	f856 5b04 	ldr.w	r5, [r6], #4
 800b52a:	600e      	str	r6, [r1, #0]
 800b52c:	d514      	bpl.n	800b558 <_printf_i+0x1ac>
 800b52e:	07d9      	lsls	r1, r3, #31
 800b530:	bf44      	itt	mi
 800b532:	f043 0320 	orrmi.w	r3, r3, #32
 800b536:	6023      	strmi	r3, [r4, #0]
 800b538:	b91d      	cbnz	r5, 800b542 <_printf_i+0x196>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	f023 0320 	bic.w	r3, r3, #32
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	2310      	movs	r3, #16
 800b544:	e7b0      	b.n	800b4a8 <_printf_i+0xfc>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	f043 0320 	orr.w	r3, r3, #32
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	2378      	movs	r3, #120	; 0x78
 800b550:	4828      	ldr	r0, [pc, #160]	; (800b5f4 <_printf_i+0x248>)
 800b552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b556:	e7e3      	b.n	800b520 <_printf_i+0x174>
 800b558:	065e      	lsls	r6, r3, #25
 800b55a:	bf48      	it	mi
 800b55c:	b2ad      	uxthmi	r5, r5
 800b55e:	e7e6      	b.n	800b52e <_printf_i+0x182>
 800b560:	4616      	mov	r6, r2
 800b562:	e7bb      	b.n	800b4dc <_printf_i+0x130>
 800b564:	680b      	ldr	r3, [r1, #0]
 800b566:	6826      	ldr	r6, [r4, #0]
 800b568:	6960      	ldr	r0, [r4, #20]
 800b56a:	1d1d      	adds	r5, r3, #4
 800b56c:	600d      	str	r5, [r1, #0]
 800b56e:	0635      	lsls	r5, r6, #24
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	d501      	bpl.n	800b578 <_printf_i+0x1cc>
 800b574:	6018      	str	r0, [r3, #0]
 800b576:	e002      	b.n	800b57e <_printf_i+0x1d2>
 800b578:	0671      	lsls	r1, r6, #25
 800b57a:	d5fb      	bpl.n	800b574 <_printf_i+0x1c8>
 800b57c:	8018      	strh	r0, [r3, #0]
 800b57e:	2300      	movs	r3, #0
 800b580:	6123      	str	r3, [r4, #16]
 800b582:	4616      	mov	r6, r2
 800b584:	e7ba      	b.n	800b4fc <_printf_i+0x150>
 800b586:	680b      	ldr	r3, [r1, #0]
 800b588:	1d1a      	adds	r2, r3, #4
 800b58a:	600a      	str	r2, [r1, #0]
 800b58c:	681e      	ldr	r6, [r3, #0]
 800b58e:	6862      	ldr	r2, [r4, #4]
 800b590:	2100      	movs	r1, #0
 800b592:	4630      	mov	r0, r6
 800b594:	f7f4 fe1c 	bl	80001d0 <memchr>
 800b598:	b108      	cbz	r0, 800b59e <_printf_i+0x1f2>
 800b59a:	1b80      	subs	r0, r0, r6
 800b59c:	6060      	str	r0, [r4, #4]
 800b59e:	6863      	ldr	r3, [r4, #4]
 800b5a0:	6123      	str	r3, [r4, #16]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a8:	e7a8      	b.n	800b4fc <_printf_i+0x150>
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	4632      	mov	r2, r6
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	47d0      	blx	sl
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d0ab      	beq.n	800b510 <_printf_i+0x164>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	079b      	lsls	r3, r3, #30
 800b5bc:	d413      	bmi.n	800b5e6 <_printf_i+0x23a>
 800b5be:	68e0      	ldr	r0, [r4, #12]
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	4298      	cmp	r0, r3
 800b5c4:	bfb8      	it	lt
 800b5c6:	4618      	movlt	r0, r3
 800b5c8:	e7a4      	b.n	800b514 <_printf_i+0x168>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	47d0      	blx	sl
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d09b      	beq.n	800b510 <_printf_i+0x164>
 800b5d8:	3501      	adds	r5, #1
 800b5da:	68e3      	ldr	r3, [r4, #12]
 800b5dc:	9903      	ldr	r1, [sp, #12]
 800b5de:	1a5b      	subs	r3, r3, r1
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	dcf2      	bgt.n	800b5ca <_printf_i+0x21e>
 800b5e4:	e7eb      	b.n	800b5be <_printf_i+0x212>
 800b5e6:	2500      	movs	r5, #0
 800b5e8:	f104 0619 	add.w	r6, r4, #25
 800b5ec:	e7f5      	b.n	800b5da <_printf_i+0x22e>
 800b5ee:	bf00      	nop
 800b5f0:	0800c039 	.word	0x0800c039
 800b5f4:	0800c04a 	.word	0x0800c04a

0800b5f8 <memmove>:
 800b5f8:	4288      	cmp	r0, r1
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	eb01 0402 	add.w	r4, r1, r2
 800b600:	d902      	bls.n	800b608 <memmove+0x10>
 800b602:	4284      	cmp	r4, r0
 800b604:	4623      	mov	r3, r4
 800b606:	d807      	bhi.n	800b618 <memmove+0x20>
 800b608:	1e43      	subs	r3, r0, #1
 800b60a:	42a1      	cmp	r1, r4
 800b60c:	d008      	beq.n	800b620 <memmove+0x28>
 800b60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b616:	e7f8      	b.n	800b60a <memmove+0x12>
 800b618:	4402      	add	r2, r0
 800b61a:	4601      	mov	r1, r0
 800b61c:	428a      	cmp	r2, r1
 800b61e:	d100      	bne.n	800b622 <memmove+0x2a>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b62a:	e7f7      	b.n	800b61c <memmove+0x24>

0800b62c <_free_r>:
 800b62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b62e:	2900      	cmp	r1, #0
 800b630:	d048      	beq.n	800b6c4 <_free_r+0x98>
 800b632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b636:	9001      	str	r0, [sp, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f1a1 0404 	sub.w	r4, r1, #4
 800b63e:	bfb8      	it	lt
 800b640:	18e4      	addlt	r4, r4, r3
 800b642:	f000 f8d3 	bl	800b7ec <__malloc_lock>
 800b646:	4a20      	ldr	r2, [pc, #128]	; (800b6c8 <_free_r+0x9c>)
 800b648:	9801      	ldr	r0, [sp, #4]
 800b64a:	6813      	ldr	r3, [r2, #0]
 800b64c:	4615      	mov	r5, r2
 800b64e:	b933      	cbnz	r3, 800b65e <_free_r+0x32>
 800b650:	6063      	str	r3, [r4, #4]
 800b652:	6014      	str	r4, [r2, #0]
 800b654:	b003      	add	sp, #12
 800b656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b65a:	f000 b8cd 	b.w	800b7f8 <__malloc_unlock>
 800b65e:	42a3      	cmp	r3, r4
 800b660:	d90b      	bls.n	800b67a <_free_r+0x4e>
 800b662:	6821      	ldr	r1, [r4, #0]
 800b664:	1862      	adds	r2, r4, r1
 800b666:	4293      	cmp	r3, r2
 800b668:	bf04      	itt	eq
 800b66a:	681a      	ldreq	r2, [r3, #0]
 800b66c:	685b      	ldreq	r3, [r3, #4]
 800b66e:	6063      	str	r3, [r4, #4]
 800b670:	bf04      	itt	eq
 800b672:	1852      	addeq	r2, r2, r1
 800b674:	6022      	streq	r2, [r4, #0]
 800b676:	602c      	str	r4, [r5, #0]
 800b678:	e7ec      	b.n	800b654 <_free_r+0x28>
 800b67a:	461a      	mov	r2, r3
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	b10b      	cbz	r3, 800b684 <_free_r+0x58>
 800b680:	42a3      	cmp	r3, r4
 800b682:	d9fa      	bls.n	800b67a <_free_r+0x4e>
 800b684:	6811      	ldr	r1, [r2, #0]
 800b686:	1855      	adds	r5, r2, r1
 800b688:	42a5      	cmp	r5, r4
 800b68a:	d10b      	bne.n	800b6a4 <_free_r+0x78>
 800b68c:	6824      	ldr	r4, [r4, #0]
 800b68e:	4421      	add	r1, r4
 800b690:	1854      	adds	r4, r2, r1
 800b692:	42a3      	cmp	r3, r4
 800b694:	6011      	str	r1, [r2, #0]
 800b696:	d1dd      	bne.n	800b654 <_free_r+0x28>
 800b698:	681c      	ldr	r4, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	6053      	str	r3, [r2, #4]
 800b69e:	4421      	add	r1, r4
 800b6a0:	6011      	str	r1, [r2, #0]
 800b6a2:	e7d7      	b.n	800b654 <_free_r+0x28>
 800b6a4:	d902      	bls.n	800b6ac <_free_r+0x80>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6003      	str	r3, [r0, #0]
 800b6aa:	e7d3      	b.n	800b654 <_free_r+0x28>
 800b6ac:	6825      	ldr	r5, [r4, #0]
 800b6ae:	1961      	adds	r1, r4, r5
 800b6b0:	428b      	cmp	r3, r1
 800b6b2:	bf04      	itt	eq
 800b6b4:	6819      	ldreq	r1, [r3, #0]
 800b6b6:	685b      	ldreq	r3, [r3, #4]
 800b6b8:	6063      	str	r3, [r4, #4]
 800b6ba:	bf04      	itt	eq
 800b6bc:	1949      	addeq	r1, r1, r5
 800b6be:	6021      	streq	r1, [r4, #0]
 800b6c0:	6054      	str	r4, [r2, #4]
 800b6c2:	e7c7      	b.n	800b654 <_free_r+0x28>
 800b6c4:	b003      	add	sp, #12
 800b6c6:	bd30      	pop	{r4, r5, pc}
 800b6c8:	2000035c 	.word	0x2000035c

0800b6cc <_malloc_r>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	1ccd      	adds	r5, r1, #3
 800b6d0:	f025 0503 	bic.w	r5, r5, #3
 800b6d4:	3508      	adds	r5, #8
 800b6d6:	2d0c      	cmp	r5, #12
 800b6d8:	bf38      	it	cc
 800b6da:	250c      	movcc	r5, #12
 800b6dc:	2d00      	cmp	r5, #0
 800b6de:	4606      	mov	r6, r0
 800b6e0:	db01      	blt.n	800b6e6 <_malloc_r+0x1a>
 800b6e2:	42a9      	cmp	r1, r5
 800b6e4:	d903      	bls.n	800b6ee <_malloc_r+0x22>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	6033      	str	r3, [r6, #0]
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ee:	f000 f87d 	bl	800b7ec <__malloc_lock>
 800b6f2:	4921      	ldr	r1, [pc, #132]	; (800b778 <_malloc_r+0xac>)
 800b6f4:	680a      	ldr	r2, [r1, #0]
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	b99c      	cbnz	r4, 800b722 <_malloc_r+0x56>
 800b6fa:	4f20      	ldr	r7, [pc, #128]	; (800b77c <_malloc_r+0xb0>)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	b923      	cbnz	r3, 800b70a <_malloc_r+0x3e>
 800b700:	4621      	mov	r1, r4
 800b702:	4630      	mov	r0, r6
 800b704:	f000 f862 	bl	800b7cc <_sbrk_r>
 800b708:	6038      	str	r0, [r7, #0]
 800b70a:	4629      	mov	r1, r5
 800b70c:	4630      	mov	r0, r6
 800b70e:	f000 f85d 	bl	800b7cc <_sbrk_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d123      	bne.n	800b75e <_malloc_r+0x92>
 800b716:	230c      	movs	r3, #12
 800b718:	6033      	str	r3, [r6, #0]
 800b71a:	4630      	mov	r0, r6
 800b71c:	f000 f86c 	bl	800b7f8 <__malloc_unlock>
 800b720:	e7e3      	b.n	800b6ea <_malloc_r+0x1e>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	1b5b      	subs	r3, r3, r5
 800b726:	d417      	bmi.n	800b758 <_malloc_r+0x8c>
 800b728:	2b0b      	cmp	r3, #11
 800b72a:	d903      	bls.n	800b734 <_malloc_r+0x68>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	441c      	add	r4, r3
 800b730:	6025      	str	r5, [r4, #0]
 800b732:	e004      	b.n	800b73e <_malloc_r+0x72>
 800b734:	6863      	ldr	r3, [r4, #4]
 800b736:	42a2      	cmp	r2, r4
 800b738:	bf0c      	ite	eq
 800b73a:	600b      	streq	r3, [r1, #0]
 800b73c:	6053      	strne	r3, [r2, #4]
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 f85a 	bl	800b7f8 <__malloc_unlock>
 800b744:	f104 000b 	add.w	r0, r4, #11
 800b748:	1d23      	adds	r3, r4, #4
 800b74a:	f020 0007 	bic.w	r0, r0, #7
 800b74e:	1ac2      	subs	r2, r0, r3
 800b750:	d0cc      	beq.n	800b6ec <_malloc_r+0x20>
 800b752:	1a1b      	subs	r3, r3, r0
 800b754:	50a3      	str	r3, [r4, r2]
 800b756:	e7c9      	b.n	800b6ec <_malloc_r+0x20>
 800b758:	4622      	mov	r2, r4
 800b75a:	6864      	ldr	r4, [r4, #4]
 800b75c:	e7cc      	b.n	800b6f8 <_malloc_r+0x2c>
 800b75e:	1cc4      	adds	r4, r0, #3
 800b760:	f024 0403 	bic.w	r4, r4, #3
 800b764:	42a0      	cmp	r0, r4
 800b766:	d0e3      	beq.n	800b730 <_malloc_r+0x64>
 800b768:	1a21      	subs	r1, r4, r0
 800b76a:	4630      	mov	r0, r6
 800b76c:	f000 f82e 	bl	800b7cc <_sbrk_r>
 800b770:	3001      	adds	r0, #1
 800b772:	d1dd      	bne.n	800b730 <_malloc_r+0x64>
 800b774:	e7cf      	b.n	800b716 <_malloc_r+0x4a>
 800b776:	bf00      	nop
 800b778:	2000035c 	.word	0x2000035c
 800b77c:	20000360 	.word	0x20000360

0800b780 <_realloc_r>:
 800b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b782:	4607      	mov	r7, r0
 800b784:	4614      	mov	r4, r2
 800b786:	460e      	mov	r6, r1
 800b788:	b921      	cbnz	r1, 800b794 <_realloc_r+0x14>
 800b78a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b78e:	4611      	mov	r1, r2
 800b790:	f7ff bf9c 	b.w	800b6cc <_malloc_r>
 800b794:	b922      	cbnz	r2, 800b7a0 <_realloc_r+0x20>
 800b796:	f7ff ff49 	bl	800b62c <_free_r>
 800b79a:	4625      	mov	r5, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a0:	f000 f830 	bl	800b804 <_malloc_usable_size_r>
 800b7a4:	42a0      	cmp	r0, r4
 800b7a6:	d20f      	bcs.n	800b7c8 <_realloc_r+0x48>
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	f7ff ff8e 	bl	800b6cc <_malloc_r>
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d0f2      	beq.n	800b79c <_realloc_r+0x1c>
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	f7ff fbe3 	bl	800af84 <memcpy>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff ff33 	bl	800b62c <_free_r>
 800b7c6:	e7e9      	b.n	800b79c <_realloc_r+0x1c>
 800b7c8:	4635      	mov	r5, r6
 800b7ca:	e7e7      	b.n	800b79c <_realloc_r+0x1c>

0800b7cc <_sbrk_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d06      	ldr	r5, [pc, #24]	; (800b7e8 <_sbrk_r+0x1c>)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	602b      	str	r3, [r5, #0]
 800b7d8:	f7f6 fb58 	bl	8001e8c <_sbrk>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_sbrk_r+0x1a>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_sbrk_r+0x1a>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20000688 	.word	0x20000688

0800b7ec <__malloc_lock>:
 800b7ec:	4801      	ldr	r0, [pc, #4]	; (800b7f4 <__malloc_lock+0x8>)
 800b7ee:	f000 b811 	b.w	800b814 <__retarget_lock_acquire_recursive>
 800b7f2:	bf00      	nop
 800b7f4:	20000690 	.word	0x20000690

0800b7f8 <__malloc_unlock>:
 800b7f8:	4801      	ldr	r0, [pc, #4]	; (800b800 <__malloc_unlock+0x8>)
 800b7fa:	f000 b80c 	b.w	800b816 <__retarget_lock_release_recursive>
 800b7fe:	bf00      	nop
 800b800:	20000690 	.word	0x20000690

0800b804 <_malloc_usable_size_r>:
 800b804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b808:	1f18      	subs	r0, r3, #4
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	bfbc      	itt	lt
 800b80e:	580b      	ldrlt	r3, [r1, r0]
 800b810:	18c0      	addlt	r0, r0, r3
 800b812:	4770      	bx	lr

0800b814 <__retarget_lock_acquire_recursive>:
 800b814:	4770      	bx	lr

0800b816 <__retarget_lock_release_recursive>:
 800b816:	4770      	bx	lr

0800b818 <_init>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	bf00      	nop
 800b81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81e:	bc08      	pop	{r3}
 800b820:	469e      	mov	lr, r3
 800b822:	4770      	bx	lr

0800b824 <_fini>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	bf00      	nop
 800b828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82a:	bc08      	pop	{r3}
 800b82c:	469e      	mov	lr, r3
 800b82e:	4770      	bx	lr
